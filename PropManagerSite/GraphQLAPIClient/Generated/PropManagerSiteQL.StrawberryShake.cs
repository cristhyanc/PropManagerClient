// <auto-generated/>
#nullable enable

namespace Microsoft.Extensions.DependencyInjection
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public static partial class PropManagerSiteQLServiceCollectionExtensions
    {
        public static global::StrawberryShake.IClientBuilder<global::PropManagerSite.GraphQL.State.PropManagerSiteQLStoreAccessor> AddPropManagerSiteQL(this global::Microsoft.Extensions.DependencyInjection.IServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)
        {
            var serviceCollection = new global::Microsoft.Extensions.DependencyInjection.ServiceCollection();
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp =>
            {
                ConfigureClientDefault(sp, serviceCollection, strategy);
                return new ClientServiceProvider(global::Microsoft.Extensions.DependencyInjection.ServiceCollectionContainerBuilderExtensions.BuildServiceProvider(serviceCollection));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => new global::PropManagerSite.GraphQL.State.PropManagerSiteQLStoreAccessor(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityIdSerializer>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory>>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory>>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp))));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::PropManagerSite.GraphQL.EditExpenseMutation>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::PropManagerSite.GraphQL.AddExpenseMutation>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::PropManagerSite.GraphQL.DeleteExpenseMutation>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::PropManagerSite.GraphQL.AddLoanMutation>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::PropManagerSite.GraphQL.EddLoanMutation>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::PropManagerSite.GraphQL.DeleteLoanMutation>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::PropManagerSite.GraphQL.CreatePropertyMutation>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::PropManagerSite.GraphQL.EditPropertyMutation>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::PropManagerSite.GraphQL.DeletePropertyMutation>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::PropManagerSite.GraphQL.GetPropertiesQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::PropManagerSite.GraphQL.GetPropertyQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::PropManagerSite.GraphQL.GetLoanQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::PropManagerSite.GraphQL.GetExpenseQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::PropManagerSite.GraphQL.PropManagerSiteQL>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::PropManagerSite.GraphQL.IPropManagerSiteQL>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            return new global::StrawberryShake.ClientBuilder<global::PropManagerSite.GraphQL.State.PropManagerSiteQLStoreAccessor>("PropManagerSiteQL", services, serviceCollection);
        }

        private static global::Microsoft.Extensions.DependencyInjection.IServiceCollection ConfigureClientDefault(global::System.IServiceProvider parentServices, global::Microsoft.Extensions.DependencyInjection.ServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)
        {
            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IEntityStore, global::StrawberryShake.EntityStore>(services);
            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IOperationStore>(services, sp => new global::StrawberryShake.OperationStore(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Transport.Http.IHttpConnection>(services, sp =>
            {
                var clientFactory = global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Net.Http.IHttpClientFactory>(parentServices);
                return new global::StrawberryShake.Transport.Http.HttpConnection(() => clientFactory.CreateClient("PropManagerSiteQL"));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::PropManagerSite.GraphQL.State.ExpenseEntity, global::PropManagerSite.GraphQL.EditExpense_EditExpense_Expense_Expense>, global::PropManagerSite.GraphQL.State.EditExpense_EditExpense_Expense_ExpenseFromExpenseEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::PropManagerSite.GraphQL.State.ExpenseEntity, global::PropManagerSite.GraphQL.AddExpense_AddExpense_Expense_Expense>, global::PropManagerSite.GraphQL.State.AddExpense_AddExpense_Expense_ExpenseFromExpenseEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::PropManagerSite.GraphQL.State.LoanEntity, global::PropManagerSite.GraphQL.AddLoan_AddLoan_Loan_Loan>, global::PropManagerSite.GraphQL.State.AddLoan_AddLoan_Loan_LoanFromLoanEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::PropManagerSite.GraphQL.State.LoanEntity, global::PropManagerSite.GraphQL.EddLoan_EditLoan_Loan_Loan>, global::PropManagerSite.GraphQL.State.EddLoan_EditLoan_Loan_LoanFromLoanEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::PropManagerSite.GraphQL.State.PropertyEntity, global::PropManagerSite.GraphQL.CreateProperty_AddProperty_Property_Property>, global::PropManagerSite.GraphQL.State.CreateProperty_AddProperty_Property_PropertyFromPropertyEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::PropManagerSite.GraphQL.State.PropertyEntity, global::PropManagerSite.GraphQL.EditProperty_EditProperty_Property_Property>, global::PropManagerSite.GraphQL.State.EditProperty_EditProperty_Property_PropertyFromPropertyEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::PropManagerSite.GraphQL.State.LoanEntity, global::PropManagerSite.GraphQL.EditProperty_EditProperty_Property_Loans_Loan>, global::PropManagerSite.GraphQL.State.EditProperty_EditProperty_Property_Loans_LoanFromLoanEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::PropManagerSite.GraphQL.State.ExpenseEntity, global::PropManagerSite.GraphQL.EditProperty_EditProperty_Property_Expenses_Expense>, global::PropManagerSite.GraphQL.State.EditProperty_EditProperty_Property_Expenses_ExpenseFromExpenseEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::PropManagerSite.GraphQL.State.PropertyEntity, global::PropManagerSite.GraphQL.EditProperty_EditProperty_Property_Loans_Property_Property>, global::PropManagerSite.GraphQL.State.EditProperty_EditProperty_Property_Loans_Property_PropertyFromPropertyEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::PropManagerSite.GraphQL.State.PropertyEntity, global::PropManagerSite.GraphQL.EditProperty_EditProperty_Property_Expenses_Property_Property>, global::PropManagerSite.GraphQL.State.EditProperty_EditProperty_Property_Expenses_Property_PropertyFromPropertyEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::PropManagerSite.GraphQL.State.PropertyEntity, global::PropManagerSite.GraphQL.GetProperties_Properties_Property>, global::PropManagerSite.GraphQL.State.GetProperties_Properties_PropertyFromPropertyEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::PropManagerSite.GraphQL.State.PropertyEntity, global::PropManagerSite.GraphQL.GetProperty_Properties_Property>, global::PropManagerSite.GraphQL.State.GetProperty_Properties_PropertyFromPropertyEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::PropManagerSite.GraphQL.State.LoanEntity, global::PropManagerSite.GraphQL.GetProperty_Properties_Loans_Loan>, global::PropManagerSite.GraphQL.State.GetProperty_Properties_Loans_LoanFromLoanEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::PropManagerSite.GraphQL.State.ExpenseEntity, global::PropManagerSite.GraphQL.GetProperty_Properties_Expenses_Expense>, global::PropManagerSite.GraphQL.State.GetProperty_Properties_Expenses_ExpenseFromExpenseEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::PropManagerSite.GraphQL.State.PropertyEntity, global::PropManagerSite.GraphQL.GetProperty_Properties_Loans_Property_Property>, global::PropManagerSite.GraphQL.State.GetProperty_Properties_Loans_Property_PropertyFromPropertyEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::PropManagerSite.GraphQL.State.PropertyEntity, global::PropManagerSite.GraphQL.GetProperty_Properties_Expenses_Property_Property>, global::PropManagerSite.GraphQL.State.GetProperty_Properties_Expenses_Property_PropertyFromPropertyEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::PropManagerSite.GraphQL.State.LoanEntity, global::PropManagerSite.GraphQL.GetLoan_Loans_Loan>, global::PropManagerSite.GraphQL.State.GetLoan_Loans_LoanFromLoanEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::PropManagerSite.GraphQL.State.PropertyEntity, global::PropManagerSite.GraphQL.GetLoan_Loans_Property_Property>, global::PropManagerSite.GraphQL.State.GetLoan_Loans_Property_PropertyFromPropertyEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::PropManagerSite.GraphQL.State.ExpenseEntity, global::PropManagerSite.GraphQL.GetExpense_Expenses_Expense>, global::PropManagerSite.GraphQL.State.GetExpense_Expenses_ExpenseFromExpenseEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::PropManagerSite.GraphQL.State.PropertyEntity, global::PropManagerSite.GraphQL.GetExpense_Expenses_Property_Property>, global::PropManagerSite.GraphQL.State.GetExpense_Expenses_Property_PropertyFromPropertyEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::PropManagerSite.GraphQL.LoanTypesSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::PropManagerSite.GraphQL.PropertyTypesSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.StringSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.BooleanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ShortSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IntSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.LongSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.FloatSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DecimalSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UrlSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UUIDSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IdSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateTimeSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteArraySerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.TimeSpanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.JsonSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::PropManagerSite.GraphQL.EditExpenseInputInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::PropManagerSite.GraphQL.AddExpenseInputInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::PropManagerSite.GraphQL.DeleteExpenseInputInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::PropManagerSite.GraphQL.AddLoanInputInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::PropManagerSite.GraphQL.EditLoanInputInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::PropManagerSite.GraphQL.DeleteLoanInputInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::PropManagerSite.GraphQL.AddPropertyInputInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::PropManagerSite.GraphQL.EditPropertyInputInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::PropManagerSite.GraphQL.DeletePropertyInputInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializerResolver>(services, sp => new global::StrawberryShake.Serialization.SerializerResolver(global::System.Linq.Enumerable.Concat(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(parentServices), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(sp))));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::PropManagerSite.GraphQL.IEditExpenseResult>, global::PropManagerSite.GraphQL.State.EditExpenseResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::PropManagerSite.GraphQL.IEditExpenseResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::PropManagerSite.GraphQL.IEditExpenseMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::PropManagerSite.GraphQL.IEditExpenseResult>, global::PropManagerSite.GraphQL.State.EditExpenseBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::PropManagerSite.GraphQL.IEditExpenseResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::PropManagerSite.GraphQL.IEditExpenseResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::PropManagerSite.GraphQL.IEditExpenseResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::PropManagerSite.GraphQL.EditExpenseMutation>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::PropManagerSite.GraphQL.IEditExpenseMutation>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::PropManagerSite.GraphQL.EditExpenseMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::PropManagerSite.GraphQL.IAddExpenseResult>, global::PropManagerSite.GraphQL.State.AddExpenseResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::PropManagerSite.GraphQL.IAddExpenseResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::PropManagerSite.GraphQL.IAddExpenseMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::PropManagerSite.GraphQL.IAddExpenseResult>, global::PropManagerSite.GraphQL.State.AddExpenseBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::PropManagerSite.GraphQL.IAddExpenseResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::PropManagerSite.GraphQL.IAddExpenseResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::PropManagerSite.GraphQL.IAddExpenseResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::PropManagerSite.GraphQL.AddExpenseMutation>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::PropManagerSite.GraphQL.IAddExpenseMutation>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::PropManagerSite.GraphQL.AddExpenseMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::PropManagerSite.GraphQL.IDeleteExpenseResult>, global::PropManagerSite.GraphQL.State.DeleteExpenseResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::PropManagerSite.GraphQL.IDeleteExpenseResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::PropManagerSite.GraphQL.IDeleteExpenseMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::PropManagerSite.GraphQL.IDeleteExpenseResult>, global::PropManagerSite.GraphQL.State.DeleteExpenseBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::PropManagerSite.GraphQL.IDeleteExpenseResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::PropManagerSite.GraphQL.IDeleteExpenseResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::PropManagerSite.GraphQL.IDeleteExpenseResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::PropManagerSite.GraphQL.DeleteExpenseMutation>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::PropManagerSite.GraphQL.IDeleteExpenseMutation>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::PropManagerSite.GraphQL.DeleteExpenseMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::PropManagerSite.GraphQL.IAddLoanResult>, global::PropManagerSite.GraphQL.State.AddLoanResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::PropManagerSite.GraphQL.IAddLoanResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::PropManagerSite.GraphQL.IAddLoanMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::PropManagerSite.GraphQL.IAddLoanResult>, global::PropManagerSite.GraphQL.State.AddLoanBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::PropManagerSite.GraphQL.IAddLoanResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::PropManagerSite.GraphQL.IAddLoanResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::PropManagerSite.GraphQL.IAddLoanResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::PropManagerSite.GraphQL.AddLoanMutation>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::PropManagerSite.GraphQL.IAddLoanMutation>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::PropManagerSite.GraphQL.AddLoanMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::PropManagerSite.GraphQL.IEddLoanResult>, global::PropManagerSite.GraphQL.State.EddLoanResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::PropManagerSite.GraphQL.IEddLoanResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::PropManagerSite.GraphQL.IEddLoanMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::PropManagerSite.GraphQL.IEddLoanResult>, global::PropManagerSite.GraphQL.State.EddLoanBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::PropManagerSite.GraphQL.IEddLoanResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::PropManagerSite.GraphQL.IEddLoanResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::PropManagerSite.GraphQL.IEddLoanResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::PropManagerSite.GraphQL.EddLoanMutation>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::PropManagerSite.GraphQL.IEddLoanMutation>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::PropManagerSite.GraphQL.EddLoanMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::PropManagerSite.GraphQL.IDeleteLoanResult>, global::PropManagerSite.GraphQL.State.DeleteLoanResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::PropManagerSite.GraphQL.IDeleteLoanResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::PropManagerSite.GraphQL.IDeleteLoanMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::PropManagerSite.GraphQL.IDeleteLoanResult>, global::PropManagerSite.GraphQL.State.DeleteLoanBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::PropManagerSite.GraphQL.IDeleteLoanResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::PropManagerSite.GraphQL.IDeleteLoanResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::PropManagerSite.GraphQL.IDeleteLoanResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::PropManagerSite.GraphQL.DeleteLoanMutation>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::PropManagerSite.GraphQL.IDeleteLoanMutation>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::PropManagerSite.GraphQL.DeleteLoanMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::PropManagerSite.GraphQL.ICreatePropertyResult>, global::PropManagerSite.GraphQL.State.CreatePropertyResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::PropManagerSite.GraphQL.ICreatePropertyResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::PropManagerSite.GraphQL.ICreatePropertyMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::PropManagerSite.GraphQL.ICreatePropertyResult>, global::PropManagerSite.GraphQL.State.CreatePropertyBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::PropManagerSite.GraphQL.ICreatePropertyResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::PropManagerSite.GraphQL.ICreatePropertyResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::PropManagerSite.GraphQL.ICreatePropertyResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::PropManagerSite.GraphQL.CreatePropertyMutation>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::PropManagerSite.GraphQL.ICreatePropertyMutation>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::PropManagerSite.GraphQL.CreatePropertyMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::PropManagerSite.GraphQL.IEditPropertyResult>, global::PropManagerSite.GraphQL.State.EditPropertyResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::PropManagerSite.GraphQL.IEditPropertyResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::PropManagerSite.GraphQL.IEditPropertyMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::PropManagerSite.GraphQL.IEditPropertyResult>, global::PropManagerSite.GraphQL.State.EditPropertyBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::PropManagerSite.GraphQL.IEditPropertyResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::PropManagerSite.GraphQL.IEditPropertyResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::PropManagerSite.GraphQL.IEditPropertyResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::PropManagerSite.GraphQL.EditPropertyMutation>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::PropManagerSite.GraphQL.IEditPropertyMutation>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::PropManagerSite.GraphQL.EditPropertyMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::PropManagerSite.GraphQL.IDeletePropertyResult>, global::PropManagerSite.GraphQL.State.DeletePropertyResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::PropManagerSite.GraphQL.IDeletePropertyResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::PropManagerSite.GraphQL.IDeletePropertyMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::PropManagerSite.GraphQL.IDeletePropertyResult>, global::PropManagerSite.GraphQL.State.DeletePropertyBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::PropManagerSite.GraphQL.IDeletePropertyResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::PropManagerSite.GraphQL.IDeletePropertyResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::PropManagerSite.GraphQL.IDeletePropertyResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::PropManagerSite.GraphQL.DeletePropertyMutation>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::PropManagerSite.GraphQL.IDeletePropertyMutation>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::PropManagerSite.GraphQL.DeletePropertyMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::PropManagerSite.GraphQL.IGetPropertiesResult>, global::PropManagerSite.GraphQL.State.GetPropertiesResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::PropManagerSite.GraphQL.IGetPropertiesResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::PropManagerSite.GraphQL.IGetPropertiesQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::PropManagerSite.GraphQL.IGetPropertiesResult>, global::PropManagerSite.GraphQL.State.GetPropertiesBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::PropManagerSite.GraphQL.IGetPropertiesResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::PropManagerSite.GraphQL.IGetPropertiesResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::PropManagerSite.GraphQL.IGetPropertiesResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::PropManagerSite.GraphQL.GetPropertiesQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::PropManagerSite.GraphQL.IGetPropertiesQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::PropManagerSite.GraphQL.GetPropertiesQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::PropManagerSite.GraphQL.IGetPropertyResult>, global::PropManagerSite.GraphQL.State.GetPropertyResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::PropManagerSite.GraphQL.IGetPropertyResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::PropManagerSite.GraphQL.IGetPropertyQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::PropManagerSite.GraphQL.IGetPropertyResult>, global::PropManagerSite.GraphQL.State.GetPropertyBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::PropManagerSite.GraphQL.IGetPropertyResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::PropManagerSite.GraphQL.IGetPropertyResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::PropManagerSite.GraphQL.IGetPropertyResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::PropManagerSite.GraphQL.GetPropertyQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::PropManagerSite.GraphQL.IGetPropertyQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::PropManagerSite.GraphQL.GetPropertyQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::PropManagerSite.GraphQL.IGetLoanResult>, global::PropManagerSite.GraphQL.State.GetLoanResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::PropManagerSite.GraphQL.IGetLoanResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::PropManagerSite.GraphQL.IGetLoanQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::PropManagerSite.GraphQL.IGetLoanResult>, global::PropManagerSite.GraphQL.State.GetLoanBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::PropManagerSite.GraphQL.IGetLoanResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::PropManagerSite.GraphQL.IGetLoanResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::PropManagerSite.GraphQL.IGetLoanResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::PropManagerSite.GraphQL.GetLoanQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::PropManagerSite.GraphQL.IGetLoanQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::PropManagerSite.GraphQL.GetLoanQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::PropManagerSite.GraphQL.IGetExpenseResult>, global::PropManagerSite.GraphQL.State.GetExpenseResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::PropManagerSite.GraphQL.IGetExpenseResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::PropManagerSite.GraphQL.IGetExpenseQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::PropManagerSite.GraphQL.IGetExpenseResult>, global::PropManagerSite.GraphQL.State.GetExpenseBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::PropManagerSite.GraphQL.IGetExpenseResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::PropManagerSite.GraphQL.IGetExpenseResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::PropManagerSite.GraphQL.IGetExpenseResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::PropManagerSite.GraphQL.GetExpenseQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::PropManagerSite.GraphQL.IGetExpenseQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::PropManagerSite.GraphQL.GetExpenseQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityIdSerializer, global::PropManagerSite.GraphQL.State.PropManagerSiteQLEntityIdFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::PropManagerSite.GraphQL.PropManagerSiteQL>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::PropManagerSite.GraphQL.IPropManagerSiteQL>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::PropManagerSite.GraphQL.PropManagerSiteQL>(sp));
            return services;
        }

        private class ClientServiceProvider : System.IServiceProvider, System.IDisposable
        {
            private readonly System.IServiceProvider _provider;
            public ClientServiceProvider(System.IServiceProvider provider)
            {
                _provider = provider;
            }

            public object? GetService(System.Type serviceType)
            {
                return _provider.GetService(serviceType);
            }

            public void Dispose()
            {
                if (_provider is System.IDisposable d)
                {
                    d.Dispose();
                }
            }
        }
    }
}

namespace PropManagerSite.GraphQL
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class EditExpenseResult : global::System.IEquatable<EditExpenseResult>, IEditExpenseResult
    {
        public EditExpenseResult(global::PropManagerSite.GraphQL.IEditExpense_EditExpense editExpense)
        {
            EditExpense = editExpense;
        }

        public global::PropManagerSite.GraphQL.IEditExpense_EditExpense EditExpense { get; }

        public virtual global::System.Boolean Equals(EditExpenseResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (EditExpense.Equals(other.EditExpense));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((EditExpenseResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * EditExpense.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class EditExpense_EditExpense_EditExpensePayload : global::System.IEquatable<EditExpense_EditExpense_EditExpensePayload>, IEditExpense_EditExpense_EditExpensePayload
    {
        public EditExpense_EditExpense_EditExpensePayload(global::PropManagerSite.GraphQL.IEditExpense_EditExpense_Expense? expense)
        {
            Expense = expense;
        }

        public global::PropManagerSite.GraphQL.IEditExpense_EditExpense_Expense? Expense { get; }

        public virtual global::System.Boolean Equals(EditExpense_EditExpense_EditExpensePayload? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Expense is null && other.Expense is null) || Expense != null && Expense.Equals(other.Expense)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((EditExpense_EditExpense_EditExpensePayload)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Expense != null)
                {
                    hash ^= 397 * Expense.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class EditExpense_EditExpense_Expense_Expense : global::System.IEquatable<EditExpense_EditExpense_Expense_Expense>, IEditExpense_EditExpense_Expense_Expense
    {
        public EditExpense_EditExpense_Expense_Expense(global::System.Guid id)
        {
            Id = id;
        }

        public global::System.Guid Id { get; }

        public virtual global::System.Boolean Equals(EditExpense_EditExpense_Expense_Expense? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((EditExpense_EditExpense_Expense_Expense)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface IEditExpenseResult
    {
        public global::PropManagerSite.GraphQL.IEditExpense_EditExpense EditExpense { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface IEditExpense_EditExpense
    {
        public global::PropManagerSite.GraphQL.IEditExpense_EditExpense_Expense? Expense { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface IEditExpense_EditExpense_EditExpensePayload : IEditExpense_EditExpense
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface IEditExpense_EditExpense_Expense
    {
        public global::System.Guid Id { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface IEditExpense_EditExpense_Expense_Expense : IEditExpense_EditExpense_Expense
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class AddExpenseResult : global::System.IEquatable<AddExpenseResult>, IAddExpenseResult
    {
        public AddExpenseResult(global::PropManagerSite.GraphQL.IAddExpense_AddExpense addExpense)
        {
            AddExpense = addExpense;
        }

        public global::PropManagerSite.GraphQL.IAddExpense_AddExpense AddExpense { get; }

        public virtual global::System.Boolean Equals(AddExpenseResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (AddExpense.Equals(other.AddExpense));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((AddExpenseResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * AddExpense.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class AddExpense_AddExpense_AddExpensePayload : global::System.IEquatable<AddExpense_AddExpense_AddExpensePayload>, IAddExpense_AddExpense_AddExpensePayload
    {
        public AddExpense_AddExpense_AddExpensePayload(global::PropManagerSite.GraphQL.IAddExpense_AddExpense_Expense? expense)
        {
            Expense = expense;
        }

        public global::PropManagerSite.GraphQL.IAddExpense_AddExpense_Expense? Expense { get; }

        public virtual global::System.Boolean Equals(AddExpense_AddExpense_AddExpensePayload? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Expense is null && other.Expense is null) || Expense != null && Expense.Equals(other.Expense)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((AddExpense_AddExpense_AddExpensePayload)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Expense != null)
                {
                    hash ^= 397 * Expense.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class AddExpense_AddExpense_Expense_Expense : global::System.IEquatable<AddExpense_AddExpense_Expense_Expense>, IAddExpense_AddExpense_Expense_Expense
    {
        public AddExpense_AddExpense_Expense_Expense(global::System.Guid id)
        {
            Id = id;
        }

        public global::System.Guid Id { get; }

        public virtual global::System.Boolean Equals(AddExpense_AddExpense_Expense_Expense? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((AddExpense_AddExpense_Expense_Expense)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface IAddExpenseResult
    {
        public global::PropManagerSite.GraphQL.IAddExpense_AddExpense AddExpense { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface IAddExpense_AddExpense
    {
        public global::PropManagerSite.GraphQL.IAddExpense_AddExpense_Expense? Expense { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface IAddExpense_AddExpense_AddExpensePayload : IAddExpense_AddExpense
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface IAddExpense_AddExpense_Expense
    {
        public global::System.Guid Id { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface IAddExpense_AddExpense_Expense_Expense : IAddExpense_AddExpense_Expense
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class DeleteExpenseResult : global::System.IEquatable<DeleteExpenseResult>, IDeleteExpenseResult
    {
        public DeleteExpenseResult(global::PropManagerSite.GraphQL.IDeleteExpense_DeleteExpense deleteExpense)
        {
            DeleteExpense = deleteExpense;
        }

        public global::PropManagerSite.GraphQL.IDeleteExpense_DeleteExpense DeleteExpense { get; }

        public virtual global::System.Boolean Equals(DeleteExpenseResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (DeleteExpense.Equals(other.DeleteExpense));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((DeleteExpenseResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * DeleteExpense.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class DeleteExpense_DeleteExpense_DeleteExpensePayload : global::System.IEquatable<DeleteExpense_DeleteExpense_DeleteExpensePayload>, IDeleteExpense_DeleteExpense_DeleteExpensePayload
    {
        public DeleteExpense_DeleteExpense_DeleteExpensePayload(global::System.Boolean? boolean)
        {
            Boolean = boolean;
        }

        public global::System.Boolean? Boolean { get; }

        public virtual global::System.Boolean Equals(DeleteExpense_DeleteExpense_DeleteExpensePayload? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Boolean == other.Boolean);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((DeleteExpense_DeleteExpense_DeleteExpensePayload)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Boolean != null)
                {
                    hash ^= 397 * Boolean.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface IDeleteExpenseResult
    {
        public global::PropManagerSite.GraphQL.IDeleteExpense_DeleteExpense DeleteExpense { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface IDeleteExpense_DeleteExpense
    {
        public global::System.Boolean? Boolean { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface IDeleteExpense_DeleteExpense_DeleteExpensePayload : IDeleteExpense_DeleteExpense
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class AddLoanResult : global::System.IEquatable<AddLoanResult>, IAddLoanResult
    {
        public AddLoanResult(global::PropManagerSite.GraphQL.IAddLoan_AddLoan addLoan)
        {
            AddLoan = addLoan;
        }

        public global::PropManagerSite.GraphQL.IAddLoan_AddLoan AddLoan { get; }

        public virtual global::System.Boolean Equals(AddLoanResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (AddLoan.Equals(other.AddLoan));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((AddLoanResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * AddLoan.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class AddLoan_AddLoan_AddLoanPayload : global::System.IEquatable<AddLoan_AddLoan_AddLoanPayload>, IAddLoan_AddLoan_AddLoanPayload
    {
        public AddLoan_AddLoan_AddLoanPayload(global::PropManagerSite.GraphQL.IAddLoan_AddLoan_Loan? loan)
        {
            Loan = loan;
        }

        public global::PropManagerSite.GraphQL.IAddLoan_AddLoan_Loan? Loan { get; }

        public virtual global::System.Boolean Equals(AddLoan_AddLoan_AddLoanPayload? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Loan is null && other.Loan is null) || Loan != null && Loan.Equals(other.Loan)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((AddLoan_AddLoan_AddLoanPayload)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Loan != null)
                {
                    hash ^= 397 * Loan.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class AddLoan_AddLoan_Loan_Loan : global::System.IEquatable<AddLoan_AddLoan_Loan_Loan>, IAddLoan_AddLoan_Loan_Loan
    {
        public AddLoan_AddLoan_Loan_Loan(global::System.Guid id)
        {
            Id = id;
        }

        public global::System.Guid Id { get; }

        public virtual global::System.Boolean Equals(AddLoan_AddLoan_Loan_Loan? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((AddLoan_AddLoan_Loan_Loan)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface IAddLoanResult
    {
        public global::PropManagerSite.GraphQL.IAddLoan_AddLoan AddLoan { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface IAddLoan_AddLoan
    {
        public global::PropManagerSite.GraphQL.IAddLoan_AddLoan_Loan? Loan { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface IAddLoan_AddLoan_AddLoanPayload : IAddLoan_AddLoan
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface IAddLoan_AddLoan_Loan
    {
        public global::System.Guid Id { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface IAddLoan_AddLoan_Loan_Loan : IAddLoan_AddLoan_Loan
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class EddLoanResult : global::System.IEquatable<EddLoanResult>, IEddLoanResult
    {
        public EddLoanResult(global::PropManagerSite.GraphQL.IEddLoan_EditLoan editLoan)
        {
            EditLoan = editLoan;
        }

        public global::PropManagerSite.GraphQL.IEddLoan_EditLoan EditLoan { get; }

        public virtual global::System.Boolean Equals(EddLoanResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (EditLoan.Equals(other.EditLoan));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((EddLoanResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * EditLoan.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class EddLoan_EditLoan_EditLoanPayload : global::System.IEquatable<EddLoan_EditLoan_EditLoanPayload>, IEddLoan_EditLoan_EditLoanPayload
    {
        public EddLoan_EditLoan_EditLoanPayload(global::PropManagerSite.GraphQL.IEddLoan_EditLoan_Loan? loan)
        {
            Loan = loan;
        }

        public global::PropManagerSite.GraphQL.IEddLoan_EditLoan_Loan? Loan { get; }

        public virtual global::System.Boolean Equals(EddLoan_EditLoan_EditLoanPayload? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Loan is null && other.Loan is null) || Loan != null && Loan.Equals(other.Loan)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((EddLoan_EditLoan_EditLoanPayload)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Loan != null)
                {
                    hash ^= 397 * Loan.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class EddLoan_EditLoan_Loan_Loan : global::System.IEquatable<EddLoan_EditLoan_Loan_Loan>, IEddLoan_EditLoan_Loan_Loan
    {
        public EddLoan_EditLoan_Loan_Loan(global::System.Guid id)
        {
            Id = id;
        }

        public global::System.Guid Id { get; }

        public virtual global::System.Boolean Equals(EddLoan_EditLoan_Loan_Loan? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((EddLoan_EditLoan_Loan_Loan)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface IEddLoanResult
    {
        public global::PropManagerSite.GraphQL.IEddLoan_EditLoan EditLoan { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface IEddLoan_EditLoan
    {
        public global::PropManagerSite.GraphQL.IEddLoan_EditLoan_Loan? Loan { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface IEddLoan_EditLoan_EditLoanPayload : IEddLoan_EditLoan
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface IEddLoan_EditLoan_Loan
    {
        public global::System.Guid Id { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface IEddLoan_EditLoan_Loan_Loan : IEddLoan_EditLoan_Loan
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class DeleteLoanResult : global::System.IEquatable<DeleteLoanResult>, IDeleteLoanResult
    {
        public DeleteLoanResult(global::PropManagerSite.GraphQL.IDeleteLoan_DeleteLoan deleteLoan)
        {
            DeleteLoan = deleteLoan;
        }

        public global::PropManagerSite.GraphQL.IDeleteLoan_DeleteLoan DeleteLoan { get; }

        public virtual global::System.Boolean Equals(DeleteLoanResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (DeleteLoan.Equals(other.DeleteLoan));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((DeleteLoanResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * DeleteLoan.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class DeleteLoan_DeleteLoan_DeleteLoanPayload : global::System.IEquatable<DeleteLoan_DeleteLoan_DeleteLoanPayload>, IDeleteLoan_DeleteLoan_DeleteLoanPayload
    {
        public DeleteLoan_DeleteLoan_DeleteLoanPayload(global::System.Boolean? boolean)
        {
            Boolean = boolean;
        }

        public global::System.Boolean? Boolean { get; }

        public virtual global::System.Boolean Equals(DeleteLoan_DeleteLoan_DeleteLoanPayload? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Boolean == other.Boolean);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((DeleteLoan_DeleteLoan_DeleteLoanPayload)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Boolean != null)
                {
                    hash ^= 397 * Boolean.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface IDeleteLoanResult
    {
        public global::PropManagerSite.GraphQL.IDeleteLoan_DeleteLoan DeleteLoan { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface IDeleteLoan_DeleteLoan
    {
        public global::System.Boolean? Boolean { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface IDeleteLoan_DeleteLoan_DeleteLoanPayload : IDeleteLoan_DeleteLoan
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class CreatePropertyResult : global::System.IEquatable<CreatePropertyResult>, ICreatePropertyResult
    {
        public CreatePropertyResult(global::PropManagerSite.GraphQL.ICreateProperty_AddProperty addProperty)
        {
            AddProperty = addProperty;
        }

        public global::PropManagerSite.GraphQL.ICreateProperty_AddProperty AddProperty { get; }

        public virtual global::System.Boolean Equals(CreatePropertyResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (AddProperty.Equals(other.AddProperty));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((CreatePropertyResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * AddProperty.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class CreateProperty_AddProperty_AddPropertyPayload : global::System.IEquatable<CreateProperty_AddProperty_AddPropertyPayload>, ICreateProperty_AddProperty_AddPropertyPayload
    {
        public CreateProperty_AddProperty_AddPropertyPayload(global::PropManagerSite.GraphQL.ICreateProperty_AddProperty_Property? property)
        {
            Property = property;
        }

        public global::PropManagerSite.GraphQL.ICreateProperty_AddProperty_Property? Property { get; }

        public virtual global::System.Boolean Equals(CreateProperty_AddProperty_AddPropertyPayload? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Property is null && other.Property is null) || Property != null && Property.Equals(other.Property)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((CreateProperty_AddProperty_AddPropertyPayload)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Property != null)
                {
                    hash ^= 397 * Property.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class CreateProperty_AddProperty_Property_Property : global::System.IEquatable<CreateProperty_AddProperty_Property_Property>, ICreateProperty_AddProperty_Property_Property
    {
        public CreateProperty_AddProperty_Property_Property(global::System.Guid id)
        {
            Id = id;
        }

        public global::System.Guid Id { get; }

        public virtual global::System.Boolean Equals(CreateProperty_AddProperty_Property_Property? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((CreateProperty_AddProperty_Property_Property)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface ICreatePropertyResult
    {
        public global::PropManagerSite.GraphQL.ICreateProperty_AddProperty AddProperty { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface ICreateProperty_AddProperty
    {
        public global::PropManagerSite.GraphQL.ICreateProperty_AddProperty_Property? Property { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface ICreateProperty_AddProperty_AddPropertyPayload : ICreateProperty_AddProperty
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface ICreateProperty_AddProperty_Property
    {
        public global::System.Guid Id { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface ICreateProperty_AddProperty_Property_Property : ICreateProperty_AddProperty_Property
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class EditPropertyResult : global::System.IEquatable<EditPropertyResult>, IEditPropertyResult
    {
        public EditPropertyResult(global::PropManagerSite.GraphQL.IEditProperty_EditProperty editProperty)
        {
            EditProperty = editProperty;
        }

        public global::PropManagerSite.GraphQL.IEditProperty_EditProperty EditProperty { get; }

        public virtual global::System.Boolean Equals(EditPropertyResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (EditProperty.Equals(other.EditProperty));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((EditPropertyResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * EditProperty.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class EditProperty_EditProperty_EditPropertyPayload : global::System.IEquatable<EditProperty_EditProperty_EditPropertyPayload>, IEditProperty_EditProperty_EditPropertyPayload
    {
        public EditProperty_EditProperty_EditPropertyPayload(global::PropManagerSite.GraphQL.IEditProperty_EditProperty_Property? property)
        {
            Property = property;
        }

        public global::PropManagerSite.GraphQL.IEditProperty_EditProperty_Property? Property { get; }

        public virtual global::System.Boolean Equals(EditProperty_EditProperty_EditPropertyPayload? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Property is null && other.Property is null) || Property != null && Property.Equals(other.Property)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((EditProperty_EditProperty_EditPropertyPayload)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Property != null)
                {
                    hash ^= 397 * Property.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class EditProperty_EditProperty_Property_Property : global::System.IEquatable<EditProperty_EditProperty_Property_Property>, IEditProperty_EditProperty_Property_Property
    {
        public EditProperty_EditProperty_Property_Property(global::System.Guid id, global::System.String? name, global::System.Decimal? purchasePrice, global::System.Decimal? registrationTransferFee, global::System.Decimal? rooms, global::System.Decimal? bathrooms, global::System.Decimal? landSize, global::System.String address, global::PropManagerSite.GraphQL.PropertyTypes propertyType, global::System.Decimal? stampDuty, global::System.Decimal? carpark, global::System.Collections.Generic.IReadOnlyList<global::PropManagerSite.GraphQL.IEditProperty_EditProperty_Property_Loans> loans, global::System.Collections.Generic.IReadOnlyList<global::PropManagerSite.GraphQL.IEditProperty_EditProperty_Property_Expenses> expenses)
        {
            Id = id;
            Name = name;
            PurchasePrice = purchasePrice;
            RegistrationTransferFee = registrationTransferFee;
            Rooms = rooms;
            Bathrooms = bathrooms;
            LandSize = landSize;
            Address = address;
            PropertyType = propertyType;
            StampDuty = stampDuty;
            Carpark = carpark;
            Loans = loans;
            Expenses = expenses;
        }

        public global::System.Guid Id { get; }

        public global::System.String? Name { get; }

        public global::System.Decimal? PurchasePrice { get; }

        public global::System.Decimal? RegistrationTransferFee { get; }

        public global::System.Decimal? Rooms { get; }

        public global::System.Decimal? Bathrooms { get; }

        public global::System.Decimal? LandSize { get; }

        public global::System.String Address { get; }

        public global::PropManagerSite.GraphQL.PropertyTypes PropertyType { get; }

        public global::System.Decimal? StampDuty { get; }

        public global::System.Decimal? Carpark { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::PropManagerSite.GraphQL.IEditProperty_EditProperty_Property_Loans> Loans { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::PropManagerSite.GraphQL.IEditProperty_EditProperty_Property_Expenses> Expenses { get; }

        public virtual global::System.Boolean Equals(EditProperty_EditProperty_Property_Property? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && ((Name is null && other.Name is null) || Name != null && Name.Equals(other.Name)) && PurchasePrice == other.PurchasePrice && RegistrationTransferFee == other.RegistrationTransferFee && Rooms == other.Rooms && Bathrooms == other.Bathrooms && LandSize == other.LandSize && Address.Equals(other.Address) && PropertyType.Equals(other.PropertyType) && StampDuty == other.StampDuty && Carpark == other.Carpark && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Loans, other.Loans) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Expenses, other.Expenses);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((EditProperty_EditProperty_Property_Property)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                if (Name != null)
                {
                    hash ^= 397 * Name.GetHashCode();
                }

                if (PurchasePrice != null)
                {
                    hash ^= 397 * PurchasePrice.GetHashCode();
                }

                if (RegistrationTransferFee != null)
                {
                    hash ^= 397 * RegistrationTransferFee.GetHashCode();
                }

                if (Rooms != null)
                {
                    hash ^= 397 * Rooms.GetHashCode();
                }

                if (Bathrooms != null)
                {
                    hash ^= 397 * Bathrooms.GetHashCode();
                }

                if (LandSize != null)
                {
                    hash ^= 397 * LandSize.GetHashCode();
                }

                hash ^= 397 * Address.GetHashCode();
                hash ^= 397 * PropertyType.GetHashCode();
                if (StampDuty != null)
                {
                    hash ^= 397 * StampDuty.GetHashCode();
                }

                if (Carpark != null)
                {
                    hash ^= 397 * Carpark.GetHashCode();
                }

                foreach (var Loans_elm in Loans)
                {
                    hash ^= 397 * Loans_elm.GetHashCode();
                }

                foreach (var Expenses_elm in Expenses)
                {
                    hash ^= 397 * Expenses_elm.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class EditProperty_EditProperty_Property_Loans_Loan : global::System.IEquatable<EditProperty_EditProperty_Property_Loans_Loan>, IEditProperty_EditProperty_Property_Loans_Loan
    {
        public EditProperty_EditProperty_Property_Loans_Loan(global::System.Guid id, global::System.String lenderName, global::System.Decimal? amount, global::System.Decimal? interest, global::System.Decimal? lMI, global::PropManagerSite.GraphQL.LoanTypes loanType, global::System.Int32? years, global::System.DateTimeOffset? dateOfLoan, global::PropManagerSite.GraphQL.IEditProperty_EditProperty_Property_Loans_Property property)
        {
            Id = id;
            LenderName = lenderName;
            Amount = amount;
            Interest = interest;
            LMI = lMI;
            LoanType = loanType;
            Years = years;
            DateOfLoan = dateOfLoan;
            Property = property;
        }

        public global::System.Guid Id { get; }

        public global::System.String LenderName { get; }

        public global::System.Decimal? Amount { get; }

        public global::System.Decimal? Interest { get; }

        public global::System.Decimal? LMI { get; }

        public global::PropManagerSite.GraphQL.LoanTypes LoanType { get; }

        public global::System.Int32? Years { get; }

        public global::System.DateTimeOffset? DateOfLoan { get; }

        public global::PropManagerSite.GraphQL.IEditProperty_EditProperty_Property_Loans_Property Property { get; }

        public virtual global::System.Boolean Equals(EditProperty_EditProperty_Property_Loans_Loan? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && LenderName.Equals(other.LenderName) && Amount == other.Amount && Interest == other.Interest && LMI == other.LMI && LoanType.Equals(other.LoanType) && Years == other.Years && ((DateOfLoan is null && other.DateOfLoan is null) || DateOfLoan != null && DateOfLoan.Equals(other.DateOfLoan)) && Property.Equals(other.Property);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((EditProperty_EditProperty_Property_Loans_Loan)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                hash ^= 397 * LenderName.GetHashCode();
                if (Amount != null)
                {
                    hash ^= 397 * Amount.GetHashCode();
                }

                if (Interest != null)
                {
                    hash ^= 397 * Interest.GetHashCode();
                }

                if (LMI != null)
                {
                    hash ^= 397 * LMI.GetHashCode();
                }

                hash ^= 397 * LoanType.GetHashCode();
                if (Years != null)
                {
                    hash ^= 397 * Years.GetHashCode();
                }

                if (DateOfLoan != null)
                {
                    hash ^= 397 * DateOfLoan.GetHashCode();
                }

                hash ^= 397 * Property.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class EditProperty_EditProperty_Property_Expenses_Expense : global::System.IEquatable<EditProperty_EditProperty_Property_Expenses_Expense>, IEditProperty_EditProperty_Property_Expenses_Expense
    {
        public EditProperty_EditProperty_Property_Expenses_Expense(global::System.Guid id, global::System.String title, global::System.String? description, global::System.Decimal? price, global::System.Decimal totalDeductable, global::System.Guid propertyId, global::System.DateTimeOffset expenseDate, global::PropManagerSite.GraphQL.IEditProperty_EditProperty_Property_Expenses_Property property, global::System.Boolean deleted)
        {
            Id = id;
            Title = title;
            Description = description;
            Price = price;
            TotalDeductable = totalDeductable;
            PropertyId = propertyId;
            ExpenseDate = expenseDate;
            Property = property;
            Deleted = deleted;
        }

        public global::System.Guid Id { get; }

        public global::System.String Title { get; }

        public global::System.String? Description { get; }

        public global::System.Decimal? Price { get; }

        public global::System.Decimal TotalDeductable { get; }

        public global::System.Guid PropertyId { get; }

        public global::System.DateTimeOffset ExpenseDate { get; }

        public global::PropManagerSite.GraphQL.IEditProperty_EditProperty_Property_Expenses_Property Property { get; }

        public global::System.Boolean Deleted { get; }

        public virtual global::System.Boolean Equals(EditProperty_EditProperty_Property_Expenses_Expense? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && Title.Equals(other.Title) && ((Description is null && other.Description is null) || Description != null && Description.Equals(other.Description)) && Price == other.Price && TotalDeductable == other.TotalDeductable && PropertyId.Equals(other.PropertyId) && ExpenseDate.Equals(other.ExpenseDate) && Property.Equals(other.Property) && Deleted == other.Deleted;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((EditProperty_EditProperty_Property_Expenses_Expense)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                hash ^= 397 * Title.GetHashCode();
                if (Description != null)
                {
                    hash ^= 397 * Description.GetHashCode();
                }

                if (Price != null)
                {
                    hash ^= 397 * Price.GetHashCode();
                }

                hash ^= 397 * TotalDeductable.GetHashCode();
                hash ^= 397 * PropertyId.GetHashCode();
                hash ^= 397 * ExpenseDate.GetHashCode();
                hash ^= 397 * Property.GetHashCode();
                hash ^= 397 * Deleted.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class EditProperty_EditProperty_Property_Loans_Property_Property : global::System.IEquatable<EditProperty_EditProperty_Property_Loans_Property_Property>, IEditProperty_EditProperty_Property_Loans_Property_Property
    {
        public EditProperty_EditProperty_Property_Loans_Property_Property(global::System.Guid id, global::System.String? name)
        {
            Id = id;
            Name = name;
        }

        public global::System.Guid Id { get; }

        public global::System.String? Name { get; }

        public virtual global::System.Boolean Equals(EditProperty_EditProperty_Property_Loans_Property_Property? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && ((Name is null && other.Name is null) || Name != null && Name.Equals(other.Name));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((EditProperty_EditProperty_Property_Loans_Property_Property)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                if (Name != null)
                {
                    hash ^= 397 * Name.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class EditProperty_EditProperty_Property_Expenses_Property_Property : global::System.IEquatable<EditProperty_EditProperty_Property_Expenses_Property_Property>, IEditProperty_EditProperty_Property_Expenses_Property_Property
    {
        public EditProperty_EditProperty_Property_Expenses_Property_Property(global::System.Guid id)
        {
            Id = id;
        }

        public global::System.Guid Id { get; }

        public virtual global::System.Boolean Equals(EditProperty_EditProperty_Property_Expenses_Property_Property? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((EditProperty_EditProperty_Property_Expenses_Property_Property)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface IEditPropertyResult
    {
        public global::PropManagerSite.GraphQL.IEditProperty_EditProperty EditProperty { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface IEditProperty_EditProperty
    {
        public global::PropManagerSite.GraphQL.IEditProperty_EditProperty_Property? Property { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface IEditProperty_EditProperty_EditPropertyPayload : IEditProperty_EditProperty
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface IPropertyDetails
    {
        public global::System.Guid Id { get; }

        public global::System.String? Name { get; }

        public global::System.Decimal? PurchasePrice { get; }

        public global::System.Decimal? RegistrationTransferFee { get; }

        public global::System.Decimal? Rooms { get; }

        public global::System.Decimal? Bathrooms { get; }

        public global::System.Decimal? LandSize { get; }

        public global::System.String Address { get; }

        public global::PropManagerSite.GraphQL.PropertyTypes PropertyType { get; }

        public global::System.Decimal? StampDuty { get; }

        public global::System.Decimal? Carpark { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::PropManagerSite.GraphQL.IEditProperty_EditProperty_Property_Loans> Loans { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::PropManagerSite.GraphQL.IEditProperty_EditProperty_Property_Expenses> Expenses { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface IEditProperty_EditProperty_Property : IPropertyDetails
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface IEditProperty_EditProperty_Property_Property : IEditProperty_EditProperty_Property
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface ILoan
    {
        public global::System.Guid Id { get; }

        public global::System.String LenderName { get; }

        public global::System.Decimal? Amount { get; }

        public global::System.Decimal? Interest { get; }

        public global::System.Decimal? LMI { get; }

        public global::PropManagerSite.GraphQL.LoanTypes LoanType { get; }

        public global::System.Int32? Years { get; }

        public global::System.DateTimeOffset? DateOfLoan { get; }

        public global::PropManagerSite.GraphQL.IEditProperty_EditProperty_Property_Loans_Property Property { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface IEditProperty_EditProperty_Property_Loans : ILoan
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface IEditProperty_EditProperty_Property_Loans_Loan : IEditProperty_EditProperty_Property_Loans
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface IExpense
    {
        public global::System.Guid Id { get; }

        public global::System.String Title { get; }

        public global::System.String? Description { get; }

        public global::System.Decimal? Price { get; }

        public global::System.Decimal TotalDeductable { get; }

        public global::System.Guid PropertyId { get; }

        public global::System.DateTimeOffset ExpenseDate { get; }

        public global::PropManagerSite.GraphQL.IEditProperty_EditProperty_Property_Expenses_Property Property { get; }

        public global::System.Boolean Deleted { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface IEditProperty_EditProperty_Property_Expenses : IExpense
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface IEditProperty_EditProperty_Property_Expenses_Expense : IEditProperty_EditProperty_Property_Expenses
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface IEditProperty_EditProperty_Property_Loans_Property
    {
        public global::System.Guid Id { get; }

        public global::System.String? Name { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface IEditProperty_EditProperty_Property_Loans_Property_Property : IEditProperty_EditProperty_Property_Loans_Property
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface IEditProperty_EditProperty_Property_Expenses_Property
    {
        public global::System.Guid Id { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface IEditProperty_EditProperty_Property_Expenses_Property_Property : IEditProperty_EditProperty_Property_Expenses_Property
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class DeletePropertyResult : global::System.IEquatable<DeletePropertyResult>, IDeletePropertyResult
    {
        public DeletePropertyResult(global::PropManagerSite.GraphQL.IDeleteProperty_DeleteProperty deleteProperty)
        {
            DeleteProperty = deleteProperty;
        }

        public global::PropManagerSite.GraphQL.IDeleteProperty_DeleteProperty DeleteProperty { get; }

        public virtual global::System.Boolean Equals(DeletePropertyResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (DeleteProperty.Equals(other.DeleteProperty));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((DeletePropertyResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * DeleteProperty.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class DeleteProperty_DeleteProperty_DeletePropertyPayload : global::System.IEquatable<DeleteProperty_DeleteProperty_DeletePropertyPayload>, IDeleteProperty_DeleteProperty_DeletePropertyPayload
    {
        public DeleteProperty_DeleteProperty_DeletePropertyPayload(global::System.Boolean? boolean)
        {
            Boolean = boolean;
        }

        public global::System.Boolean? Boolean { get; }

        public virtual global::System.Boolean Equals(DeleteProperty_DeleteProperty_DeletePropertyPayload? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Boolean == other.Boolean);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((DeleteProperty_DeleteProperty_DeletePropertyPayload)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Boolean != null)
                {
                    hash ^= 397 * Boolean.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface IDeletePropertyResult
    {
        public global::PropManagerSite.GraphQL.IDeleteProperty_DeleteProperty DeleteProperty { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface IDeleteProperty_DeleteProperty
    {
        public global::System.Boolean? Boolean { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface IDeleteProperty_DeleteProperty_DeletePropertyPayload : IDeleteProperty_DeleteProperty
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class GetPropertiesResult : global::System.IEquatable<GetPropertiesResult>, IGetPropertiesResult
    {
        public GetPropertiesResult(global::System.Collections.Generic.IReadOnlyList<global::PropManagerSite.GraphQL.IGetProperties_Properties> properties)
        {
            Properties = properties;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::PropManagerSite.GraphQL.IGetProperties_Properties> Properties { get; }

        public virtual global::System.Boolean Equals(GetPropertiesResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Properties, other.Properties));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetPropertiesResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                foreach (var Properties_elm in Properties)
                {
                    hash ^= 397 * Properties_elm.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class GetProperties_Properties_Property : global::System.IEquatable<GetProperties_Properties_Property>, IGetProperties_Properties_Property
    {
        public GetProperties_Properties_Property(global::System.Guid id, global::System.String? name, global::System.String address, global::System.Decimal? rooms, global::System.Decimal? bathrooms, global::System.Decimal? carpark)
        {
            Id = id;
            Name = name;
            Address = address;
            Rooms = rooms;
            Bathrooms = bathrooms;
            Carpark = carpark;
        }

        public global::System.Guid Id { get; }

        public global::System.String? Name { get; }

        public global::System.String Address { get; }

        public global::System.Decimal? Rooms { get; }

        public global::System.Decimal? Bathrooms { get; }

        public global::System.Decimal? Carpark { get; }

        public virtual global::System.Boolean Equals(GetProperties_Properties_Property? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && ((Name is null && other.Name is null) || Name != null && Name.Equals(other.Name)) && Address.Equals(other.Address) && Rooms == other.Rooms && Bathrooms == other.Bathrooms && Carpark == other.Carpark;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetProperties_Properties_Property)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                if (Name != null)
                {
                    hash ^= 397 * Name.GetHashCode();
                }

                hash ^= 397 * Address.GetHashCode();
                if (Rooms != null)
                {
                    hash ^= 397 * Rooms.GetHashCode();
                }

                if (Bathrooms != null)
                {
                    hash ^= 397 * Bathrooms.GetHashCode();
                }

                if (Carpark != null)
                {
                    hash ^= 397 * Carpark.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface IGetPropertiesResult
    {
        public global::System.Collections.Generic.IReadOnlyList<global::PropManagerSite.GraphQL.IGetProperties_Properties> Properties { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface IPropertySearchDetails
    {
        public global::System.Guid Id { get; }

        public global::System.String? Name { get; }

        public global::System.String Address { get; }

        public global::System.Decimal? Rooms { get; }

        public global::System.Decimal? Bathrooms { get; }

        public global::System.Decimal? Carpark { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface IGetProperties_Properties : IPropertySearchDetails
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface IGetProperties_Properties_Property : IGetProperties_Properties
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class GetPropertyResult : global::System.IEquatable<GetPropertyResult>, IGetPropertyResult
    {
        public GetPropertyResult(global::System.Collections.Generic.IReadOnlyList<global::PropManagerSite.GraphQL.IGetProperty_Properties> properties)
        {
            Properties = properties;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::PropManagerSite.GraphQL.IGetProperty_Properties> Properties { get; }

        public virtual global::System.Boolean Equals(GetPropertyResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Properties, other.Properties));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetPropertyResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                foreach (var Properties_elm in Properties)
                {
                    hash ^= 397 * Properties_elm.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class GetProperty_Properties_Property : global::System.IEquatable<GetProperty_Properties_Property>, IGetProperty_Properties_Property
    {
        public GetProperty_Properties_Property(global::System.Guid id, global::System.String? name, global::System.Decimal? purchasePrice, global::System.Decimal? registrationTransferFee, global::System.Decimal? rooms, global::System.Decimal? bathrooms, global::System.Decimal? landSize, global::System.String address, global::PropManagerSite.GraphQL.PropertyTypes propertyType, global::System.Decimal? stampDuty, global::System.Decimal? carpark, global::System.Collections.Generic.IReadOnlyList<global::PropManagerSite.GraphQL.IEditProperty_EditProperty_Property_Loans> loans, global::System.Collections.Generic.IReadOnlyList<global::PropManagerSite.GraphQL.IEditProperty_EditProperty_Property_Expenses> expenses)
        {
            Id = id;
            Name = name;
            PurchasePrice = purchasePrice;
            RegistrationTransferFee = registrationTransferFee;
            Rooms = rooms;
            Bathrooms = bathrooms;
            LandSize = landSize;
            Address = address;
            PropertyType = propertyType;
            StampDuty = stampDuty;
            Carpark = carpark;
            Loans = loans;
            Expenses = expenses;
        }

        public global::System.Guid Id { get; }

        public global::System.String? Name { get; }

        public global::System.Decimal? PurchasePrice { get; }

        public global::System.Decimal? RegistrationTransferFee { get; }

        public global::System.Decimal? Rooms { get; }

        public global::System.Decimal? Bathrooms { get; }

        public global::System.Decimal? LandSize { get; }

        public global::System.String Address { get; }

        public global::PropManagerSite.GraphQL.PropertyTypes PropertyType { get; }

        public global::System.Decimal? StampDuty { get; }

        public global::System.Decimal? Carpark { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::PropManagerSite.GraphQL.IEditProperty_EditProperty_Property_Loans> Loans { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::PropManagerSite.GraphQL.IEditProperty_EditProperty_Property_Expenses> Expenses { get; }

        public virtual global::System.Boolean Equals(GetProperty_Properties_Property? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && ((Name is null && other.Name is null) || Name != null && Name.Equals(other.Name)) && PurchasePrice == other.PurchasePrice && RegistrationTransferFee == other.RegistrationTransferFee && Rooms == other.Rooms && Bathrooms == other.Bathrooms && LandSize == other.LandSize && Address.Equals(other.Address) && PropertyType.Equals(other.PropertyType) && StampDuty == other.StampDuty && Carpark == other.Carpark && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Loans, other.Loans) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Expenses, other.Expenses);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetProperty_Properties_Property)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                if (Name != null)
                {
                    hash ^= 397 * Name.GetHashCode();
                }

                if (PurchasePrice != null)
                {
                    hash ^= 397 * PurchasePrice.GetHashCode();
                }

                if (RegistrationTransferFee != null)
                {
                    hash ^= 397 * RegistrationTransferFee.GetHashCode();
                }

                if (Rooms != null)
                {
                    hash ^= 397 * Rooms.GetHashCode();
                }

                if (Bathrooms != null)
                {
                    hash ^= 397 * Bathrooms.GetHashCode();
                }

                if (LandSize != null)
                {
                    hash ^= 397 * LandSize.GetHashCode();
                }

                hash ^= 397 * Address.GetHashCode();
                hash ^= 397 * PropertyType.GetHashCode();
                if (StampDuty != null)
                {
                    hash ^= 397 * StampDuty.GetHashCode();
                }

                if (Carpark != null)
                {
                    hash ^= 397 * Carpark.GetHashCode();
                }

                foreach (var Loans_elm in Loans)
                {
                    hash ^= 397 * Loans_elm.GetHashCode();
                }

                foreach (var Expenses_elm in Expenses)
                {
                    hash ^= 397 * Expenses_elm.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class GetProperty_Properties_Loans_Loan : global::System.IEquatable<GetProperty_Properties_Loans_Loan>, IGetProperty_Properties_Loans_Loan
    {
        public GetProperty_Properties_Loans_Loan(global::System.Guid id, global::System.String lenderName, global::System.Decimal? amount, global::System.Decimal? interest, global::System.Decimal? lMI, global::PropManagerSite.GraphQL.LoanTypes loanType, global::System.Int32? years, global::System.DateTimeOffset? dateOfLoan, global::PropManagerSite.GraphQL.IEditProperty_EditProperty_Property_Loans_Property property)
        {
            Id = id;
            LenderName = lenderName;
            Amount = amount;
            Interest = interest;
            LMI = lMI;
            LoanType = loanType;
            Years = years;
            DateOfLoan = dateOfLoan;
            Property = property;
        }

        public global::System.Guid Id { get; }

        public global::System.String LenderName { get; }

        public global::System.Decimal? Amount { get; }

        public global::System.Decimal? Interest { get; }

        public global::System.Decimal? LMI { get; }

        public global::PropManagerSite.GraphQL.LoanTypes LoanType { get; }

        public global::System.Int32? Years { get; }

        public global::System.DateTimeOffset? DateOfLoan { get; }

        public global::PropManagerSite.GraphQL.IEditProperty_EditProperty_Property_Loans_Property Property { get; }

        public virtual global::System.Boolean Equals(GetProperty_Properties_Loans_Loan? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && LenderName.Equals(other.LenderName) && Amount == other.Amount && Interest == other.Interest && LMI == other.LMI && LoanType.Equals(other.LoanType) && Years == other.Years && ((DateOfLoan is null && other.DateOfLoan is null) || DateOfLoan != null && DateOfLoan.Equals(other.DateOfLoan)) && Property.Equals(other.Property);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetProperty_Properties_Loans_Loan)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                hash ^= 397 * LenderName.GetHashCode();
                if (Amount != null)
                {
                    hash ^= 397 * Amount.GetHashCode();
                }

                if (Interest != null)
                {
                    hash ^= 397 * Interest.GetHashCode();
                }

                if (LMI != null)
                {
                    hash ^= 397 * LMI.GetHashCode();
                }

                hash ^= 397 * LoanType.GetHashCode();
                if (Years != null)
                {
                    hash ^= 397 * Years.GetHashCode();
                }

                if (DateOfLoan != null)
                {
                    hash ^= 397 * DateOfLoan.GetHashCode();
                }

                hash ^= 397 * Property.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class GetProperty_Properties_Expenses_Expense : global::System.IEquatable<GetProperty_Properties_Expenses_Expense>, IGetProperty_Properties_Expenses_Expense
    {
        public GetProperty_Properties_Expenses_Expense(global::System.Guid id, global::System.String title, global::System.String? description, global::System.Decimal? price, global::System.Decimal totalDeductable, global::System.Guid propertyId, global::System.DateTimeOffset expenseDate, global::PropManagerSite.GraphQL.IEditProperty_EditProperty_Property_Expenses_Property property, global::System.Boolean deleted)
        {
            Id = id;
            Title = title;
            Description = description;
            Price = price;
            TotalDeductable = totalDeductable;
            PropertyId = propertyId;
            ExpenseDate = expenseDate;
            Property = property;
            Deleted = deleted;
        }

        public global::System.Guid Id { get; }

        public global::System.String Title { get; }

        public global::System.String? Description { get; }

        public global::System.Decimal? Price { get; }

        public global::System.Decimal TotalDeductable { get; }

        public global::System.Guid PropertyId { get; }

        public global::System.DateTimeOffset ExpenseDate { get; }

        public global::PropManagerSite.GraphQL.IEditProperty_EditProperty_Property_Expenses_Property Property { get; }

        public global::System.Boolean Deleted { get; }

        public virtual global::System.Boolean Equals(GetProperty_Properties_Expenses_Expense? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && Title.Equals(other.Title) && ((Description is null && other.Description is null) || Description != null && Description.Equals(other.Description)) && Price == other.Price && TotalDeductable == other.TotalDeductable && PropertyId.Equals(other.PropertyId) && ExpenseDate.Equals(other.ExpenseDate) && Property.Equals(other.Property) && Deleted == other.Deleted;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetProperty_Properties_Expenses_Expense)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                hash ^= 397 * Title.GetHashCode();
                if (Description != null)
                {
                    hash ^= 397 * Description.GetHashCode();
                }

                if (Price != null)
                {
                    hash ^= 397 * Price.GetHashCode();
                }

                hash ^= 397 * TotalDeductable.GetHashCode();
                hash ^= 397 * PropertyId.GetHashCode();
                hash ^= 397 * ExpenseDate.GetHashCode();
                hash ^= 397 * Property.GetHashCode();
                hash ^= 397 * Deleted.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class GetProperty_Properties_Loans_Property_Property : global::System.IEquatable<GetProperty_Properties_Loans_Property_Property>, IGetProperty_Properties_Loans_Property_Property
    {
        public GetProperty_Properties_Loans_Property_Property(global::System.Guid id, global::System.String? name)
        {
            Id = id;
            Name = name;
        }

        public global::System.Guid Id { get; }

        public global::System.String? Name { get; }

        public virtual global::System.Boolean Equals(GetProperty_Properties_Loans_Property_Property? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && ((Name is null && other.Name is null) || Name != null && Name.Equals(other.Name));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetProperty_Properties_Loans_Property_Property)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                if (Name != null)
                {
                    hash ^= 397 * Name.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class GetProperty_Properties_Expenses_Property_Property : global::System.IEquatable<GetProperty_Properties_Expenses_Property_Property>, IGetProperty_Properties_Expenses_Property_Property
    {
        public GetProperty_Properties_Expenses_Property_Property(global::System.Guid id)
        {
            Id = id;
        }

        public global::System.Guid Id { get; }

        public virtual global::System.Boolean Equals(GetProperty_Properties_Expenses_Property_Property? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetProperty_Properties_Expenses_Property_Property)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface IGetPropertyResult
    {
        public global::System.Collections.Generic.IReadOnlyList<global::PropManagerSite.GraphQL.IGetProperty_Properties> Properties { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface IGetProperty_Properties : IPropertyDetails
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface IGetProperty_Properties_Property : IGetProperty_Properties
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface IGetProperty_Properties_Loans : ILoan
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface IGetProperty_Properties_Loans_Loan : IGetProperty_Properties_Loans
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface IGetProperty_Properties_Expenses : IExpense
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface IGetProperty_Properties_Expenses_Expense : IGetProperty_Properties_Expenses
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface IGetProperty_Properties_Loans_Property
    {
        public global::System.Guid Id { get; }

        public global::System.String? Name { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface IGetProperty_Properties_Loans_Property_Property : IGetProperty_Properties_Loans_Property
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface IGetProperty_Properties_Expenses_Property
    {
        public global::System.Guid Id { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface IGetProperty_Properties_Expenses_Property_Property : IGetProperty_Properties_Expenses_Property
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class GetLoanResult : global::System.IEquatable<GetLoanResult>, IGetLoanResult
    {
        public GetLoanResult(global::System.Collections.Generic.IReadOnlyList<global::PropManagerSite.GraphQL.IGetLoan_Loans> loans)
        {
            Loans = loans;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::PropManagerSite.GraphQL.IGetLoan_Loans> Loans { get; }

        public virtual global::System.Boolean Equals(GetLoanResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Loans, other.Loans));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetLoanResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                foreach (var Loans_elm in Loans)
                {
                    hash ^= 397 * Loans_elm.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class GetLoan_Loans_Loan : global::System.IEquatable<GetLoan_Loans_Loan>, IGetLoan_Loans_Loan
    {
        public GetLoan_Loans_Loan(global::System.Guid id, global::System.String lenderName, global::System.Decimal? amount, global::System.Decimal? interest, global::System.Decimal? lMI, global::PropManagerSite.GraphQL.LoanTypes loanType, global::System.Int32? years, global::System.DateTimeOffset? dateOfLoan, global::PropManagerSite.GraphQL.IEditProperty_EditProperty_Property_Loans_Property property)
        {
            Id = id;
            LenderName = lenderName;
            Amount = amount;
            Interest = interest;
            LMI = lMI;
            LoanType = loanType;
            Years = years;
            DateOfLoan = dateOfLoan;
            Property = property;
        }

        public global::System.Guid Id { get; }

        public global::System.String LenderName { get; }

        public global::System.Decimal? Amount { get; }

        public global::System.Decimal? Interest { get; }

        public global::System.Decimal? LMI { get; }

        public global::PropManagerSite.GraphQL.LoanTypes LoanType { get; }

        public global::System.Int32? Years { get; }

        public global::System.DateTimeOffset? DateOfLoan { get; }

        public global::PropManagerSite.GraphQL.IEditProperty_EditProperty_Property_Loans_Property Property { get; }

        public virtual global::System.Boolean Equals(GetLoan_Loans_Loan? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && LenderName.Equals(other.LenderName) && Amount == other.Amount && Interest == other.Interest && LMI == other.LMI && LoanType.Equals(other.LoanType) && Years == other.Years && ((DateOfLoan is null && other.DateOfLoan is null) || DateOfLoan != null && DateOfLoan.Equals(other.DateOfLoan)) && Property.Equals(other.Property);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetLoan_Loans_Loan)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                hash ^= 397 * LenderName.GetHashCode();
                if (Amount != null)
                {
                    hash ^= 397 * Amount.GetHashCode();
                }

                if (Interest != null)
                {
                    hash ^= 397 * Interest.GetHashCode();
                }

                if (LMI != null)
                {
                    hash ^= 397 * LMI.GetHashCode();
                }

                hash ^= 397 * LoanType.GetHashCode();
                if (Years != null)
                {
                    hash ^= 397 * Years.GetHashCode();
                }

                if (DateOfLoan != null)
                {
                    hash ^= 397 * DateOfLoan.GetHashCode();
                }

                hash ^= 397 * Property.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class GetLoan_Loans_Property_Property : global::System.IEquatable<GetLoan_Loans_Property_Property>, IGetLoan_Loans_Property_Property
    {
        public GetLoan_Loans_Property_Property(global::System.Guid id, global::System.String? name)
        {
            Id = id;
            Name = name;
        }

        public global::System.Guid Id { get; }

        public global::System.String? Name { get; }

        public virtual global::System.Boolean Equals(GetLoan_Loans_Property_Property? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && ((Name is null && other.Name is null) || Name != null && Name.Equals(other.Name));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetLoan_Loans_Property_Property)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                if (Name != null)
                {
                    hash ^= 397 * Name.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface IGetLoanResult
    {
        public global::System.Collections.Generic.IReadOnlyList<global::PropManagerSite.GraphQL.IGetLoan_Loans> Loans { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface IGetLoan_Loans : ILoan
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface IGetLoan_Loans_Loan : IGetLoan_Loans
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface IGetLoan_Loans_Property
    {
        public global::System.Guid Id { get; }

        public global::System.String? Name { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface IGetLoan_Loans_Property_Property : IGetLoan_Loans_Property
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class GetExpenseResult : global::System.IEquatable<GetExpenseResult>, IGetExpenseResult
    {
        public GetExpenseResult(global::System.Collections.Generic.IReadOnlyList<global::PropManagerSite.GraphQL.IGetExpense_Expenses> expenses)
        {
            Expenses = expenses;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::PropManagerSite.GraphQL.IGetExpense_Expenses> Expenses { get; }

        public virtual global::System.Boolean Equals(GetExpenseResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Expenses, other.Expenses));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetExpenseResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                foreach (var Expenses_elm in Expenses)
                {
                    hash ^= 397 * Expenses_elm.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class GetExpense_Expenses_Expense : global::System.IEquatable<GetExpense_Expenses_Expense>, IGetExpense_Expenses_Expense
    {
        public GetExpense_Expenses_Expense(global::System.Guid id, global::System.String title, global::System.String? description, global::System.Decimal? price, global::System.Decimal totalDeductable, global::System.Guid propertyId, global::System.DateTimeOffset expenseDate, global::PropManagerSite.GraphQL.IEditProperty_EditProperty_Property_Expenses_Property property, global::System.Boolean deleted)
        {
            Id = id;
            Title = title;
            Description = description;
            Price = price;
            TotalDeductable = totalDeductable;
            PropertyId = propertyId;
            ExpenseDate = expenseDate;
            Property = property;
            Deleted = deleted;
        }

        public global::System.Guid Id { get; }

        public global::System.String Title { get; }

        public global::System.String? Description { get; }

        public global::System.Decimal? Price { get; }

        public global::System.Decimal TotalDeductable { get; }

        public global::System.Guid PropertyId { get; }

        public global::System.DateTimeOffset ExpenseDate { get; }

        public global::PropManagerSite.GraphQL.IEditProperty_EditProperty_Property_Expenses_Property Property { get; }

        public global::System.Boolean Deleted { get; }

        public virtual global::System.Boolean Equals(GetExpense_Expenses_Expense? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && Title.Equals(other.Title) && ((Description is null && other.Description is null) || Description != null && Description.Equals(other.Description)) && Price == other.Price && TotalDeductable == other.TotalDeductable && PropertyId.Equals(other.PropertyId) && ExpenseDate.Equals(other.ExpenseDate) && Property.Equals(other.Property) && Deleted == other.Deleted;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetExpense_Expenses_Expense)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                hash ^= 397 * Title.GetHashCode();
                if (Description != null)
                {
                    hash ^= 397 * Description.GetHashCode();
                }

                if (Price != null)
                {
                    hash ^= 397 * Price.GetHashCode();
                }

                hash ^= 397 * TotalDeductable.GetHashCode();
                hash ^= 397 * PropertyId.GetHashCode();
                hash ^= 397 * ExpenseDate.GetHashCode();
                hash ^= 397 * Property.GetHashCode();
                hash ^= 397 * Deleted.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class GetExpense_Expenses_Property_Property : global::System.IEquatable<GetExpense_Expenses_Property_Property>, IGetExpense_Expenses_Property_Property
    {
        public GetExpense_Expenses_Property_Property(global::System.Guid id)
        {
            Id = id;
        }

        public global::System.Guid Id { get; }

        public virtual global::System.Boolean Equals(GetExpense_Expenses_Property_Property? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetExpense_Expenses_Property_Property)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface IGetExpenseResult
    {
        public global::System.Collections.Generic.IReadOnlyList<global::PropManagerSite.GraphQL.IGetExpense_Expenses> Expenses { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface IGetExpense_Expenses : IExpense
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface IGetExpense_Expenses_Expense : IGetExpense_Expenses
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface IGetExpense_Expenses_Property
    {
        public global::System.Guid Id { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface IGetExpense_Expenses_Property_Property : IGetExpense_Expenses_Property
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class EditExpenseInputInputValueFormatter : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _decimalFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _uUIDFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _dateTimeFormatter = default !;
        public global::System.String TypeName => "EditExpenseInput";
        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
            _decimalFormatter = serializerResolver.GetInputValueFormatter("Decimal");
            _uUIDFormatter = serializerResolver.GetInputValueFormatter("UUID");
            _dateTimeFormatter = serializerResolver.GetInputValueFormatter("DateTime");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            var input = runtimeValue as global::PropManagerSite.GraphQL.EditExpenseInput;
            var inputInfo = runtimeValue as global::PropManagerSite.GraphQL.State.IEditExpenseInputInfo;
            if (input is null || inputInfo is null)
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            var fields = new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>>();
            if (inputInfo.IsTitleSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("title", FormatTitle(input.Title)));
            }

            if (inputInfo.IsDescriptionSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("description", FormatDescription(input.Description)));
            }

            if (inputInfo.IsPriceSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("price", FormatPrice(input.Price)));
            }

            if (inputInfo.IsTotalDeductableSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("totalDeductable", FormatTotalDeductable(input.TotalDeductable)));
            }

            if (inputInfo.IsIdSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("id", FormatId(input.Id)));
            }

            if (inputInfo.IsExpenseDateSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("expenseDate", FormatExpenseDate(input.ExpenseDate)));
            }

            return fields;
        }

        private global::System.Object? FormatTitle(global::System.String input)
        {
            if (input is null)
            {
                throw new global::System.ArgumentNullException(nameof(input));
            }

            return _stringFormatter.Format(input);
        }

        private global::System.Object? FormatDescription(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFormatter.Format(input);
            }
        }

        private global::System.Object? FormatPrice(global::System.Decimal? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _decimalFormatter.Format(input);
            }
        }

        private global::System.Object? FormatTotalDeductable(global::System.Decimal input)
        {
            return _decimalFormatter.Format(input);
        }

        private global::System.Object? FormatId(global::System.Guid input)
        {
            return _uUIDFormatter.Format(input);
        }

        private global::System.Object? FormatExpenseDate(global::System.DateTimeOffset input)
        {
            return _dateTimeFormatter.Format(input);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class EditExpenseInput : global::PropManagerSite.GraphQL.State.IEditExpenseInputInfo, global::System.IEquatable<EditExpenseInput>
    {
        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((EditExpenseInput)obj);
        }

        public virtual global::System.Boolean Equals(EditExpenseInput? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Title.Equals(other.Title)) && ((Description is null && other.Description is null) || Description != null && Description.Equals(other.Description)) && Price == other.Price && TotalDeductable == other.TotalDeductable && Id.Equals(other.Id) && ExpenseDate.Equals(other.ExpenseDate);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Title.GetHashCode();
                if (Description != null)
                {
                    hash ^= 397 * Description.GetHashCode();
                }

                if (Price != null)
                {
                    hash ^= 397 * Price.GetHashCode();
                }

                hash ^= 397 * TotalDeductable.GetHashCode();
                hash ^= 397 * Id.GetHashCode();
                hash ^= 397 * ExpenseDate.GetHashCode();
                return hash;
            }
        }

        private global::System.String _value_title = default !;
        private global::System.Boolean _set_title;
        private global::System.String? _value_description;
        private global::System.Boolean _set_description;
        private global::System.Decimal? _value_price;
        private global::System.Boolean _set_price;
        private global::System.Decimal _value_totalDeductable;
        private global::System.Boolean _set_totalDeductable;
        private global::System.Guid _value_id;
        private global::System.Boolean _set_id;
        private global::System.DateTimeOffset _value_expenseDate;
        private global::System.Boolean _set_expenseDate;
        public global::System.String Title
        {
            get => _value_title;
            set
            {
                _set_title = true;
                _value_title = value;
            }
        }

        global::System.Boolean global::PropManagerSite.GraphQL.State.IEditExpenseInputInfo.IsTitleSet => _set_title;
        public global::System.String? Description
        {
            get => _value_description;
            set
            {
                _set_description = true;
                _value_description = value;
            }
        }

        global::System.Boolean global::PropManagerSite.GraphQL.State.IEditExpenseInputInfo.IsDescriptionSet => _set_description;
        public global::System.Decimal? Price
        {
            get => _value_price;
            set
            {
                _set_price = true;
                _value_price = value;
            }
        }

        global::System.Boolean global::PropManagerSite.GraphQL.State.IEditExpenseInputInfo.IsPriceSet => _set_price;
        public global::System.Decimal TotalDeductable
        {
            get => _value_totalDeductable;
            set
            {
                _set_totalDeductable = true;
                _value_totalDeductable = value;
            }
        }

        global::System.Boolean global::PropManagerSite.GraphQL.State.IEditExpenseInputInfo.IsTotalDeductableSet => _set_totalDeductable;
        public global::System.Guid Id
        {
            get => _value_id;
            set
            {
                _set_id = true;
                _value_id = value;
            }
        }

        global::System.Boolean global::PropManagerSite.GraphQL.State.IEditExpenseInputInfo.IsIdSet => _set_id;
        public global::System.DateTimeOffset ExpenseDate
        {
            get => _value_expenseDate;
            set
            {
                _set_expenseDate = true;
                _value_expenseDate = value;
            }
        }

        global::System.Boolean global::PropManagerSite.GraphQL.State.IEditExpenseInputInfo.IsExpenseDateSet => _set_expenseDate;
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class AddExpenseInputInputValueFormatter : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _decimalFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _uUIDFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _dateTimeFormatter = default !;
        public global::System.String TypeName => "AddExpenseInput";
        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
            _decimalFormatter = serializerResolver.GetInputValueFormatter("Decimal");
            _uUIDFormatter = serializerResolver.GetInputValueFormatter("UUID");
            _dateTimeFormatter = serializerResolver.GetInputValueFormatter("DateTime");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            var input = runtimeValue as global::PropManagerSite.GraphQL.AddExpenseInput;
            var inputInfo = runtimeValue as global::PropManagerSite.GraphQL.State.IAddExpenseInputInfo;
            if (input is null || inputInfo is null)
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            var fields = new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>>();
            if (inputInfo.IsTitleSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("title", FormatTitle(input.Title)));
            }

            if (inputInfo.IsDescriptionSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("description", FormatDescription(input.Description)));
            }

            if (inputInfo.IsPriceSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("price", FormatPrice(input.Price)));
            }

            if (inputInfo.IsTotalDeductableSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("totalDeductable", FormatTotalDeductable(input.TotalDeductable)));
            }

            if (inputInfo.IsPropertyIdSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("propertyId", FormatPropertyId(input.PropertyId)));
            }

            if (inputInfo.IsExpenseDateSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("expenseDate", FormatExpenseDate(input.ExpenseDate)));
            }

            return fields;
        }

        private global::System.Object? FormatTitle(global::System.String input)
        {
            if (input is null)
            {
                throw new global::System.ArgumentNullException(nameof(input));
            }

            return _stringFormatter.Format(input);
        }

        private global::System.Object? FormatDescription(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFormatter.Format(input);
            }
        }

        private global::System.Object? FormatPrice(global::System.Decimal? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _decimalFormatter.Format(input);
            }
        }

        private global::System.Object? FormatTotalDeductable(global::System.Decimal input)
        {
            return _decimalFormatter.Format(input);
        }

        private global::System.Object? FormatPropertyId(global::System.Guid input)
        {
            return _uUIDFormatter.Format(input);
        }

        private global::System.Object? FormatExpenseDate(global::System.DateTimeOffset input)
        {
            return _dateTimeFormatter.Format(input);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class AddExpenseInput : global::PropManagerSite.GraphQL.State.IAddExpenseInputInfo, global::System.IEquatable<AddExpenseInput>
    {
        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((AddExpenseInput)obj);
        }

        public virtual global::System.Boolean Equals(AddExpenseInput? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Title.Equals(other.Title)) && ((Description is null && other.Description is null) || Description != null && Description.Equals(other.Description)) && Price == other.Price && TotalDeductable == other.TotalDeductable && PropertyId.Equals(other.PropertyId) && ExpenseDate.Equals(other.ExpenseDate);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Title.GetHashCode();
                if (Description != null)
                {
                    hash ^= 397 * Description.GetHashCode();
                }

                if (Price != null)
                {
                    hash ^= 397 * Price.GetHashCode();
                }

                hash ^= 397 * TotalDeductable.GetHashCode();
                hash ^= 397 * PropertyId.GetHashCode();
                hash ^= 397 * ExpenseDate.GetHashCode();
                return hash;
            }
        }

        private global::System.String _value_title = default !;
        private global::System.Boolean _set_title;
        private global::System.String? _value_description;
        private global::System.Boolean _set_description;
        private global::System.Decimal? _value_price;
        private global::System.Boolean _set_price;
        private global::System.Decimal _value_totalDeductable;
        private global::System.Boolean _set_totalDeductable;
        private global::System.Guid _value_propertyId;
        private global::System.Boolean _set_propertyId;
        private global::System.DateTimeOffset _value_expenseDate;
        private global::System.Boolean _set_expenseDate;
        public global::System.String Title
        {
            get => _value_title;
            set
            {
                _set_title = true;
                _value_title = value;
            }
        }

        global::System.Boolean global::PropManagerSite.GraphQL.State.IAddExpenseInputInfo.IsTitleSet => _set_title;
        public global::System.String? Description
        {
            get => _value_description;
            set
            {
                _set_description = true;
                _value_description = value;
            }
        }

        global::System.Boolean global::PropManagerSite.GraphQL.State.IAddExpenseInputInfo.IsDescriptionSet => _set_description;
        public global::System.Decimal? Price
        {
            get => _value_price;
            set
            {
                _set_price = true;
                _value_price = value;
            }
        }

        global::System.Boolean global::PropManagerSite.GraphQL.State.IAddExpenseInputInfo.IsPriceSet => _set_price;
        public global::System.Decimal TotalDeductable
        {
            get => _value_totalDeductable;
            set
            {
                _set_totalDeductable = true;
                _value_totalDeductable = value;
            }
        }

        global::System.Boolean global::PropManagerSite.GraphQL.State.IAddExpenseInputInfo.IsTotalDeductableSet => _set_totalDeductable;
        public global::System.Guid PropertyId
        {
            get => _value_propertyId;
            set
            {
                _set_propertyId = true;
                _value_propertyId = value;
            }
        }

        global::System.Boolean global::PropManagerSite.GraphQL.State.IAddExpenseInputInfo.IsPropertyIdSet => _set_propertyId;
        public global::System.DateTimeOffset ExpenseDate
        {
            get => _value_expenseDate;
            set
            {
                _set_expenseDate = true;
                _value_expenseDate = value;
            }
        }

        global::System.Boolean global::PropManagerSite.GraphQL.State.IAddExpenseInputInfo.IsExpenseDateSet => _set_expenseDate;
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class DeleteExpenseInputInputValueFormatter : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _uUIDFormatter = default !;
        public global::System.String TypeName => "DeleteExpenseInput";
        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _uUIDFormatter = serializerResolver.GetInputValueFormatter("UUID");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            var input = runtimeValue as global::PropManagerSite.GraphQL.DeleteExpenseInput;
            var inputInfo = runtimeValue as global::PropManagerSite.GraphQL.State.IDeleteExpenseInputInfo;
            if (input is null || inputInfo is null)
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            var fields = new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>>();
            if (inputInfo.IsIdSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("id", FormatId(input.Id)));
            }

            return fields;
        }

        private global::System.Object? FormatId(global::System.Guid input)
        {
            return _uUIDFormatter.Format(input);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class DeleteExpenseInput : global::PropManagerSite.GraphQL.State.IDeleteExpenseInputInfo, global::System.IEquatable<DeleteExpenseInput>
    {
        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((DeleteExpenseInput)obj);
        }

        public virtual global::System.Boolean Equals(DeleteExpenseInput? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id));
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                return hash;
            }
        }

        private global::System.Guid _value_id;
        private global::System.Boolean _set_id;
        public global::System.Guid Id
        {
            get => _value_id;
            set
            {
                _set_id = true;
                _value_id = value;
            }
        }

        global::System.Boolean global::PropManagerSite.GraphQL.State.IDeleteExpenseInputInfo.IsIdSet => _set_id;
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class AddLoanInputInputValueFormatter : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _decimalFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _loanTypesFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _intFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _dateTimeFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _uUIDFormatter = default !;
        public global::System.String TypeName => "AddLoanInput";
        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
            _decimalFormatter = serializerResolver.GetInputValueFormatter("Decimal");
            _loanTypesFormatter = serializerResolver.GetInputValueFormatter("LoanTypes");
            _intFormatter = serializerResolver.GetInputValueFormatter("Int");
            _dateTimeFormatter = serializerResolver.GetInputValueFormatter("DateTime");
            _uUIDFormatter = serializerResolver.GetInputValueFormatter("UUID");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            var input = runtimeValue as global::PropManagerSite.GraphQL.AddLoanInput;
            var inputInfo = runtimeValue as global::PropManagerSite.GraphQL.State.IAddLoanInputInfo;
            if (input is null || inputInfo is null)
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            var fields = new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>>();
            if (inputInfo.IsLenderNameSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("lenderName", FormatLenderName(input.LenderName)));
            }

            if (inputInfo.IsAmountSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("amount", FormatAmount(input.Amount)));
            }

            if (inputInfo.IsInterestSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("interest", FormatInterest(input.Interest)));
            }

            if (inputInfo.IsLoanTypeSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("loanType", FormatLoanType(input.LoanType)));
            }

            if (inputInfo.IsLMISet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("lMI", FormatLMI(input.LMI)));
            }

            if (inputInfo.IsYearsSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("years", FormatYears(input.Years)));
            }

            if (inputInfo.IsDateOfLoanSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("dateOfLoan", FormatDateOfLoan(input.DateOfLoan)));
            }

            if (inputInfo.IsPropertyIdSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("propertyId", FormatPropertyId(input.PropertyId)));
            }

            return fields;
        }

        private global::System.Object? FormatLenderName(global::System.String input)
        {
            if (input is null)
            {
                throw new global::System.ArgumentNullException(nameof(input));
            }

            return _stringFormatter.Format(input);
        }

        private global::System.Object? FormatAmount(global::System.Decimal input)
        {
            return _decimalFormatter.Format(input);
        }

        private global::System.Object? FormatInterest(global::System.Decimal? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _decimalFormatter.Format(input);
            }
        }

        private global::System.Object? FormatLoanType(global::PropManagerSite.GraphQL.LoanTypes input)
        {
            return _loanTypesFormatter.Format(input);
        }

        private global::System.Object? FormatLMI(global::System.Decimal? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _decimalFormatter.Format(input);
            }
        }

        private global::System.Object? FormatYears(global::System.Int32? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _intFormatter.Format(input);
            }
        }

        private global::System.Object? FormatDateOfLoan(global::System.DateTimeOffset? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _dateTimeFormatter.Format(input);
            }
        }

        private global::System.Object? FormatPropertyId(global::System.Guid input)
        {
            return _uUIDFormatter.Format(input);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class AddLoanInput : global::PropManagerSite.GraphQL.State.IAddLoanInputInfo, global::System.IEquatable<AddLoanInput>
    {
        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((AddLoanInput)obj);
        }

        public virtual global::System.Boolean Equals(AddLoanInput? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (LenderName.Equals(other.LenderName)) && Amount == other.Amount && Interest == other.Interest && LoanType.Equals(other.LoanType) && LMI == other.LMI && Years == other.Years && ((DateOfLoan is null && other.DateOfLoan is null) || DateOfLoan != null && DateOfLoan.Equals(other.DateOfLoan)) && PropertyId.Equals(other.PropertyId);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * LenderName.GetHashCode();
                hash ^= 397 * Amount.GetHashCode();
                if (Interest != null)
                {
                    hash ^= 397 * Interest.GetHashCode();
                }

                hash ^= 397 * LoanType.GetHashCode();
                if (LMI != null)
                {
                    hash ^= 397 * LMI.GetHashCode();
                }

                if (Years != null)
                {
                    hash ^= 397 * Years.GetHashCode();
                }

                if (DateOfLoan != null)
                {
                    hash ^= 397 * DateOfLoan.GetHashCode();
                }

                hash ^= 397 * PropertyId.GetHashCode();
                return hash;
            }
        }

        private global::System.String _value_lenderName = default !;
        private global::System.Boolean _set_lenderName;
        private global::System.Decimal _value_amount;
        private global::System.Boolean _set_amount;
        private global::System.Decimal? _value_interest;
        private global::System.Boolean _set_interest;
        private global::PropManagerSite.GraphQL.LoanTypes _value_loanType;
        private global::System.Boolean _set_loanType;
        private global::System.Decimal? _value_lMI;
        private global::System.Boolean _set_lMI;
        private global::System.Int32? _value_years;
        private global::System.Boolean _set_years;
        private global::System.DateTimeOffset? _value_dateOfLoan;
        private global::System.Boolean _set_dateOfLoan;
        private global::System.Guid _value_propertyId;
        private global::System.Boolean _set_propertyId;
        public global::System.String LenderName
        {
            get => _value_lenderName;
            set
            {
                _set_lenderName = true;
                _value_lenderName = value;
            }
        }

        global::System.Boolean global::PropManagerSite.GraphQL.State.IAddLoanInputInfo.IsLenderNameSet => _set_lenderName;
        public global::System.Decimal Amount
        {
            get => _value_amount;
            set
            {
                _set_amount = true;
                _value_amount = value;
            }
        }

        global::System.Boolean global::PropManagerSite.GraphQL.State.IAddLoanInputInfo.IsAmountSet => _set_amount;
        public global::System.Decimal? Interest
        {
            get => _value_interest;
            set
            {
                _set_interest = true;
                _value_interest = value;
            }
        }

        global::System.Boolean global::PropManagerSite.GraphQL.State.IAddLoanInputInfo.IsInterestSet => _set_interest;
        public global::PropManagerSite.GraphQL.LoanTypes LoanType
        {
            get => _value_loanType;
            set
            {
                _set_loanType = true;
                _value_loanType = value;
            }
        }

        global::System.Boolean global::PropManagerSite.GraphQL.State.IAddLoanInputInfo.IsLoanTypeSet => _set_loanType;
        public global::System.Decimal? LMI
        {
            get => _value_lMI;
            set
            {
                _set_lMI = true;
                _value_lMI = value;
            }
        }

        global::System.Boolean global::PropManagerSite.GraphQL.State.IAddLoanInputInfo.IsLMISet => _set_lMI;
        public global::System.Int32? Years
        {
            get => _value_years;
            set
            {
                _set_years = true;
                _value_years = value;
            }
        }

        global::System.Boolean global::PropManagerSite.GraphQL.State.IAddLoanInputInfo.IsYearsSet => _set_years;
        public global::System.DateTimeOffset? DateOfLoan
        {
            get => _value_dateOfLoan;
            set
            {
                _set_dateOfLoan = true;
                _value_dateOfLoan = value;
            }
        }

        global::System.Boolean global::PropManagerSite.GraphQL.State.IAddLoanInputInfo.IsDateOfLoanSet => _set_dateOfLoan;
        public global::System.Guid PropertyId
        {
            get => _value_propertyId;
            set
            {
                _set_propertyId = true;
                _value_propertyId = value;
            }
        }

        global::System.Boolean global::PropManagerSite.GraphQL.State.IAddLoanInputInfo.IsPropertyIdSet => _set_propertyId;
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class EditLoanInputInputValueFormatter : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _uUIDFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _decimalFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _loanTypesFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _intFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _dateTimeFormatter = default !;
        public global::System.String TypeName => "EditLoanInput";
        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _uUIDFormatter = serializerResolver.GetInputValueFormatter("UUID");
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
            _decimalFormatter = serializerResolver.GetInputValueFormatter("Decimal");
            _loanTypesFormatter = serializerResolver.GetInputValueFormatter("LoanTypes");
            _intFormatter = serializerResolver.GetInputValueFormatter("Int");
            _dateTimeFormatter = serializerResolver.GetInputValueFormatter("DateTime");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            var input = runtimeValue as global::PropManagerSite.GraphQL.EditLoanInput;
            var inputInfo = runtimeValue as global::PropManagerSite.GraphQL.State.IEditLoanInputInfo;
            if (input is null || inputInfo is null)
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            var fields = new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>>();
            if (inputInfo.IsIdSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("id", FormatId(input.Id)));
            }

            if (inputInfo.IsLenderNameSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("lenderName", FormatLenderName(input.LenderName)));
            }

            if (inputInfo.IsAmountSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("amount", FormatAmount(input.Amount)));
            }

            if (inputInfo.IsInterestSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("interest", FormatInterest(input.Interest)));
            }

            if (inputInfo.IsLoanTypeSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("loanType", FormatLoanType(input.LoanType)));
            }

            if (inputInfo.IsLMISet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("lMI", FormatLMI(input.LMI)));
            }

            if (inputInfo.IsYearsSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("years", FormatYears(input.Years)));
            }

            if (inputInfo.IsDateOfLoanSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("dateOfLoan", FormatDateOfLoan(input.DateOfLoan)));
            }

            return fields;
        }

        private global::System.Object? FormatId(global::System.Guid input)
        {
            return _uUIDFormatter.Format(input);
        }

        private global::System.Object? FormatLenderName(global::System.String input)
        {
            if (input is null)
            {
                throw new global::System.ArgumentNullException(nameof(input));
            }

            return _stringFormatter.Format(input);
        }

        private global::System.Object? FormatAmount(global::System.Decimal input)
        {
            return _decimalFormatter.Format(input);
        }

        private global::System.Object? FormatInterest(global::System.Decimal? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _decimalFormatter.Format(input);
            }
        }

        private global::System.Object? FormatLoanType(global::PropManagerSite.GraphQL.LoanTypes input)
        {
            return _loanTypesFormatter.Format(input);
        }

        private global::System.Object? FormatLMI(global::System.Decimal? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _decimalFormatter.Format(input);
            }
        }

        private global::System.Object? FormatYears(global::System.Int32? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _intFormatter.Format(input);
            }
        }

        private global::System.Object? FormatDateOfLoan(global::System.DateTimeOffset? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _dateTimeFormatter.Format(input);
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class EditLoanInput : global::PropManagerSite.GraphQL.State.IEditLoanInputInfo, global::System.IEquatable<EditLoanInput>
    {
        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((EditLoanInput)obj);
        }

        public virtual global::System.Boolean Equals(EditLoanInput? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && LenderName.Equals(other.LenderName) && Amount == other.Amount && Interest == other.Interest && LoanType.Equals(other.LoanType) && LMI == other.LMI && Years == other.Years && ((DateOfLoan is null && other.DateOfLoan is null) || DateOfLoan != null && DateOfLoan.Equals(other.DateOfLoan));
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                hash ^= 397 * LenderName.GetHashCode();
                hash ^= 397 * Amount.GetHashCode();
                if (Interest != null)
                {
                    hash ^= 397 * Interest.GetHashCode();
                }

                hash ^= 397 * LoanType.GetHashCode();
                if (LMI != null)
                {
                    hash ^= 397 * LMI.GetHashCode();
                }

                if (Years != null)
                {
                    hash ^= 397 * Years.GetHashCode();
                }

                if (DateOfLoan != null)
                {
                    hash ^= 397 * DateOfLoan.GetHashCode();
                }

                return hash;
            }
        }

        private global::System.Guid _value_id;
        private global::System.Boolean _set_id;
        private global::System.String _value_lenderName = default !;
        private global::System.Boolean _set_lenderName;
        private global::System.Decimal _value_amount;
        private global::System.Boolean _set_amount;
        private global::System.Decimal? _value_interest;
        private global::System.Boolean _set_interest;
        private global::PropManagerSite.GraphQL.LoanTypes _value_loanType;
        private global::System.Boolean _set_loanType;
        private global::System.Decimal? _value_lMI;
        private global::System.Boolean _set_lMI;
        private global::System.Int32? _value_years;
        private global::System.Boolean _set_years;
        private global::System.DateTimeOffset? _value_dateOfLoan;
        private global::System.Boolean _set_dateOfLoan;
        public global::System.Guid Id
        {
            get => _value_id;
            set
            {
                _set_id = true;
                _value_id = value;
            }
        }

        global::System.Boolean global::PropManagerSite.GraphQL.State.IEditLoanInputInfo.IsIdSet => _set_id;
        public global::System.String LenderName
        {
            get => _value_lenderName;
            set
            {
                _set_lenderName = true;
                _value_lenderName = value;
            }
        }

        global::System.Boolean global::PropManagerSite.GraphQL.State.IEditLoanInputInfo.IsLenderNameSet => _set_lenderName;
        public global::System.Decimal Amount
        {
            get => _value_amount;
            set
            {
                _set_amount = true;
                _value_amount = value;
            }
        }

        global::System.Boolean global::PropManagerSite.GraphQL.State.IEditLoanInputInfo.IsAmountSet => _set_amount;
        public global::System.Decimal? Interest
        {
            get => _value_interest;
            set
            {
                _set_interest = true;
                _value_interest = value;
            }
        }

        global::System.Boolean global::PropManagerSite.GraphQL.State.IEditLoanInputInfo.IsInterestSet => _set_interest;
        public global::PropManagerSite.GraphQL.LoanTypes LoanType
        {
            get => _value_loanType;
            set
            {
                _set_loanType = true;
                _value_loanType = value;
            }
        }

        global::System.Boolean global::PropManagerSite.GraphQL.State.IEditLoanInputInfo.IsLoanTypeSet => _set_loanType;
        public global::System.Decimal? LMI
        {
            get => _value_lMI;
            set
            {
                _set_lMI = true;
                _value_lMI = value;
            }
        }

        global::System.Boolean global::PropManagerSite.GraphQL.State.IEditLoanInputInfo.IsLMISet => _set_lMI;
        public global::System.Int32? Years
        {
            get => _value_years;
            set
            {
                _set_years = true;
                _value_years = value;
            }
        }

        global::System.Boolean global::PropManagerSite.GraphQL.State.IEditLoanInputInfo.IsYearsSet => _set_years;
        public global::System.DateTimeOffset? DateOfLoan
        {
            get => _value_dateOfLoan;
            set
            {
                _set_dateOfLoan = true;
                _value_dateOfLoan = value;
            }
        }

        global::System.Boolean global::PropManagerSite.GraphQL.State.IEditLoanInputInfo.IsDateOfLoanSet => _set_dateOfLoan;
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class DeleteLoanInputInputValueFormatter : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _uUIDFormatter = default !;
        public global::System.String TypeName => "DeleteLoanInput";
        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _uUIDFormatter = serializerResolver.GetInputValueFormatter("UUID");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            var input = runtimeValue as global::PropManagerSite.GraphQL.DeleteLoanInput;
            var inputInfo = runtimeValue as global::PropManagerSite.GraphQL.State.IDeleteLoanInputInfo;
            if (input is null || inputInfo is null)
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            var fields = new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>>();
            if (inputInfo.IsIdSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("id", FormatId(input.Id)));
            }

            return fields;
        }

        private global::System.Object? FormatId(global::System.Guid input)
        {
            return _uUIDFormatter.Format(input);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class DeleteLoanInput : global::PropManagerSite.GraphQL.State.IDeleteLoanInputInfo, global::System.IEquatable<DeleteLoanInput>
    {
        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((DeleteLoanInput)obj);
        }

        public virtual global::System.Boolean Equals(DeleteLoanInput? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id));
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                return hash;
            }
        }

        private global::System.Guid _value_id;
        private global::System.Boolean _set_id;
        public global::System.Guid Id
        {
            get => _value_id;
            set
            {
                _set_id = true;
                _value_id = value;
            }
        }

        global::System.Boolean global::PropManagerSite.GraphQL.State.IDeleteLoanInputInfo.IsIdSet => _set_id;
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class AddPropertyInputInputValueFormatter : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _decimalFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _propertyTypesFormatter = default !;
        public global::System.String TypeName => "AddPropertyInput";
        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
            _decimalFormatter = serializerResolver.GetInputValueFormatter("Decimal");
            _propertyTypesFormatter = serializerResolver.GetInputValueFormatter("PropertyTypes");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            var input = runtimeValue as global::PropManagerSite.GraphQL.AddPropertyInput;
            var inputInfo = runtimeValue as global::PropManagerSite.GraphQL.State.IAddPropertyInputInfo;
            if (input is null || inputInfo is null)
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            var fields = new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>>();
            if (inputInfo.IsAddressSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("address", FormatAddress(input.Address)));
            }

            if (inputInfo.IsNameSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("name", FormatName(input.Name)));
            }

            if (inputInfo.IsStampDutySet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("stampDuty", FormatStampDuty(input.StampDuty)));
            }

            if (inputInfo.IsPurchasePriceSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("purchasePrice", FormatPurchasePrice(input.PurchasePrice)));
            }

            if (inputInfo.IsRegistrationTransferFeeSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("registrationTransferFee", FormatRegistrationTransferFee(input.RegistrationTransferFee)));
            }

            if (inputInfo.IsRoomsSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("rooms", FormatRooms(input.Rooms)));
            }

            if (inputInfo.IsBathroomsSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("bathrooms", FormatBathrooms(input.Bathrooms)));
            }

            if (inputInfo.IsCarparkSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("carpark", FormatCarpark(input.Carpark)));
            }

            if (inputInfo.IsLandSizeSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("landSize", FormatLandSize(input.LandSize)));
            }

            if (inputInfo.IsPropertyTypeSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("propertyType", FormatPropertyType(input.PropertyType)));
            }

            return fields;
        }

        private global::System.Object? FormatAddress(global::System.String input)
        {
            if (input is null)
            {
                throw new global::System.ArgumentNullException(nameof(input));
            }

            return _stringFormatter.Format(input);
        }

        private global::System.Object? FormatName(global::System.String input)
        {
            if (input is null)
            {
                throw new global::System.ArgumentNullException(nameof(input));
            }

            return _stringFormatter.Format(input);
        }

        private global::System.Object? FormatStampDuty(global::System.Decimal? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _decimalFormatter.Format(input);
            }
        }

        private global::System.Object? FormatPurchasePrice(global::System.Decimal? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _decimalFormatter.Format(input);
            }
        }

        private global::System.Object? FormatRegistrationTransferFee(global::System.Decimal? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _decimalFormatter.Format(input);
            }
        }

        private global::System.Object? FormatRooms(global::System.Decimal? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _decimalFormatter.Format(input);
            }
        }

        private global::System.Object? FormatBathrooms(global::System.Decimal? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _decimalFormatter.Format(input);
            }
        }

        private global::System.Object? FormatCarpark(global::System.Decimal? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _decimalFormatter.Format(input);
            }
        }

        private global::System.Object? FormatLandSize(global::System.Decimal? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _decimalFormatter.Format(input);
            }
        }

        private global::System.Object? FormatPropertyType(global::PropManagerSite.GraphQL.PropertyTypes? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _propertyTypesFormatter.Format(input);
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class AddPropertyInput : global::PropManagerSite.GraphQL.State.IAddPropertyInputInfo, global::System.IEquatable<AddPropertyInput>
    {
        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((AddPropertyInput)obj);
        }

        public virtual global::System.Boolean Equals(AddPropertyInput? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Address.Equals(other.Address)) && Name.Equals(other.Name) && StampDuty == other.StampDuty && PurchasePrice == other.PurchasePrice && RegistrationTransferFee == other.RegistrationTransferFee && Rooms == other.Rooms && Bathrooms == other.Bathrooms && Carpark == other.Carpark && LandSize == other.LandSize && ((PropertyType is null && other.PropertyType is null) || PropertyType != null && PropertyType.Equals(other.PropertyType));
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Address.GetHashCode();
                hash ^= 397 * Name.GetHashCode();
                if (StampDuty != null)
                {
                    hash ^= 397 * StampDuty.GetHashCode();
                }

                if (PurchasePrice != null)
                {
                    hash ^= 397 * PurchasePrice.GetHashCode();
                }

                if (RegistrationTransferFee != null)
                {
                    hash ^= 397 * RegistrationTransferFee.GetHashCode();
                }

                if (Rooms != null)
                {
                    hash ^= 397 * Rooms.GetHashCode();
                }

                if (Bathrooms != null)
                {
                    hash ^= 397 * Bathrooms.GetHashCode();
                }

                if (Carpark != null)
                {
                    hash ^= 397 * Carpark.GetHashCode();
                }

                if (LandSize != null)
                {
                    hash ^= 397 * LandSize.GetHashCode();
                }

                if (PropertyType != null)
                {
                    hash ^= 397 * PropertyType.GetHashCode();
                }

                return hash;
            }
        }

        private global::System.String _value_address = default !;
        private global::System.Boolean _set_address;
        private global::System.String _value_name = default !;
        private global::System.Boolean _set_name;
        private global::System.Decimal? _value_stampDuty;
        private global::System.Boolean _set_stampDuty;
        private global::System.Decimal? _value_purchasePrice;
        private global::System.Boolean _set_purchasePrice;
        private global::System.Decimal? _value_registrationTransferFee;
        private global::System.Boolean _set_registrationTransferFee;
        private global::System.Decimal? _value_rooms;
        private global::System.Boolean _set_rooms;
        private global::System.Decimal? _value_bathrooms;
        private global::System.Boolean _set_bathrooms;
        private global::System.Decimal? _value_carpark;
        private global::System.Boolean _set_carpark;
        private global::System.Decimal? _value_landSize;
        private global::System.Boolean _set_landSize;
        private global::PropManagerSite.GraphQL.PropertyTypes? _value_propertyType;
        private global::System.Boolean _set_propertyType;
        public global::System.String Address
        {
            get => _value_address;
            set
            {
                _set_address = true;
                _value_address = value;
            }
        }

        global::System.Boolean global::PropManagerSite.GraphQL.State.IAddPropertyInputInfo.IsAddressSet => _set_address;
        public global::System.String Name
        {
            get => _value_name;
            set
            {
                _set_name = true;
                _value_name = value;
            }
        }

        global::System.Boolean global::PropManagerSite.GraphQL.State.IAddPropertyInputInfo.IsNameSet => _set_name;
        public global::System.Decimal? StampDuty
        {
            get => _value_stampDuty;
            set
            {
                _set_stampDuty = true;
                _value_stampDuty = value;
            }
        }

        global::System.Boolean global::PropManagerSite.GraphQL.State.IAddPropertyInputInfo.IsStampDutySet => _set_stampDuty;
        public global::System.Decimal? PurchasePrice
        {
            get => _value_purchasePrice;
            set
            {
                _set_purchasePrice = true;
                _value_purchasePrice = value;
            }
        }

        global::System.Boolean global::PropManagerSite.GraphQL.State.IAddPropertyInputInfo.IsPurchasePriceSet => _set_purchasePrice;
        public global::System.Decimal? RegistrationTransferFee
        {
            get => _value_registrationTransferFee;
            set
            {
                _set_registrationTransferFee = true;
                _value_registrationTransferFee = value;
            }
        }

        global::System.Boolean global::PropManagerSite.GraphQL.State.IAddPropertyInputInfo.IsRegistrationTransferFeeSet => _set_registrationTransferFee;
        public global::System.Decimal? Rooms
        {
            get => _value_rooms;
            set
            {
                _set_rooms = true;
                _value_rooms = value;
            }
        }

        global::System.Boolean global::PropManagerSite.GraphQL.State.IAddPropertyInputInfo.IsRoomsSet => _set_rooms;
        public global::System.Decimal? Bathrooms
        {
            get => _value_bathrooms;
            set
            {
                _set_bathrooms = true;
                _value_bathrooms = value;
            }
        }

        global::System.Boolean global::PropManagerSite.GraphQL.State.IAddPropertyInputInfo.IsBathroomsSet => _set_bathrooms;
        public global::System.Decimal? Carpark
        {
            get => _value_carpark;
            set
            {
                _set_carpark = true;
                _value_carpark = value;
            }
        }

        global::System.Boolean global::PropManagerSite.GraphQL.State.IAddPropertyInputInfo.IsCarparkSet => _set_carpark;
        public global::System.Decimal? LandSize
        {
            get => _value_landSize;
            set
            {
                _set_landSize = true;
                _value_landSize = value;
            }
        }

        global::System.Boolean global::PropManagerSite.GraphQL.State.IAddPropertyInputInfo.IsLandSizeSet => _set_landSize;
        public global::PropManagerSite.GraphQL.PropertyTypes? PropertyType
        {
            get => _value_propertyType;
            set
            {
                _set_propertyType = true;
                _value_propertyType = value;
            }
        }

        global::System.Boolean global::PropManagerSite.GraphQL.State.IAddPropertyInputInfo.IsPropertyTypeSet => _set_propertyType;
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class EditPropertyInputInputValueFormatter : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _uUIDFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _decimalFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _propertyTypesFormatter = default !;
        public global::System.String TypeName => "EditPropertyInput";
        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _uUIDFormatter = serializerResolver.GetInputValueFormatter("UUID");
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
            _decimalFormatter = serializerResolver.GetInputValueFormatter("Decimal");
            _propertyTypesFormatter = serializerResolver.GetInputValueFormatter("PropertyTypes");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            var input = runtimeValue as global::PropManagerSite.GraphQL.EditPropertyInput;
            var inputInfo = runtimeValue as global::PropManagerSite.GraphQL.State.IEditPropertyInputInfo;
            if (input is null || inputInfo is null)
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            var fields = new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>>();
            if (inputInfo.IsIdSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("id", FormatId(input.Id)));
            }

            if (inputInfo.IsAddressSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("address", FormatAddress(input.Address)));
            }

            if (inputInfo.IsNameSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("name", FormatName(input.Name)));
            }

            if (inputInfo.IsStampDutySet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("stampDuty", FormatStampDuty(input.StampDuty)));
            }

            if (inputInfo.IsPurchasePriceSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("purchasePrice", FormatPurchasePrice(input.PurchasePrice)));
            }

            if (inputInfo.IsRegistrationTransferFeeSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("registrationTransferFee", FormatRegistrationTransferFee(input.RegistrationTransferFee)));
            }

            if (inputInfo.IsRoomsSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("rooms", FormatRooms(input.Rooms)));
            }

            if (inputInfo.IsBathroomsSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("bathrooms", FormatBathrooms(input.Bathrooms)));
            }

            if (inputInfo.IsCarparkSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("carpark", FormatCarpark(input.Carpark)));
            }

            if (inputInfo.IsLandSizeSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("landSize", FormatLandSize(input.LandSize)));
            }

            if (inputInfo.IsPropertyTypeSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("propertyType", FormatPropertyType(input.PropertyType)));
            }

            return fields;
        }

        private global::System.Object? FormatId(global::System.Guid input)
        {
            return _uUIDFormatter.Format(input);
        }

        private global::System.Object? FormatAddress(global::System.String input)
        {
            if (input is null)
            {
                throw new global::System.ArgumentNullException(nameof(input));
            }

            return _stringFormatter.Format(input);
        }

        private global::System.Object? FormatName(global::System.String input)
        {
            if (input is null)
            {
                throw new global::System.ArgumentNullException(nameof(input));
            }

            return _stringFormatter.Format(input);
        }

        private global::System.Object? FormatStampDuty(global::System.Decimal? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _decimalFormatter.Format(input);
            }
        }

        private global::System.Object? FormatPurchasePrice(global::System.Decimal? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _decimalFormatter.Format(input);
            }
        }

        private global::System.Object? FormatRegistrationTransferFee(global::System.Decimal? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _decimalFormatter.Format(input);
            }
        }

        private global::System.Object? FormatRooms(global::System.Decimal? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _decimalFormatter.Format(input);
            }
        }

        private global::System.Object? FormatBathrooms(global::System.Decimal? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _decimalFormatter.Format(input);
            }
        }

        private global::System.Object? FormatCarpark(global::System.Decimal? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _decimalFormatter.Format(input);
            }
        }

        private global::System.Object? FormatLandSize(global::System.Decimal? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _decimalFormatter.Format(input);
            }
        }

        private global::System.Object? FormatPropertyType(global::PropManagerSite.GraphQL.PropertyTypes? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _propertyTypesFormatter.Format(input);
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class EditPropertyInput : global::PropManagerSite.GraphQL.State.IEditPropertyInputInfo, global::System.IEquatable<EditPropertyInput>
    {
        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((EditPropertyInput)obj);
        }

        public virtual global::System.Boolean Equals(EditPropertyInput? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && Address.Equals(other.Address) && Name.Equals(other.Name) && StampDuty == other.StampDuty && PurchasePrice == other.PurchasePrice && RegistrationTransferFee == other.RegistrationTransferFee && Rooms == other.Rooms && Bathrooms == other.Bathrooms && Carpark == other.Carpark && LandSize == other.LandSize && ((PropertyType is null && other.PropertyType is null) || PropertyType != null && PropertyType.Equals(other.PropertyType));
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                hash ^= 397 * Address.GetHashCode();
                hash ^= 397 * Name.GetHashCode();
                if (StampDuty != null)
                {
                    hash ^= 397 * StampDuty.GetHashCode();
                }

                if (PurchasePrice != null)
                {
                    hash ^= 397 * PurchasePrice.GetHashCode();
                }

                if (RegistrationTransferFee != null)
                {
                    hash ^= 397 * RegistrationTransferFee.GetHashCode();
                }

                if (Rooms != null)
                {
                    hash ^= 397 * Rooms.GetHashCode();
                }

                if (Bathrooms != null)
                {
                    hash ^= 397 * Bathrooms.GetHashCode();
                }

                if (Carpark != null)
                {
                    hash ^= 397 * Carpark.GetHashCode();
                }

                if (LandSize != null)
                {
                    hash ^= 397 * LandSize.GetHashCode();
                }

                if (PropertyType != null)
                {
                    hash ^= 397 * PropertyType.GetHashCode();
                }

                return hash;
            }
        }

        private global::System.Guid _value_id;
        private global::System.Boolean _set_id;
        private global::System.String _value_address = default !;
        private global::System.Boolean _set_address;
        private global::System.String _value_name = default !;
        private global::System.Boolean _set_name;
        private global::System.Decimal? _value_stampDuty;
        private global::System.Boolean _set_stampDuty;
        private global::System.Decimal? _value_purchasePrice;
        private global::System.Boolean _set_purchasePrice;
        private global::System.Decimal? _value_registrationTransferFee;
        private global::System.Boolean _set_registrationTransferFee;
        private global::System.Decimal? _value_rooms;
        private global::System.Boolean _set_rooms;
        private global::System.Decimal? _value_bathrooms;
        private global::System.Boolean _set_bathrooms;
        private global::System.Decimal? _value_carpark;
        private global::System.Boolean _set_carpark;
        private global::System.Decimal? _value_landSize;
        private global::System.Boolean _set_landSize;
        private global::PropManagerSite.GraphQL.PropertyTypes? _value_propertyType;
        private global::System.Boolean _set_propertyType;
        public global::System.Guid Id
        {
            get => _value_id;
            set
            {
                _set_id = true;
                _value_id = value;
            }
        }

        global::System.Boolean global::PropManagerSite.GraphQL.State.IEditPropertyInputInfo.IsIdSet => _set_id;
        public global::System.String Address
        {
            get => _value_address;
            set
            {
                _set_address = true;
                _value_address = value;
            }
        }

        global::System.Boolean global::PropManagerSite.GraphQL.State.IEditPropertyInputInfo.IsAddressSet => _set_address;
        public global::System.String Name
        {
            get => _value_name;
            set
            {
                _set_name = true;
                _value_name = value;
            }
        }

        global::System.Boolean global::PropManagerSite.GraphQL.State.IEditPropertyInputInfo.IsNameSet => _set_name;
        public global::System.Decimal? StampDuty
        {
            get => _value_stampDuty;
            set
            {
                _set_stampDuty = true;
                _value_stampDuty = value;
            }
        }

        global::System.Boolean global::PropManagerSite.GraphQL.State.IEditPropertyInputInfo.IsStampDutySet => _set_stampDuty;
        public global::System.Decimal? PurchasePrice
        {
            get => _value_purchasePrice;
            set
            {
                _set_purchasePrice = true;
                _value_purchasePrice = value;
            }
        }

        global::System.Boolean global::PropManagerSite.GraphQL.State.IEditPropertyInputInfo.IsPurchasePriceSet => _set_purchasePrice;
        public global::System.Decimal? RegistrationTransferFee
        {
            get => _value_registrationTransferFee;
            set
            {
                _set_registrationTransferFee = true;
                _value_registrationTransferFee = value;
            }
        }

        global::System.Boolean global::PropManagerSite.GraphQL.State.IEditPropertyInputInfo.IsRegistrationTransferFeeSet => _set_registrationTransferFee;
        public global::System.Decimal? Rooms
        {
            get => _value_rooms;
            set
            {
                _set_rooms = true;
                _value_rooms = value;
            }
        }

        global::System.Boolean global::PropManagerSite.GraphQL.State.IEditPropertyInputInfo.IsRoomsSet => _set_rooms;
        public global::System.Decimal? Bathrooms
        {
            get => _value_bathrooms;
            set
            {
                _set_bathrooms = true;
                _value_bathrooms = value;
            }
        }

        global::System.Boolean global::PropManagerSite.GraphQL.State.IEditPropertyInputInfo.IsBathroomsSet => _set_bathrooms;
        public global::System.Decimal? Carpark
        {
            get => _value_carpark;
            set
            {
                _set_carpark = true;
                _value_carpark = value;
            }
        }

        global::System.Boolean global::PropManagerSite.GraphQL.State.IEditPropertyInputInfo.IsCarparkSet => _set_carpark;
        public global::System.Decimal? LandSize
        {
            get => _value_landSize;
            set
            {
                _set_landSize = true;
                _value_landSize = value;
            }
        }

        global::System.Boolean global::PropManagerSite.GraphQL.State.IEditPropertyInputInfo.IsLandSizeSet => _set_landSize;
        public global::PropManagerSite.GraphQL.PropertyTypes? PropertyType
        {
            get => _value_propertyType;
            set
            {
                _set_propertyType = true;
                _value_propertyType = value;
            }
        }

        global::System.Boolean global::PropManagerSite.GraphQL.State.IEditPropertyInputInfo.IsPropertyTypeSet => _set_propertyType;
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class DeletePropertyInputInputValueFormatter : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _uUIDFormatter = default !;
        public global::System.String TypeName => "DeletePropertyInput";
        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _uUIDFormatter = serializerResolver.GetInputValueFormatter("UUID");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            var input = runtimeValue as global::PropManagerSite.GraphQL.DeletePropertyInput;
            var inputInfo = runtimeValue as global::PropManagerSite.GraphQL.State.IDeletePropertyInputInfo;
            if (input is null || inputInfo is null)
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            var fields = new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>>();
            if (inputInfo.IsIdSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("id", FormatId(input.Id)));
            }

            return fields;
        }

        private global::System.Object? FormatId(global::System.Guid input)
        {
            return _uUIDFormatter.Format(input);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class DeletePropertyInput : global::PropManagerSite.GraphQL.State.IDeletePropertyInputInfo, global::System.IEquatable<DeletePropertyInput>
    {
        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((DeletePropertyInput)obj);
        }

        public virtual global::System.Boolean Equals(DeletePropertyInput? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id));
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                return hash;
            }
        }

        private global::System.Guid _value_id;
        private global::System.Boolean _set_id;
        public global::System.Guid Id
        {
            get => _value_id;
            set
            {
                _set_id = true;
                _value_id = value;
            }
        }

        global::System.Boolean global::PropManagerSite.GraphQL.State.IDeletePropertyInputInfo.IsIdSet => _set_id;
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public enum LoanTypes
    {
        InterestOnly,
        PrincipalAndInterest
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class LoanTypesSerializer : global::StrawberryShake.Serialization.IInputValueFormatter, global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, LoanTypes>
    {
        public global::System.String TypeName => "LoanTypes";
        public LoanTypes Parse(global::System.String serializedValue)
        {
            return serializedValue switch
            {
                "INTEREST_ONLY" => LoanTypes.InterestOnly,
                "PRINCIPAL_AND_INTEREST" => LoanTypes.PrincipalAndInterest,
                _ => throw new global::StrawberryShake.GraphQLClientException()};
        }

        public global::System.Object Format(global::System.Object? runtimeValue)
        {
            return runtimeValue switch
            {
                LoanTypes.InterestOnly => "INTEREST_ONLY",
                LoanTypes.PrincipalAndInterest => "PRINCIPAL_AND_INTEREST",
                _ => throw new global::StrawberryShake.GraphQLClientException()};
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public enum PropertyTypes
    {
        Unit,
        House,
        TownHouse
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class PropertyTypesSerializer : global::StrawberryShake.Serialization.IInputValueFormatter, global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, PropertyTypes>
    {
        public global::System.String TypeName => "PropertyTypes";
        public PropertyTypes Parse(global::System.String serializedValue)
        {
            return serializedValue switch
            {
                "UNIT" => PropertyTypes.Unit,
                "HOUSE" => PropertyTypes.House,
                "TOWN_HOUSE" => PropertyTypes.TownHouse,
                _ => throw new global::StrawberryShake.GraphQLClientException()};
        }

        public global::System.Object Format(global::System.Object? runtimeValue)
        {
            return runtimeValue switch
            {
                PropertyTypes.Unit => "UNIT",
                PropertyTypes.House => "HOUSE",
                PropertyTypes.TownHouse => "TOWN_HOUSE",
                _ => throw new global::StrawberryShake.GraphQLClientException()};
        }
    }

    /// <summary>
    /// Represents the operation service of the EditExpense GraphQL operation
    /// <code>
    /// mutation EditExpense($data: EditExpenseInput!) {
    ///   editExpense(input: $data) {
    ///     __typename
    ///     expense {
    ///       __typename
    ///       id
    ///       ... on Expense {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class EditExpenseMutationDocument : global::StrawberryShake.IDocument
    {
        private EditExpenseMutationDocument()
        {
        }

        public static EditExpenseMutationDocument Instance { get; } = new EditExpenseMutationDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Mutation;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x45, 0x64, 0x69, 0x74, 0x45, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x28, 0x24, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x20, 0x45, 0x64, 0x69, 0x74, 0x45, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x65, 0x64, 0x69, 0x74, 0x45, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x28, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x3a, 0x20, 0x24, 0x64, 0x61, 0x74, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x65, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x45, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "eaa29b70bf4725b806bcad7c20dfe698");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the EditExpense GraphQL operation
    /// <code>
    /// mutation EditExpense($data: EditExpenseInput!) {
    ///   editExpense(input: $data) {
    ///     __typename
    ///     expense {
    ///       __typename
    ///       id
    ///       ... on Expense {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class EditExpenseMutation : global::PropManagerSite.GraphQL.IEditExpenseMutation
    {
        private readonly global::StrawberryShake.IOperationExecutor<IEditExpenseResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _editExpenseInputFormatter;
        public EditExpenseMutation(global::StrawberryShake.IOperationExecutor<IEditExpenseResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _editExpenseInputFormatter = serializerResolver.GetInputValueFormatter("EditExpenseInput");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IEditExpenseResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IEditExpenseResult>> ExecuteAsync(global::PropManagerSite.GraphQL.EditExpenseInput data, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(data);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IEditExpenseResult>> Watch(global::PropManagerSite.GraphQL.EditExpenseInput data, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(data);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::PropManagerSite.GraphQL.EditExpenseInput data)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("data", FormatData(data));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: EditExpenseMutationDocument.Instance.Hash.Value, name: "EditExpense", document: EditExpenseMutationDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatData(global::PropManagerSite.GraphQL.EditExpenseInput value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _editExpenseInputFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the EditExpense GraphQL operation
    /// <code>
    /// mutation EditExpense($data: EditExpenseInput!) {
    ///   editExpense(input: $data) {
    ///     __typename
    ///     expense {
    ///       __typename
    ///       id
    ///       ... on Expense {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface IEditExpenseMutation : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IEditExpenseResult>> ExecuteAsync(global::PropManagerSite.GraphQL.EditExpenseInput data, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IEditExpenseResult>> Watch(global::PropManagerSite.GraphQL.EditExpenseInput data, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the AddExpense GraphQL operation
    /// <code>
    /// mutation AddExpense($data: AddExpenseInput!) {
    ///   addExpense(input: $data) {
    ///     __typename
    ///     expense {
    ///       __typename
    ///       id
    ///       ... on Expense {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class AddExpenseMutationDocument : global::StrawberryShake.IDocument
    {
        private AddExpenseMutationDocument()
        {
        }

        public static AddExpenseMutationDocument Instance { get; } = new AddExpenseMutationDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Mutation;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x41, 0x64, 0x64, 0x45, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x28, 0x24, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x20, 0x41, 0x64, 0x64, 0x45, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x61, 0x64, 0x64, 0x45, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x28, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x3a, 0x20, 0x24, 0x64, 0x61, 0x74, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x65, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x45, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "661a222e8aacc20b37d383e0342f5622");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the AddExpense GraphQL operation
    /// <code>
    /// mutation AddExpense($data: AddExpenseInput!) {
    ///   addExpense(input: $data) {
    ///     __typename
    ///     expense {
    ///       __typename
    ///       id
    ///       ... on Expense {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class AddExpenseMutation : global::PropManagerSite.GraphQL.IAddExpenseMutation
    {
        private readonly global::StrawberryShake.IOperationExecutor<IAddExpenseResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _addExpenseInputFormatter;
        public AddExpenseMutation(global::StrawberryShake.IOperationExecutor<IAddExpenseResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _addExpenseInputFormatter = serializerResolver.GetInputValueFormatter("AddExpenseInput");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IAddExpenseResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IAddExpenseResult>> ExecuteAsync(global::PropManagerSite.GraphQL.AddExpenseInput data, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(data);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IAddExpenseResult>> Watch(global::PropManagerSite.GraphQL.AddExpenseInput data, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(data);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::PropManagerSite.GraphQL.AddExpenseInput data)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("data", FormatData(data));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: AddExpenseMutationDocument.Instance.Hash.Value, name: "AddExpense", document: AddExpenseMutationDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatData(global::PropManagerSite.GraphQL.AddExpenseInput value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _addExpenseInputFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the AddExpense GraphQL operation
    /// <code>
    /// mutation AddExpense($data: AddExpenseInput!) {
    ///   addExpense(input: $data) {
    ///     __typename
    ///     expense {
    ///       __typename
    ///       id
    ///       ... on Expense {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface IAddExpenseMutation : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IAddExpenseResult>> ExecuteAsync(global::PropManagerSite.GraphQL.AddExpenseInput data, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IAddExpenseResult>> Watch(global::PropManagerSite.GraphQL.AddExpenseInput data, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the DeleteExpense GraphQL operation
    /// <code>
    /// mutation DeleteExpense($data: DeleteExpenseInput!) {
    ///   deleteExpense(input: $data) {
    ///     __typename
    ///     boolean
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class DeleteExpenseMutationDocument : global::StrawberryShake.IDocument
    {
        private DeleteExpenseMutationDocument()
        {
        }

        public static DeleteExpenseMutationDocument Instance { get; } = new DeleteExpenseMutationDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Mutation;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x28, 0x24, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x20, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x28, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x3a, 0x20, 0x24, 0x64, 0x61, 0x74, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "bf183f1306139e86f118c85c25d31ed6");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the DeleteExpense GraphQL operation
    /// <code>
    /// mutation DeleteExpense($data: DeleteExpenseInput!) {
    ///   deleteExpense(input: $data) {
    ///     __typename
    ///     boolean
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class DeleteExpenseMutation : global::PropManagerSite.GraphQL.IDeleteExpenseMutation
    {
        private readonly global::StrawberryShake.IOperationExecutor<IDeleteExpenseResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _deleteExpenseInputFormatter;
        public DeleteExpenseMutation(global::StrawberryShake.IOperationExecutor<IDeleteExpenseResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _deleteExpenseInputFormatter = serializerResolver.GetInputValueFormatter("DeleteExpenseInput");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IDeleteExpenseResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IDeleteExpenseResult>> ExecuteAsync(global::PropManagerSite.GraphQL.DeleteExpenseInput data, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(data);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IDeleteExpenseResult>> Watch(global::PropManagerSite.GraphQL.DeleteExpenseInput data, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(data);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::PropManagerSite.GraphQL.DeleteExpenseInput data)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("data", FormatData(data));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: DeleteExpenseMutationDocument.Instance.Hash.Value, name: "DeleteExpense", document: DeleteExpenseMutationDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatData(global::PropManagerSite.GraphQL.DeleteExpenseInput value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _deleteExpenseInputFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the DeleteExpense GraphQL operation
    /// <code>
    /// mutation DeleteExpense($data: DeleteExpenseInput!) {
    ///   deleteExpense(input: $data) {
    ///     __typename
    ///     boolean
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface IDeleteExpenseMutation : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IDeleteExpenseResult>> ExecuteAsync(global::PropManagerSite.GraphQL.DeleteExpenseInput data, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IDeleteExpenseResult>> Watch(global::PropManagerSite.GraphQL.DeleteExpenseInput data, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the AddLoan GraphQL operation
    /// <code>
    /// mutation AddLoan($data: AddLoanInput!) {
    ///   addLoan(input: $data) {
    ///     __typename
    ///     loan {
    ///       __typename
    ///       id
    ///       ... on Loan {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class AddLoanMutationDocument : global::StrawberryShake.IDocument
    {
        private AddLoanMutationDocument()
        {
        }

        public static AddLoanMutationDocument Instance { get; } = new AddLoanMutationDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Mutation;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x41, 0x64, 0x64, 0x4c, 0x6f, 0x61, 0x6e, 0x28, 0x24, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x20, 0x41, 0x64, 0x64, 0x4c, 0x6f, 0x61, 0x6e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x61, 0x64, 0x64, 0x4c, 0x6f, 0x61, 0x6e, 0x28, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x3a, 0x20, 0x24, 0x64, 0x61, 0x74, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6c, 0x6f, 0x61, 0x6e, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x4c, 0x6f, 0x61, 0x6e, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "ce292500b8725c0db1607d7f3b8e466e");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the AddLoan GraphQL operation
    /// <code>
    /// mutation AddLoan($data: AddLoanInput!) {
    ///   addLoan(input: $data) {
    ///     __typename
    ///     loan {
    ///       __typename
    ///       id
    ///       ... on Loan {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class AddLoanMutation : global::PropManagerSite.GraphQL.IAddLoanMutation
    {
        private readonly global::StrawberryShake.IOperationExecutor<IAddLoanResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _addLoanInputFormatter;
        public AddLoanMutation(global::StrawberryShake.IOperationExecutor<IAddLoanResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _addLoanInputFormatter = serializerResolver.GetInputValueFormatter("AddLoanInput");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IAddLoanResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IAddLoanResult>> ExecuteAsync(global::PropManagerSite.GraphQL.AddLoanInput data, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(data);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IAddLoanResult>> Watch(global::PropManagerSite.GraphQL.AddLoanInput data, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(data);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::PropManagerSite.GraphQL.AddLoanInput data)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("data", FormatData(data));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: AddLoanMutationDocument.Instance.Hash.Value, name: "AddLoan", document: AddLoanMutationDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatData(global::PropManagerSite.GraphQL.AddLoanInput value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _addLoanInputFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the AddLoan GraphQL operation
    /// <code>
    /// mutation AddLoan($data: AddLoanInput!) {
    ///   addLoan(input: $data) {
    ///     __typename
    ///     loan {
    ///       __typename
    ///       id
    ///       ... on Loan {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface IAddLoanMutation : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IAddLoanResult>> ExecuteAsync(global::PropManagerSite.GraphQL.AddLoanInput data, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IAddLoanResult>> Watch(global::PropManagerSite.GraphQL.AddLoanInput data, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the EddLoan GraphQL operation
    /// <code>
    /// mutation EddLoan($data: EditLoanInput!) {
    ///   editLoan(input: $data) {
    ///     __typename
    ///     loan {
    ///       __typename
    ///       id
    ///       ... on Loan {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class EddLoanMutationDocument : global::StrawberryShake.IDocument
    {
        private EddLoanMutationDocument()
        {
        }

        public static EddLoanMutationDocument Instance { get; } = new EddLoanMutationDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Mutation;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x45, 0x64, 0x64, 0x4c, 0x6f, 0x61, 0x6e, 0x28, 0x24, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x20, 0x45, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x61, 0x6e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x65, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x61, 0x6e, 0x28, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x3a, 0x20, 0x24, 0x64, 0x61, 0x74, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6c, 0x6f, 0x61, 0x6e, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x4c, 0x6f, 0x61, 0x6e, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "3da127f555e098dc11118f014a8f64e4");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the EddLoan GraphQL operation
    /// <code>
    /// mutation EddLoan($data: EditLoanInput!) {
    ///   editLoan(input: $data) {
    ///     __typename
    ///     loan {
    ///       __typename
    ///       id
    ///       ... on Loan {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class EddLoanMutation : global::PropManagerSite.GraphQL.IEddLoanMutation
    {
        private readonly global::StrawberryShake.IOperationExecutor<IEddLoanResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _editLoanInputFormatter;
        public EddLoanMutation(global::StrawberryShake.IOperationExecutor<IEddLoanResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _editLoanInputFormatter = serializerResolver.GetInputValueFormatter("EditLoanInput");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IEddLoanResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IEddLoanResult>> ExecuteAsync(global::PropManagerSite.GraphQL.EditLoanInput data, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(data);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IEddLoanResult>> Watch(global::PropManagerSite.GraphQL.EditLoanInput data, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(data);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::PropManagerSite.GraphQL.EditLoanInput data)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("data", FormatData(data));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: EddLoanMutationDocument.Instance.Hash.Value, name: "EddLoan", document: EddLoanMutationDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatData(global::PropManagerSite.GraphQL.EditLoanInput value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _editLoanInputFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the EddLoan GraphQL operation
    /// <code>
    /// mutation EddLoan($data: EditLoanInput!) {
    ///   editLoan(input: $data) {
    ///     __typename
    ///     loan {
    ///       __typename
    ///       id
    ///       ... on Loan {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface IEddLoanMutation : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IEddLoanResult>> ExecuteAsync(global::PropManagerSite.GraphQL.EditLoanInput data, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IEddLoanResult>> Watch(global::PropManagerSite.GraphQL.EditLoanInput data, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the DeleteLoan GraphQL operation
    /// <code>
    /// mutation DeleteLoan($data: DeleteLoanInput!) {
    ///   deleteLoan(input: $data) {
    ///     __typename
    ///     boolean
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class DeleteLoanMutationDocument : global::StrawberryShake.IDocument
    {
        private DeleteLoanMutationDocument()
        {
        }

        public static DeleteLoanMutationDocument Instance { get; } = new DeleteLoanMutationDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Mutation;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x6f, 0x61, 0x6e, 0x28, 0x24, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x20, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x6f, 0x61, 0x6e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x6f, 0x61, 0x6e, 0x28, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x3a, 0x20, 0x24, 0x64, 0x61, 0x74, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "5a4bb408066776471393b6a6a0686420");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the DeleteLoan GraphQL operation
    /// <code>
    /// mutation DeleteLoan($data: DeleteLoanInput!) {
    ///   deleteLoan(input: $data) {
    ///     __typename
    ///     boolean
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class DeleteLoanMutation : global::PropManagerSite.GraphQL.IDeleteLoanMutation
    {
        private readonly global::StrawberryShake.IOperationExecutor<IDeleteLoanResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _deleteLoanInputFormatter;
        public DeleteLoanMutation(global::StrawberryShake.IOperationExecutor<IDeleteLoanResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _deleteLoanInputFormatter = serializerResolver.GetInputValueFormatter("DeleteLoanInput");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IDeleteLoanResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IDeleteLoanResult>> ExecuteAsync(global::PropManagerSite.GraphQL.DeleteLoanInput data, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(data);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IDeleteLoanResult>> Watch(global::PropManagerSite.GraphQL.DeleteLoanInput data, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(data);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::PropManagerSite.GraphQL.DeleteLoanInput data)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("data", FormatData(data));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: DeleteLoanMutationDocument.Instance.Hash.Value, name: "DeleteLoan", document: DeleteLoanMutationDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatData(global::PropManagerSite.GraphQL.DeleteLoanInput value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _deleteLoanInputFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the DeleteLoan GraphQL operation
    /// <code>
    /// mutation DeleteLoan($data: DeleteLoanInput!) {
    ///   deleteLoan(input: $data) {
    ///     __typename
    ///     boolean
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface IDeleteLoanMutation : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IDeleteLoanResult>> ExecuteAsync(global::PropManagerSite.GraphQL.DeleteLoanInput data, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IDeleteLoanResult>> Watch(global::PropManagerSite.GraphQL.DeleteLoanInput data, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the CreateProperty GraphQL operation
    /// <code>
    /// mutation CreateProperty($data: AddPropertyInput!) {
    ///   addProperty(input: $data) {
    ///     __typename
    ///     property {
    ///       __typename
    ///       id
    ///       ... on Property {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class CreatePropertyMutationDocument : global::StrawberryShake.IDocument
    {
        private CreatePropertyMutationDocument()
        {
        }

        public static CreatePropertyMutationDocument Instance { get; } = new CreatePropertyMutationDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Mutation;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x28, 0x24, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x20, 0x41, 0x64, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x61, 0x64, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x28, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x3a, 0x20, 0x24, 0x64, 0x61, 0x74, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "c115c084f81f51bea311728ea41869fe");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the CreateProperty GraphQL operation
    /// <code>
    /// mutation CreateProperty($data: AddPropertyInput!) {
    ///   addProperty(input: $data) {
    ///     __typename
    ///     property {
    ///       __typename
    ///       id
    ///       ... on Property {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class CreatePropertyMutation : global::PropManagerSite.GraphQL.ICreatePropertyMutation
    {
        private readonly global::StrawberryShake.IOperationExecutor<ICreatePropertyResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _addPropertyInputFormatter;
        public CreatePropertyMutation(global::StrawberryShake.IOperationExecutor<ICreatePropertyResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _addPropertyInputFormatter = serializerResolver.GetInputValueFormatter("AddPropertyInput");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(ICreatePropertyResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<ICreatePropertyResult>> ExecuteAsync(global::PropManagerSite.GraphQL.AddPropertyInput data, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(data);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<ICreatePropertyResult>> Watch(global::PropManagerSite.GraphQL.AddPropertyInput data, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(data);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::PropManagerSite.GraphQL.AddPropertyInput data)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("data", FormatData(data));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: CreatePropertyMutationDocument.Instance.Hash.Value, name: "CreateProperty", document: CreatePropertyMutationDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatData(global::PropManagerSite.GraphQL.AddPropertyInput value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _addPropertyInputFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the CreateProperty GraphQL operation
    /// <code>
    /// mutation CreateProperty($data: AddPropertyInput!) {
    ///   addProperty(input: $data) {
    ///     __typename
    ///     property {
    ///       __typename
    ///       id
    ///       ... on Property {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface ICreatePropertyMutation : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<ICreatePropertyResult>> ExecuteAsync(global::PropManagerSite.GraphQL.AddPropertyInput data, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<ICreatePropertyResult>> Watch(global::PropManagerSite.GraphQL.AddPropertyInput data, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the EditProperty GraphQL operation
    /// <code>
    /// mutation EditProperty($data: EditPropertyInput!) {
    ///   editProperty(input: $data) {
    ///     __typename
    ///     property {
    ///       __typename
    ///       ... propertyDetails
    ///       ... on Property {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// 
    /// fragment propertyDetails on Property {
    ///   id
    ///   name
    ///   purchasePrice
    ///   registrationTransferFee
    ///   rooms
    ///   bathrooms
    ///   landSize
    ///   address
    ///   propertyType
    ///   stampDuty
    ///   carpark
    ///   loans {
    ///     __typename
    ///     ... loan
    ///     ... on Loan {
    ///       id
    ///     }
    ///   }
    ///   expenses {
    ///     __typename
    ///     ... expense
    ///     ... on Expense {
    ///       id
    ///     }
    ///   }
    /// }
    /// 
    /// fragment loan on Loan {
    ///   id
    ///   lenderName
    ///   amount
    ///   interest
    ///   lMI
    ///   loanType
    ///   years
    ///   dateOfLoan
    ///   property {
    ///     __typename
    ///     id
    ///     name
    ///     ... on Property {
    ///       id
    ///     }
    ///   }
    /// }
    /// 
    /// fragment expense on Expense {
    ///   id
    ///   title
    ///   description
    ///   price
    ///   totalDeductable
    ///   propertyId
    ///   expenseDate
    ///   property {
    ///     __typename
    ///     id
    ///     ... on Property {
    ///       id
    ///     }
    ///   }
    ///   deleted
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class EditPropertyMutationDocument : global::StrawberryShake.IDocument
    {
        private EditPropertyMutationDocument()
        {
        }

        public static EditPropertyMutationDocument Instance { get; } = new EditPropertyMutationDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Mutation;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x45, 0x64, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x28, 0x24, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x20, 0x45, 0x64, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x65, 0x64, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x28, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x3a, 0x20, 0x24, 0x64, 0x61, 0x74, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x20, 0x6f, 0x6e, 0x20, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x20, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x46, 0x65, 0x65, 0x20, 0x72, 0x6f, 0x6f, 0x6d, 0x73, 0x20, 0x62, 0x61, 0x74, 0x68, 0x72, 0x6f, 0x6f, 0x6d, 0x73, 0x20, 0x6c, 0x61, 0x6e, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x20, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x20, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x20, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x44, 0x75, 0x74, 0x79, 0x20, 0x63, 0x61, 0x72, 0x70, 0x61, 0x72, 0x6b, 0x20, 0x6c, 0x6f, 0x61, 0x6e, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6c, 0x6f, 0x61, 0x6e, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x4c, 0x6f, 0x61, 0x6e, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x65, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x65, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x45, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x6c, 0x6f, 0x61, 0x6e, 0x20, 0x6f, 0x6e, 0x20, 0x4c, 0x6f, 0x61, 0x6e, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x6c, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x20, 0x6c, 0x4d, 0x49, 0x20, 0x6c, 0x6f, 0x61, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x20, 0x79, 0x65, 0x61, 0x72, 0x73, 0x20, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x66, 0x4c, 0x6f, 0x61, 0x6e, 0x20, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x65, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x20, 0x6f, 0x6e, 0x20, 0x45, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x20, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x70, 0x72, 0x69, 0x63, 0x65, 0x20, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x65, 0x64, 0x75, 0x63, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x49, 0x64, 0x20, 0x65, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x65, 0x20, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "2dcc8bc58d8c70a0d25c26588a4c7787");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the EditProperty GraphQL operation
    /// <code>
    /// mutation EditProperty($data: EditPropertyInput!) {
    ///   editProperty(input: $data) {
    ///     __typename
    ///     property {
    ///       __typename
    ///       ... propertyDetails
    ///       ... on Property {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// 
    /// fragment propertyDetails on Property {
    ///   id
    ///   name
    ///   purchasePrice
    ///   registrationTransferFee
    ///   rooms
    ///   bathrooms
    ///   landSize
    ///   address
    ///   propertyType
    ///   stampDuty
    ///   carpark
    ///   loans {
    ///     __typename
    ///     ... loan
    ///     ... on Loan {
    ///       id
    ///     }
    ///   }
    ///   expenses {
    ///     __typename
    ///     ... expense
    ///     ... on Expense {
    ///       id
    ///     }
    ///   }
    /// }
    /// 
    /// fragment loan on Loan {
    ///   id
    ///   lenderName
    ///   amount
    ///   interest
    ///   lMI
    ///   loanType
    ///   years
    ///   dateOfLoan
    ///   property {
    ///     __typename
    ///     id
    ///     name
    ///     ... on Property {
    ///       id
    ///     }
    ///   }
    /// }
    /// 
    /// fragment expense on Expense {
    ///   id
    ///   title
    ///   description
    ///   price
    ///   totalDeductable
    ///   propertyId
    ///   expenseDate
    ///   property {
    ///     __typename
    ///     id
    ///     ... on Property {
    ///       id
    ///     }
    ///   }
    ///   deleted
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class EditPropertyMutation : global::PropManagerSite.GraphQL.IEditPropertyMutation
    {
        private readonly global::StrawberryShake.IOperationExecutor<IEditPropertyResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _editPropertyInputFormatter;
        public EditPropertyMutation(global::StrawberryShake.IOperationExecutor<IEditPropertyResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _editPropertyInputFormatter = serializerResolver.GetInputValueFormatter("EditPropertyInput");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IEditPropertyResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IEditPropertyResult>> ExecuteAsync(global::PropManagerSite.GraphQL.EditPropertyInput data, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(data);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IEditPropertyResult>> Watch(global::PropManagerSite.GraphQL.EditPropertyInput data, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(data);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::PropManagerSite.GraphQL.EditPropertyInput data)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("data", FormatData(data));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: EditPropertyMutationDocument.Instance.Hash.Value, name: "EditProperty", document: EditPropertyMutationDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatData(global::PropManagerSite.GraphQL.EditPropertyInput value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _editPropertyInputFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the EditProperty GraphQL operation
    /// <code>
    /// mutation EditProperty($data: EditPropertyInput!) {
    ///   editProperty(input: $data) {
    ///     __typename
    ///     property {
    ///       __typename
    ///       ... propertyDetails
    ///       ... on Property {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// 
    /// fragment propertyDetails on Property {
    ///   id
    ///   name
    ///   purchasePrice
    ///   registrationTransferFee
    ///   rooms
    ///   bathrooms
    ///   landSize
    ///   address
    ///   propertyType
    ///   stampDuty
    ///   carpark
    ///   loans {
    ///     __typename
    ///     ... loan
    ///     ... on Loan {
    ///       id
    ///     }
    ///   }
    ///   expenses {
    ///     __typename
    ///     ... expense
    ///     ... on Expense {
    ///       id
    ///     }
    ///   }
    /// }
    /// 
    /// fragment loan on Loan {
    ///   id
    ///   lenderName
    ///   amount
    ///   interest
    ///   lMI
    ///   loanType
    ///   years
    ///   dateOfLoan
    ///   property {
    ///     __typename
    ///     id
    ///     name
    ///     ... on Property {
    ///       id
    ///     }
    ///   }
    /// }
    /// 
    /// fragment expense on Expense {
    ///   id
    ///   title
    ///   description
    ///   price
    ///   totalDeductable
    ///   propertyId
    ///   expenseDate
    ///   property {
    ///     __typename
    ///     id
    ///     ... on Property {
    ///       id
    ///     }
    ///   }
    ///   deleted
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface IEditPropertyMutation : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IEditPropertyResult>> ExecuteAsync(global::PropManagerSite.GraphQL.EditPropertyInput data, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IEditPropertyResult>> Watch(global::PropManagerSite.GraphQL.EditPropertyInput data, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the DeleteProperty GraphQL operation
    /// <code>
    /// mutation DeleteProperty($data: DeletePropertyInput!) {
    ///   deleteProperty(input: $data) {
    ///     __typename
    ///     boolean
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class DeletePropertyMutationDocument : global::StrawberryShake.IDocument
    {
        private DeletePropertyMutationDocument()
        {
        }

        public static DeletePropertyMutationDocument Instance { get; } = new DeletePropertyMutationDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Mutation;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x28, 0x24, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x20, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x28, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x3a, 0x20, 0x24, 0x64, 0x61, 0x74, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "36b5421957e36ec93455487759bd8e52");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the DeleteProperty GraphQL operation
    /// <code>
    /// mutation DeleteProperty($data: DeletePropertyInput!) {
    ///   deleteProperty(input: $data) {
    ///     __typename
    ///     boolean
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class DeletePropertyMutation : global::PropManagerSite.GraphQL.IDeletePropertyMutation
    {
        private readonly global::StrawberryShake.IOperationExecutor<IDeletePropertyResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _deletePropertyInputFormatter;
        public DeletePropertyMutation(global::StrawberryShake.IOperationExecutor<IDeletePropertyResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _deletePropertyInputFormatter = serializerResolver.GetInputValueFormatter("DeletePropertyInput");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IDeletePropertyResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IDeletePropertyResult>> ExecuteAsync(global::PropManagerSite.GraphQL.DeletePropertyInput data, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(data);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IDeletePropertyResult>> Watch(global::PropManagerSite.GraphQL.DeletePropertyInput data, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(data);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::PropManagerSite.GraphQL.DeletePropertyInput data)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("data", FormatData(data));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: DeletePropertyMutationDocument.Instance.Hash.Value, name: "DeleteProperty", document: DeletePropertyMutationDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatData(global::PropManagerSite.GraphQL.DeletePropertyInput value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _deletePropertyInputFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the DeleteProperty GraphQL operation
    /// <code>
    /// mutation DeleteProperty($data: DeletePropertyInput!) {
    ///   deleteProperty(input: $data) {
    ///     __typename
    ///     boolean
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface IDeletePropertyMutation : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IDeletePropertyResult>> ExecuteAsync(global::PropManagerSite.GraphQL.DeletePropertyInput data, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IDeletePropertyResult>> Watch(global::PropManagerSite.GraphQL.DeletePropertyInput data, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the GetProperties GraphQL operation
    /// <code>
    /// query GetProperties {
    ///   properties {
    ///     __typename
    ///     ... propertySearchDetails
    ///     ... on Property {
    ///       id
    ///     }
    ///   }
    /// }
    /// 
    /// fragment propertySearchDetails on Property {
    ///   id
    ///   name
    ///   address
    ///   rooms
    ///   bathrooms
    ///   carpark
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class GetPropertiesQueryDocument : global::StrawberryShake.IDocument
    {
        private GetPropertiesQueryDocument()
        {
        }

        public static GetPropertiesQueryDocument Instance { get; } = new GetPropertiesQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x20, 0x7b, 0x20, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x20, 0x6f, 0x6e, 0x20, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x20, 0x72, 0x6f, 0x6f, 0x6d, 0x73, 0x20, 0x62, 0x61, 0x74, 0x68, 0x72, 0x6f, 0x6f, 0x6d, 0x73, 0x20, 0x63, 0x61, 0x72, 0x70, 0x61, 0x72, 0x6b, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "69fc55dc607578def752f81cbaf21759");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetProperties GraphQL operation
    /// <code>
    /// query GetProperties {
    ///   properties {
    ///     __typename
    ///     ... propertySearchDetails
    ///     ... on Property {
    ///       id
    ///     }
    ///   }
    /// }
    /// 
    /// fragment propertySearchDetails on Property {
    ///   id
    ///   name
    ///   address
    ///   rooms
    ///   bathrooms
    ///   carpark
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class GetPropertiesQuery : global::PropManagerSite.GraphQL.IGetPropertiesQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetPropertiesResult> _operationExecutor;
        public GetPropertiesQuery(global::StrawberryShake.IOperationExecutor<IGetPropertiesResult> operationExecutor)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetPropertiesResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetPropertiesResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest();
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetPropertiesResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest();
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest()
        {
            return CreateRequest(null);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetPropertiesQueryDocument.Instance.Hash.Value, name: "GetProperties", document: GetPropertiesQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest();
        }
    }

    /// <summary>
    /// Represents the operation service of the GetProperties GraphQL operation
    /// <code>
    /// query GetProperties {
    ///   properties {
    ///     __typename
    ///     ... propertySearchDetails
    ///     ... on Property {
    ///       id
    ///     }
    ///   }
    /// }
    /// 
    /// fragment propertySearchDetails on Property {
    ///   id
    ///   name
    ///   address
    ///   rooms
    ///   bathrooms
    ///   carpark
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface IGetPropertiesQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetPropertiesResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetPropertiesResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the GetProperty GraphQL operation
    /// <code>
    /// query GetProperty($propertyId: UUID) {
    ///   properties(where: { id: { eq: $propertyId } }) {
    ///     __typename
    ///     ... propertyDetails
    ///     ... on Property {
    ///       id
    ///     }
    ///   }
    /// }
    /// 
    /// fragment propertyDetails on Property {
    ///   id
    ///   name
    ///   purchasePrice
    ///   registrationTransferFee
    ///   rooms
    ///   bathrooms
    ///   landSize
    ///   address
    ///   propertyType
    ///   stampDuty
    ///   carpark
    ///   loans {
    ///     __typename
    ///     ... loan
    ///     ... on Loan {
    ///       id
    ///     }
    ///   }
    ///   expenses {
    ///     __typename
    ///     ... expense
    ///     ... on Expense {
    ///       id
    ///     }
    ///   }
    /// }
    /// 
    /// fragment loan on Loan {
    ///   id
    ///   lenderName
    ///   amount
    ///   interest
    ///   lMI
    ///   loanType
    ///   years
    ///   dateOfLoan
    ///   property {
    ///     __typename
    ///     id
    ///     name
    ///     ... on Property {
    ///       id
    ///     }
    ///   }
    /// }
    /// 
    /// fragment expense on Expense {
    ///   id
    ///   title
    ///   description
    ///   price
    ///   totalDeductable
    ///   propertyId
    ///   expenseDate
    ///   property {
    ///     __typename
    ///     id
    ///     ... on Property {
    ///       id
    ///     }
    ///   }
    ///   deleted
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class GetPropertyQueryDocument : global::StrawberryShake.IDocument
    {
        private GetPropertyQueryDocument()
        {
        }

        public static GetPropertyQueryDocument Instance { get; } = new GetPropertyQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x28, 0x24, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x49, 0x64, 0x3a, 0x20, 0x55, 0x55, 0x49, 0x44, 0x29, 0x20, 0x7b, 0x20, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x28, 0x77, 0x68, 0x65, 0x72, 0x65, 0x3a, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x3a, 0x20, 0x7b, 0x20, 0x65, 0x71, 0x3a, 0x20, 0x24, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x49, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x20, 0x6f, 0x6e, 0x20, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x20, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x46, 0x65, 0x65, 0x20, 0x72, 0x6f, 0x6f, 0x6d, 0x73, 0x20, 0x62, 0x61, 0x74, 0x68, 0x72, 0x6f, 0x6f, 0x6d, 0x73, 0x20, 0x6c, 0x61, 0x6e, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x20, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x20, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x20, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x44, 0x75, 0x74, 0x79, 0x20, 0x63, 0x61, 0x72, 0x70, 0x61, 0x72, 0x6b, 0x20, 0x6c, 0x6f, 0x61, 0x6e, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6c, 0x6f, 0x61, 0x6e, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x4c, 0x6f, 0x61, 0x6e, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x65, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x65, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x45, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x6c, 0x6f, 0x61, 0x6e, 0x20, 0x6f, 0x6e, 0x20, 0x4c, 0x6f, 0x61, 0x6e, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x6c, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x20, 0x6c, 0x4d, 0x49, 0x20, 0x6c, 0x6f, 0x61, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x20, 0x79, 0x65, 0x61, 0x72, 0x73, 0x20, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x66, 0x4c, 0x6f, 0x61, 0x6e, 0x20, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x65, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x20, 0x6f, 0x6e, 0x20, 0x45, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x20, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x70, 0x72, 0x69, 0x63, 0x65, 0x20, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x65, 0x64, 0x75, 0x63, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x49, 0x64, 0x20, 0x65, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x65, 0x20, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "111fac70ed5db51c17fb291ce2536536");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetProperty GraphQL operation
    /// <code>
    /// query GetProperty($propertyId: UUID) {
    ///   properties(where: { id: { eq: $propertyId } }) {
    ///     __typename
    ///     ... propertyDetails
    ///     ... on Property {
    ///       id
    ///     }
    ///   }
    /// }
    /// 
    /// fragment propertyDetails on Property {
    ///   id
    ///   name
    ///   purchasePrice
    ///   registrationTransferFee
    ///   rooms
    ///   bathrooms
    ///   landSize
    ///   address
    ///   propertyType
    ///   stampDuty
    ///   carpark
    ///   loans {
    ///     __typename
    ///     ... loan
    ///     ... on Loan {
    ///       id
    ///     }
    ///   }
    ///   expenses {
    ///     __typename
    ///     ... expense
    ///     ... on Expense {
    ///       id
    ///     }
    ///   }
    /// }
    /// 
    /// fragment loan on Loan {
    ///   id
    ///   lenderName
    ///   amount
    ///   interest
    ///   lMI
    ///   loanType
    ///   years
    ///   dateOfLoan
    ///   property {
    ///     __typename
    ///     id
    ///     name
    ///     ... on Property {
    ///       id
    ///     }
    ///   }
    /// }
    /// 
    /// fragment expense on Expense {
    ///   id
    ///   title
    ///   description
    ///   price
    ///   totalDeductable
    ///   propertyId
    ///   expenseDate
    ///   property {
    ///     __typename
    ///     id
    ///     ... on Property {
    ///       id
    ///     }
    ///   }
    ///   deleted
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class GetPropertyQuery : global::PropManagerSite.GraphQL.IGetPropertyQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetPropertyResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _uUIDFormatter;
        public GetPropertyQuery(global::StrawberryShake.IOperationExecutor<IGetPropertyResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _uUIDFormatter = serializerResolver.GetInputValueFormatter("UUID");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetPropertyResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetPropertyResult>> ExecuteAsync(global::System.Guid? propertyId, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(propertyId);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetPropertyResult>> Watch(global::System.Guid? propertyId, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(propertyId);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Guid? propertyId)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("propertyId", FormatPropertyId(propertyId));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetPropertyQueryDocument.Instance.Hash.Value, name: "GetProperty", document: GetPropertyQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatPropertyId(global::System.Guid? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                return _uUIDFormatter.Format(value);
            }
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the GetProperty GraphQL operation
    /// <code>
    /// query GetProperty($propertyId: UUID) {
    ///   properties(where: { id: { eq: $propertyId } }) {
    ///     __typename
    ///     ... propertyDetails
    ///     ... on Property {
    ///       id
    ///     }
    ///   }
    /// }
    /// 
    /// fragment propertyDetails on Property {
    ///   id
    ///   name
    ///   purchasePrice
    ///   registrationTransferFee
    ///   rooms
    ///   bathrooms
    ///   landSize
    ///   address
    ///   propertyType
    ///   stampDuty
    ///   carpark
    ///   loans {
    ///     __typename
    ///     ... loan
    ///     ... on Loan {
    ///       id
    ///     }
    ///   }
    ///   expenses {
    ///     __typename
    ///     ... expense
    ///     ... on Expense {
    ///       id
    ///     }
    ///   }
    /// }
    /// 
    /// fragment loan on Loan {
    ///   id
    ///   lenderName
    ///   amount
    ///   interest
    ///   lMI
    ///   loanType
    ///   years
    ///   dateOfLoan
    ///   property {
    ///     __typename
    ///     id
    ///     name
    ///     ... on Property {
    ///       id
    ///     }
    ///   }
    /// }
    /// 
    /// fragment expense on Expense {
    ///   id
    ///   title
    ///   description
    ///   price
    ///   totalDeductable
    ///   propertyId
    ///   expenseDate
    ///   property {
    ///     __typename
    ///     id
    ///     ... on Property {
    ///       id
    ///     }
    ///   }
    ///   deleted
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface IGetPropertyQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetPropertyResult>> ExecuteAsync(global::System.Guid? propertyId, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetPropertyResult>> Watch(global::System.Guid? propertyId, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the GetLoan GraphQL operation
    /// <code>
    /// query GetLoan($loanId: UUID) {
    ///   loans(where: { id: { eq: $loanId } }) {
    ///     __typename
    ///     ... loan
    ///     ... on Loan {
    ///       id
    ///     }
    ///   }
    /// }
    /// 
    /// fragment loan on Loan {
    ///   id
    ///   lenderName
    ///   amount
    ///   interest
    ///   lMI
    ///   loanType
    ///   years
    ///   dateOfLoan
    ///   property {
    ///     __typename
    ///     id
    ///     name
    ///     ... on Property {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class GetLoanQueryDocument : global::StrawberryShake.IDocument
    {
        private GetLoanQueryDocument()
        {
        }

        public static GetLoanQueryDocument Instance { get; } = new GetLoanQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x61, 0x6e, 0x28, 0x24, 0x6c, 0x6f, 0x61, 0x6e, 0x49, 0x64, 0x3a, 0x20, 0x55, 0x55, 0x49, 0x44, 0x29, 0x20, 0x7b, 0x20, 0x6c, 0x6f, 0x61, 0x6e, 0x73, 0x28, 0x77, 0x68, 0x65, 0x72, 0x65, 0x3a, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x3a, 0x20, 0x7b, 0x20, 0x65, 0x71, 0x3a, 0x20, 0x24, 0x6c, 0x6f, 0x61, 0x6e, 0x49, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6c, 0x6f, 0x61, 0x6e, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x4c, 0x6f, 0x61, 0x6e, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x6c, 0x6f, 0x61, 0x6e, 0x20, 0x6f, 0x6e, 0x20, 0x4c, 0x6f, 0x61, 0x6e, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x6c, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x20, 0x6c, 0x4d, 0x49, 0x20, 0x6c, 0x6f, 0x61, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x20, 0x79, 0x65, 0x61, 0x72, 0x73, 0x20, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x66, 0x4c, 0x6f, 0x61, 0x6e, 0x20, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "b84614e8f0c544daa357f873ff10ba7c");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetLoan GraphQL operation
    /// <code>
    /// query GetLoan($loanId: UUID) {
    ///   loans(where: { id: { eq: $loanId } }) {
    ///     __typename
    ///     ... loan
    ///     ... on Loan {
    ///       id
    ///     }
    ///   }
    /// }
    /// 
    /// fragment loan on Loan {
    ///   id
    ///   lenderName
    ///   amount
    ///   interest
    ///   lMI
    ///   loanType
    ///   years
    ///   dateOfLoan
    ///   property {
    ///     __typename
    ///     id
    ///     name
    ///     ... on Property {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class GetLoanQuery : global::PropManagerSite.GraphQL.IGetLoanQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetLoanResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _uUIDFormatter;
        public GetLoanQuery(global::StrawberryShake.IOperationExecutor<IGetLoanResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _uUIDFormatter = serializerResolver.GetInputValueFormatter("UUID");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetLoanResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetLoanResult>> ExecuteAsync(global::System.Guid? loanId, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(loanId);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetLoanResult>> Watch(global::System.Guid? loanId, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(loanId);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Guid? loanId)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("loanId", FormatLoanId(loanId));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetLoanQueryDocument.Instance.Hash.Value, name: "GetLoan", document: GetLoanQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatLoanId(global::System.Guid? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                return _uUIDFormatter.Format(value);
            }
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the GetLoan GraphQL operation
    /// <code>
    /// query GetLoan($loanId: UUID) {
    ///   loans(where: { id: { eq: $loanId } }) {
    ///     __typename
    ///     ... loan
    ///     ... on Loan {
    ///       id
    ///     }
    ///   }
    /// }
    /// 
    /// fragment loan on Loan {
    ///   id
    ///   lenderName
    ///   amount
    ///   interest
    ///   lMI
    ///   loanType
    ///   years
    ///   dateOfLoan
    ///   property {
    ///     __typename
    ///     id
    ///     name
    ///     ... on Property {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface IGetLoanQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetLoanResult>> ExecuteAsync(global::System.Guid? loanId, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetLoanResult>> Watch(global::System.Guid? loanId, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the GetExpense GraphQL operation
    /// <code>
    /// query GetExpense($expenseId: UUID) {
    ///   expenses(where: { id: { eq: $expenseId } }) {
    ///     __typename
    ///     ... expense
    ///     ... on Expense {
    ///       id
    ///     }
    ///   }
    /// }
    /// 
    /// fragment expense on Expense {
    ///   id
    ///   title
    ///   description
    ///   price
    ///   totalDeductable
    ///   propertyId
    ///   expenseDate
    ///   property {
    ///     __typename
    ///     id
    ///     ... on Property {
    ///       id
    ///     }
    ///   }
    ///   deleted
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class GetExpenseQueryDocument : global::StrawberryShake.IDocument
    {
        private GetExpenseQueryDocument()
        {
        }

        public static GetExpenseQueryDocument Instance { get; } = new GetExpenseQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x65, 0x74, 0x45, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x28, 0x24, 0x65, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x49, 0x64, 0x3a, 0x20, 0x55, 0x55, 0x49, 0x44, 0x29, 0x20, 0x7b, 0x20, 0x65, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x28, 0x77, 0x68, 0x65, 0x72, 0x65, 0x3a, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x3a, 0x20, 0x7b, 0x20, 0x65, 0x71, 0x3a, 0x20, 0x24, 0x65, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x49, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x65, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x45, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x65, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x20, 0x6f, 0x6e, 0x20, 0x45, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x20, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x70, 0x72, 0x69, 0x63, 0x65, 0x20, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x65, 0x64, 0x75, 0x63, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x49, 0x64, 0x20, 0x65, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x65, 0x20, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "07ad8e42e6aa4af6d30e1efaf06bcf3f");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetExpense GraphQL operation
    /// <code>
    /// query GetExpense($expenseId: UUID) {
    ///   expenses(where: { id: { eq: $expenseId } }) {
    ///     __typename
    ///     ... expense
    ///     ... on Expense {
    ///       id
    ///     }
    ///   }
    /// }
    /// 
    /// fragment expense on Expense {
    ///   id
    ///   title
    ///   description
    ///   price
    ///   totalDeductable
    ///   propertyId
    ///   expenseDate
    ///   property {
    ///     __typename
    ///     id
    ///     ... on Property {
    ///       id
    ///     }
    ///   }
    ///   deleted
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class GetExpenseQuery : global::PropManagerSite.GraphQL.IGetExpenseQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetExpenseResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _uUIDFormatter;
        public GetExpenseQuery(global::StrawberryShake.IOperationExecutor<IGetExpenseResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _uUIDFormatter = serializerResolver.GetInputValueFormatter("UUID");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetExpenseResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetExpenseResult>> ExecuteAsync(global::System.Guid? expenseId, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(expenseId);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetExpenseResult>> Watch(global::System.Guid? expenseId, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(expenseId);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Guid? expenseId)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("expenseId", FormatExpenseId(expenseId));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetExpenseQueryDocument.Instance.Hash.Value, name: "GetExpense", document: GetExpenseQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatExpenseId(global::System.Guid? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                return _uUIDFormatter.Format(value);
            }
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the GetExpense GraphQL operation
    /// <code>
    /// query GetExpense($expenseId: UUID) {
    ///   expenses(where: { id: { eq: $expenseId } }) {
    ///     __typename
    ///     ... expense
    ///     ... on Expense {
    ///       id
    ///     }
    ///   }
    /// }
    /// 
    /// fragment expense on Expense {
    ///   id
    ///   title
    ///   description
    ///   price
    ///   totalDeductable
    ///   propertyId
    ///   expenseDate
    ///   property {
    ///     __typename
    ///     id
    ///     ... on Property {
    ///       id
    ///     }
    ///   }
    ///   deleted
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface IGetExpenseQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetExpenseResult>> ExecuteAsync(global::System.Guid? expenseId, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetExpenseResult>> Watch(global::System.Guid? expenseId, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the PropManagerSiteQL GraphQL client
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class PropManagerSiteQL : global::PropManagerSite.GraphQL.IPropManagerSiteQL
    {
        private readonly global::PropManagerSite.GraphQL.IEditExpenseMutation _editExpense;
        private readonly global::PropManagerSite.GraphQL.IAddExpenseMutation _addExpense;
        private readonly global::PropManagerSite.GraphQL.IDeleteExpenseMutation _deleteExpense;
        private readonly global::PropManagerSite.GraphQL.IAddLoanMutation _addLoan;
        private readonly global::PropManagerSite.GraphQL.IEddLoanMutation _eddLoan;
        private readonly global::PropManagerSite.GraphQL.IDeleteLoanMutation _deleteLoan;
        private readonly global::PropManagerSite.GraphQL.ICreatePropertyMutation _createProperty;
        private readonly global::PropManagerSite.GraphQL.IEditPropertyMutation _editProperty;
        private readonly global::PropManagerSite.GraphQL.IDeletePropertyMutation _deleteProperty;
        private readonly global::PropManagerSite.GraphQL.IGetPropertiesQuery _getProperties;
        private readonly global::PropManagerSite.GraphQL.IGetPropertyQuery _getProperty;
        private readonly global::PropManagerSite.GraphQL.IGetLoanQuery _getLoan;
        private readonly global::PropManagerSite.GraphQL.IGetExpenseQuery _getExpense;
        public PropManagerSiteQL(global::PropManagerSite.GraphQL.IEditExpenseMutation editExpense, global::PropManagerSite.GraphQL.IAddExpenseMutation addExpense, global::PropManagerSite.GraphQL.IDeleteExpenseMutation deleteExpense, global::PropManagerSite.GraphQL.IAddLoanMutation addLoan, global::PropManagerSite.GraphQL.IEddLoanMutation eddLoan, global::PropManagerSite.GraphQL.IDeleteLoanMutation deleteLoan, global::PropManagerSite.GraphQL.ICreatePropertyMutation createProperty, global::PropManagerSite.GraphQL.IEditPropertyMutation editProperty, global::PropManagerSite.GraphQL.IDeletePropertyMutation deleteProperty, global::PropManagerSite.GraphQL.IGetPropertiesQuery getProperties, global::PropManagerSite.GraphQL.IGetPropertyQuery getProperty, global::PropManagerSite.GraphQL.IGetLoanQuery getLoan, global::PropManagerSite.GraphQL.IGetExpenseQuery getExpense)
        {
            _editExpense = editExpense ?? throw new global::System.ArgumentNullException(nameof(editExpense));
            _addExpense = addExpense ?? throw new global::System.ArgumentNullException(nameof(addExpense));
            _deleteExpense = deleteExpense ?? throw new global::System.ArgumentNullException(nameof(deleteExpense));
            _addLoan = addLoan ?? throw new global::System.ArgumentNullException(nameof(addLoan));
            _eddLoan = eddLoan ?? throw new global::System.ArgumentNullException(nameof(eddLoan));
            _deleteLoan = deleteLoan ?? throw new global::System.ArgumentNullException(nameof(deleteLoan));
            _createProperty = createProperty ?? throw new global::System.ArgumentNullException(nameof(createProperty));
            _editProperty = editProperty ?? throw new global::System.ArgumentNullException(nameof(editProperty));
            _deleteProperty = deleteProperty ?? throw new global::System.ArgumentNullException(nameof(deleteProperty));
            _getProperties = getProperties ?? throw new global::System.ArgumentNullException(nameof(getProperties));
            _getProperty = getProperty ?? throw new global::System.ArgumentNullException(nameof(getProperty));
            _getLoan = getLoan ?? throw new global::System.ArgumentNullException(nameof(getLoan));
            _getExpense = getExpense ?? throw new global::System.ArgumentNullException(nameof(getExpense));
        }

        public static global::System.String ClientName => "PropManagerSiteQL";
        public global::PropManagerSite.GraphQL.IEditExpenseMutation EditExpense => _editExpense;
        public global::PropManagerSite.GraphQL.IAddExpenseMutation AddExpense => _addExpense;
        public global::PropManagerSite.GraphQL.IDeleteExpenseMutation DeleteExpense => _deleteExpense;
        public global::PropManagerSite.GraphQL.IAddLoanMutation AddLoan => _addLoan;
        public global::PropManagerSite.GraphQL.IEddLoanMutation EddLoan => _eddLoan;
        public global::PropManagerSite.GraphQL.IDeleteLoanMutation DeleteLoan => _deleteLoan;
        public global::PropManagerSite.GraphQL.ICreatePropertyMutation CreateProperty => _createProperty;
        public global::PropManagerSite.GraphQL.IEditPropertyMutation EditProperty => _editProperty;
        public global::PropManagerSite.GraphQL.IDeletePropertyMutation DeleteProperty => _deleteProperty;
        public global::PropManagerSite.GraphQL.IGetPropertiesQuery GetProperties => _getProperties;
        public global::PropManagerSite.GraphQL.IGetPropertyQuery GetProperty => _getProperty;
        public global::PropManagerSite.GraphQL.IGetLoanQuery GetLoan => _getLoan;
        public global::PropManagerSite.GraphQL.IGetExpenseQuery GetExpense => _getExpense;
    }

    /// <summary>
    /// Represents the PropManagerSiteQL GraphQL client
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface IPropManagerSiteQL
    {
        global::PropManagerSite.GraphQL.IEditExpenseMutation EditExpense { get; }

        global::PropManagerSite.GraphQL.IAddExpenseMutation AddExpense { get; }

        global::PropManagerSite.GraphQL.IDeleteExpenseMutation DeleteExpense { get; }

        global::PropManagerSite.GraphQL.IAddLoanMutation AddLoan { get; }

        global::PropManagerSite.GraphQL.IEddLoanMutation EddLoan { get; }

        global::PropManagerSite.GraphQL.IDeleteLoanMutation DeleteLoan { get; }

        global::PropManagerSite.GraphQL.ICreatePropertyMutation CreateProperty { get; }

        global::PropManagerSite.GraphQL.IEditPropertyMutation EditProperty { get; }

        global::PropManagerSite.GraphQL.IDeletePropertyMutation DeleteProperty { get; }

        global::PropManagerSite.GraphQL.IGetPropertiesQuery GetProperties { get; }

        global::PropManagerSite.GraphQL.IGetPropertyQuery GetProperty { get; }

        global::PropManagerSite.GraphQL.IGetLoanQuery GetLoan { get; }

        global::PropManagerSite.GraphQL.IGetExpenseQuery GetExpense { get; }
    }
}

namespace PropManagerSite.GraphQL.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class ExpenseEntity
    {
        public ExpenseEntity(global::System.Guid id = default !, global::System.String title = default !, global::System.String? description = default !, global::System.Decimal? price = default !, global::System.Decimal totalDeductable = default !, global::System.Guid propertyId = default !, global::System.DateTimeOffset expenseDate = default !, global::StrawberryShake.EntityId property = default !, global::System.Boolean deleted = default !)
        {
            Id = id;
            Title = title;
            Description = description;
            Price = price;
            TotalDeductable = totalDeductable;
            PropertyId = propertyId;
            ExpenseDate = expenseDate;
            Property = property;
            Deleted = deleted;
        }

        public global::System.Guid Id { get; }

        public global::System.String Title { get; }

        public global::System.String? Description { get; }

        public global::System.Decimal? Price { get; }

        public global::System.Decimal TotalDeductable { get; }

        public global::System.Guid PropertyId { get; }

        public global::System.DateTimeOffset ExpenseDate { get; }

        public global::StrawberryShake.EntityId Property { get; }

        public global::System.Boolean Deleted { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class LoanEntity
    {
        public LoanEntity(global::System.Guid id = default !, global::System.String lenderName = default !, global::System.Decimal? amount = default !, global::System.Decimal? interest = default !, global::System.Decimal? lMI = default !, global::PropManagerSite.GraphQL.LoanTypes loanType = default !, global::System.Int32? years = default !, global::System.DateTimeOffset? dateOfLoan = default !, global::StrawberryShake.EntityId property = default !)
        {
            Id = id;
            LenderName = lenderName;
            Amount = amount;
            Interest = interest;
            LMI = lMI;
            LoanType = loanType;
            Years = years;
            DateOfLoan = dateOfLoan;
            Property = property;
        }

        public global::System.Guid Id { get; }

        public global::System.String LenderName { get; }

        public global::System.Decimal? Amount { get; }

        public global::System.Decimal? Interest { get; }

        public global::System.Decimal? LMI { get; }

        public global::PropManagerSite.GraphQL.LoanTypes LoanType { get; }

        public global::System.Int32? Years { get; }

        public global::System.DateTimeOffset? DateOfLoan { get; }

        public global::StrawberryShake.EntityId Property { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class PropertyEntity
    {
        public PropertyEntity(global::System.Guid id = default !, global::System.String? name = default !, global::System.Decimal? purchasePrice = default !, global::System.Decimal? registrationTransferFee = default !, global::System.Decimal? rooms = default !, global::System.Decimal? bathrooms = default !, global::System.Decimal? landSize = default !, global::System.String address = default !, global::PropManagerSite.GraphQL.PropertyTypes propertyType = default !, global::System.Decimal? stampDuty = default !, global::System.Decimal? carpark = default !, global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> loans = default !, global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> expenses = default !)
        {
            Id = id;
            Name = name;
            PurchasePrice = purchasePrice;
            RegistrationTransferFee = registrationTransferFee;
            Rooms = rooms;
            Bathrooms = bathrooms;
            LandSize = landSize;
            Address = address;
            PropertyType = propertyType;
            StampDuty = stampDuty;
            Carpark = carpark;
            Loans = loans;
            Expenses = expenses;
        }

        public global::System.Guid Id { get; }

        public global::System.String? Name { get; }

        public global::System.Decimal? PurchasePrice { get; }

        public global::System.Decimal? RegistrationTransferFee { get; }

        public global::System.Decimal? Rooms { get; }

        public global::System.Decimal? Bathrooms { get; }

        public global::System.Decimal? LandSize { get; }

        public global::System.String Address { get; }

        public global::PropManagerSite.GraphQL.PropertyTypes PropertyType { get; }

        public global::System.Decimal? StampDuty { get; }

        public global::System.Decimal? Carpark { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> Loans { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> Expenses { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class EditExpenseResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::PropManagerSite.GraphQL.EditExpenseResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::PropManagerSite.GraphQL.State.ExpenseEntity, EditExpense_EditExpense_Expense_Expense> _editExpense_EditExpense_Expense_ExpenseFromExpenseEntityMapper;
        public EditExpenseResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::PropManagerSite.GraphQL.State.ExpenseEntity, EditExpense_EditExpense_Expense_Expense> editExpense_EditExpense_Expense_ExpenseFromExpenseEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _editExpense_EditExpense_Expense_ExpenseFromExpenseEntityMapper = editExpense_EditExpense_Expense_ExpenseFromExpenseEntityMapper ?? throw new global::System.ArgumentNullException(nameof(editExpense_EditExpense_Expense_ExpenseFromExpenseEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::PropManagerSite.GraphQL.IEditExpenseResult);
        public EditExpenseResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is EditExpenseResultInfo info)
            {
                return new EditExpenseResult(MapNonNullableIEditExpense_EditExpense(info.EditExpense, snapshot));
            }

            throw new global::System.ArgumentException("EditExpenseResultInfo expected.");
        }

        private global::PropManagerSite.GraphQL.IEditExpense_EditExpense MapNonNullableIEditExpense_EditExpense(global::PropManagerSite.GraphQL.State.EditExpensePayloadData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IEditExpense_EditExpense returnValue = default !;
            if (data.__typename.Equals("EditExpensePayload", global::System.StringComparison.Ordinal))
            {
                returnValue = new EditExpense_EditExpense_EditExpensePayload(MapIEditExpense_EditExpense_Expense(data.Expense, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::PropManagerSite.GraphQL.IEditExpense_EditExpense_Expense? MapIEditExpense_EditExpense_Expense(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("Expense", global::System.StringComparison.Ordinal))
            {
                return _editExpense_EditExpense_Expense_ExpenseFromExpenseEntityMapper.Map(snapshot.GetEntity<global::PropManagerSite.GraphQL.State.ExpenseEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class EditExpenseResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public EditExpenseResultInfo(global::PropManagerSite.GraphQL.State.EditExpensePayloadData editExpense, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            EditExpense = editExpense;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::PropManagerSite.GraphQL.State.EditExpensePayloadData EditExpense { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new EditExpenseResultInfo(EditExpense, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class EditExpense_EditExpense_Expense_ExpenseFromExpenseEntityMapper : global::StrawberryShake.IEntityMapper<global::PropManagerSite.GraphQL.State.ExpenseEntity, EditExpense_EditExpense_Expense_Expense>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public EditExpense_EditExpense_Expense_ExpenseFromExpenseEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public EditExpense_EditExpense_Expense_Expense Map(global::PropManagerSite.GraphQL.State.ExpenseEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new EditExpense_EditExpense_Expense_Expense(entity.Id);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class AddExpenseResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::PropManagerSite.GraphQL.AddExpenseResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::PropManagerSite.GraphQL.State.ExpenseEntity, AddExpense_AddExpense_Expense_Expense> _addExpense_AddExpense_Expense_ExpenseFromExpenseEntityMapper;
        public AddExpenseResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::PropManagerSite.GraphQL.State.ExpenseEntity, AddExpense_AddExpense_Expense_Expense> addExpense_AddExpense_Expense_ExpenseFromExpenseEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _addExpense_AddExpense_Expense_ExpenseFromExpenseEntityMapper = addExpense_AddExpense_Expense_ExpenseFromExpenseEntityMapper ?? throw new global::System.ArgumentNullException(nameof(addExpense_AddExpense_Expense_ExpenseFromExpenseEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::PropManagerSite.GraphQL.IAddExpenseResult);
        public AddExpenseResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is AddExpenseResultInfo info)
            {
                return new AddExpenseResult(MapNonNullableIAddExpense_AddExpense(info.AddExpense, snapshot));
            }

            throw new global::System.ArgumentException("AddExpenseResultInfo expected.");
        }

        private global::PropManagerSite.GraphQL.IAddExpense_AddExpense MapNonNullableIAddExpense_AddExpense(global::PropManagerSite.GraphQL.State.AddExpensePayloadData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IAddExpense_AddExpense returnValue = default !;
            if (data.__typename.Equals("AddExpensePayload", global::System.StringComparison.Ordinal))
            {
                returnValue = new AddExpense_AddExpense_AddExpensePayload(MapIAddExpense_AddExpense_Expense(data.Expense, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::PropManagerSite.GraphQL.IAddExpense_AddExpense_Expense? MapIAddExpense_AddExpense_Expense(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("Expense", global::System.StringComparison.Ordinal))
            {
                return _addExpense_AddExpense_Expense_ExpenseFromExpenseEntityMapper.Map(snapshot.GetEntity<global::PropManagerSite.GraphQL.State.ExpenseEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class AddExpenseResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public AddExpenseResultInfo(global::PropManagerSite.GraphQL.State.AddExpensePayloadData addExpense, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            AddExpense = addExpense;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::PropManagerSite.GraphQL.State.AddExpensePayloadData AddExpense { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new AddExpenseResultInfo(AddExpense, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class AddExpense_AddExpense_Expense_ExpenseFromExpenseEntityMapper : global::StrawberryShake.IEntityMapper<global::PropManagerSite.GraphQL.State.ExpenseEntity, AddExpense_AddExpense_Expense_Expense>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public AddExpense_AddExpense_Expense_ExpenseFromExpenseEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public AddExpense_AddExpense_Expense_Expense Map(global::PropManagerSite.GraphQL.State.ExpenseEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new AddExpense_AddExpense_Expense_Expense(entity.Id);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class DeleteExpenseResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::PropManagerSite.GraphQL.DeleteExpenseResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public DeleteExpenseResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::PropManagerSite.GraphQL.IDeleteExpenseResult);
        public DeleteExpenseResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is DeleteExpenseResultInfo info)
            {
                return new DeleteExpenseResult(MapNonNullableIDeleteExpense_DeleteExpense(info.DeleteExpense, snapshot));
            }

            throw new global::System.ArgumentException("DeleteExpenseResultInfo expected.");
        }

        private global::PropManagerSite.GraphQL.IDeleteExpense_DeleteExpense MapNonNullableIDeleteExpense_DeleteExpense(global::PropManagerSite.GraphQL.State.DeleteExpensePayloadData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IDeleteExpense_DeleteExpense returnValue = default !;
            if (data.__typename.Equals("DeleteExpensePayload", global::System.StringComparison.Ordinal))
            {
                returnValue = new DeleteExpense_DeleteExpense_DeleteExpensePayload(data.Boolean);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class DeleteExpenseResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public DeleteExpenseResultInfo(global::PropManagerSite.GraphQL.State.DeleteExpensePayloadData deleteExpense, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            DeleteExpense = deleteExpense;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::PropManagerSite.GraphQL.State.DeleteExpensePayloadData DeleteExpense { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new DeleteExpenseResultInfo(DeleteExpense, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class AddLoanResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::PropManagerSite.GraphQL.AddLoanResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::PropManagerSite.GraphQL.State.LoanEntity, AddLoan_AddLoan_Loan_Loan> _addLoan_AddLoan_Loan_LoanFromLoanEntityMapper;
        public AddLoanResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::PropManagerSite.GraphQL.State.LoanEntity, AddLoan_AddLoan_Loan_Loan> addLoan_AddLoan_Loan_LoanFromLoanEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _addLoan_AddLoan_Loan_LoanFromLoanEntityMapper = addLoan_AddLoan_Loan_LoanFromLoanEntityMapper ?? throw new global::System.ArgumentNullException(nameof(addLoan_AddLoan_Loan_LoanFromLoanEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::PropManagerSite.GraphQL.IAddLoanResult);
        public AddLoanResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is AddLoanResultInfo info)
            {
                return new AddLoanResult(MapNonNullableIAddLoan_AddLoan(info.AddLoan, snapshot));
            }

            throw new global::System.ArgumentException("AddLoanResultInfo expected.");
        }

        private global::PropManagerSite.GraphQL.IAddLoan_AddLoan MapNonNullableIAddLoan_AddLoan(global::PropManagerSite.GraphQL.State.AddLoanPayloadData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IAddLoan_AddLoan returnValue = default !;
            if (data.__typename.Equals("AddLoanPayload", global::System.StringComparison.Ordinal))
            {
                returnValue = new AddLoan_AddLoan_AddLoanPayload(MapIAddLoan_AddLoan_Loan(data.Loan, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::PropManagerSite.GraphQL.IAddLoan_AddLoan_Loan? MapIAddLoan_AddLoan_Loan(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("Loan", global::System.StringComparison.Ordinal))
            {
                return _addLoan_AddLoan_Loan_LoanFromLoanEntityMapper.Map(snapshot.GetEntity<global::PropManagerSite.GraphQL.State.LoanEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class AddLoanResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public AddLoanResultInfo(global::PropManagerSite.GraphQL.State.AddLoanPayloadData addLoan, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            AddLoan = addLoan;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::PropManagerSite.GraphQL.State.AddLoanPayloadData AddLoan { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new AddLoanResultInfo(AddLoan, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class AddLoan_AddLoan_Loan_LoanFromLoanEntityMapper : global::StrawberryShake.IEntityMapper<global::PropManagerSite.GraphQL.State.LoanEntity, AddLoan_AddLoan_Loan_Loan>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public AddLoan_AddLoan_Loan_LoanFromLoanEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public AddLoan_AddLoan_Loan_Loan Map(global::PropManagerSite.GraphQL.State.LoanEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new AddLoan_AddLoan_Loan_Loan(entity.Id);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class EddLoanResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::PropManagerSite.GraphQL.EddLoanResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::PropManagerSite.GraphQL.State.LoanEntity, EddLoan_EditLoan_Loan_Loan> _eddLoan_EditLoan_Loan_LoanFromLoanEntityMapper;
        public EddLoanResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::PropManagerSite.GraphQL.State.LoanEntity, EddLoan_EditLoan_Loan_Loan> eddLoan_EditLoan_Loan_LoanFromLoanEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _eddLoan_EditLoan_Loan_LoanFromLoanEntityMapper = eddLoan_EditLoan_Loan_LoanFromLoanEntityMapper ?? throw new global::System.ArgumentNullException(nameof(eddLoan_EditLoan_Loan_LoanFromLoanEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::PropManagerSite.GraphQL.IEddLoanResult);
        public EddLoanResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is EddLoanResultInfo info)
            {
                return new EddLoanResult(MapNonNullableIEddLoan_EditLoan(info.EditLoan, snapshot));
            }

            throw new global::System.ArgumentException("EddLoanResultInfo expected.");
        }

        private global::PropManagerSite.GraphQL.IEddLoan_EditLoan MapNonNullableIEddLoan_EditLoan(global::PropManagerSite.GraphQL.State.EditLoanPayloadData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IEddLoan_EditLoan returnValue = default !;
            if (data.__typename.Equals("EditLoanPayload", global::System.StringComparison.Ordinal))
            {
                returnValue = new EddLoan_EditLoan_EditLoanPayload(MapIEddLoan_EditLoan_Loan(data.Loan, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::PropManagerSite.GraphQL.IEddLoan_EditLoan_Loan? MapIEddLoan_EditLoan_Loan(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("Loan", global::System.StringComparison.Ordinal))
            {
                return _eddLoan_EditLoan_Loan_LoanFromLoanEntityMapper.Map(snapshot.GetEntity<global::PropManagerSite.GraphQL.State.LoanEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class EddLoanResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public EddLoanResultInfo(global::PropManagerSite.GraphQL.State.EditLoanPayloadData editLoan, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            EditLoan = editLoan;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::PropManagerSite.GraphQL.State.EditLoanPayloadData EditLoan { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new EddLoanResultInfo(EditLoan, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class EddLoan_EditLoan_Loan_LoanFromLoanEntityMapper : global::StrawberryShake.IEntityMapper<global::PropManagerSite.GraphQL.State.LoanEntity, EddLoan_EditLoan_Loan_Loan>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public EddLoan_EditLoan_Loan_LoanFromLoanEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public EddLoan_EditLoan_Loan_Loan Map(global::PropManagerSite.GraphQL.State.LoanEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new EddLoan_EditLoan_Loan_Loan(entity.Id);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class DeleteLoanResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::PropManagerSite.GraphQL.DeleteLoanResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public DeleteLoanResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::PropManagerSite.GraphQL.IDeleteLoanResult);
        public DeleteLoanResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is DeleteLoanResultInfo info)
            {
                return new DeleteLoanResult(MapNonNullableIDeleteLoan_DeleteLoan(info.DeleteLoan, snapshot));
            }

            throw new global::System.ArgumentException("DeleteLoanResultInfo expected.");
        }

        private global::PropManagerSite.GraphQL.IDeleteLoan_DeleteLoan MapNonNullableIDeleteLoan_DeleteLoan(global::PropManagerSite.GraphQL.State.DeleteLoanPayloadData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IDeleteLoan_DeleteLoan returnValue = default !;
            if (data.__typename.Equals("DeleteLoanPayload", global::System.StringComparison.Ordinal))
            {
                returnValue = new DeleteLoan_DeleteLoan_DeleteLoanPayload(data.Boolean);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class DeleteLoanResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public DeleteLoanResultInfo(global::PropManagerSite.GraphQL.State.DeleteLoanPayloadData deleteLoan, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            DeleteLoan = deleteLoan;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::PropManagerSite.GraphQL.State.DeleteLoanPayloadData DeleteLoan { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new DeleteLoanResultInfo(DeleteLoan, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class CreatePropertyResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::PropManagerSite.GraphQL.CreatePropertyResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::PropManagerSite.GraphQL.State.PropertyEntity, CreateProperty_AddProperty_Property_Property> _createProperty_AddProperty_Property_PropertyFromPropertyEntityMapper;
        public CreatePropertyResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::PropManagerSite.GraphQL.State.PropertyEntity, CreateProperty_AddProperty_Property_Property> createProperty_AddProperty_Property_PropertyFromPropertyEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _createProperty_AddProperty_Property_PropertyFromPropertyEntityMapper = createProperty_AddProperty_Property_PropertyFromPropertyEntityMapper ?? throw new global::System.ArgumentNullException(nameof(createProperty_AddProperty_Property_PropertyFromPropertyEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::PropManagerSite.GraphQL.ICreatePropertyResult);
        public CreatePropertyResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is CreatePropertyResultInfo info)
            {
                return new CreatePropertyResult(MapNonNullableICreateProperty_AddProperty(info.AddProperty, snapshot));
            }

            throw new global::System.ArgumentException("CreatePropertyResultInfo expected.");
        }

        private global::PropManagerSite.GraphQL.ICreateProperty_AddProperty MapNonNullableICreateProperty_AddProperty(global::PropManagerSite.GraphQL.State.AddPropertyPayloadData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            ICreateProperty_AddProperty returnValue = default !;
            if (data.__typename.Equals("AddPropertyPayload", global::System.StringComparison.Ordinal))
            {
                returnValue = new CreateProperty_AddProperty_AddPropertyPayload(MapICreateProperty_AddProperty_Property(data.Property, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::PropManagerSite.GraphQL.ICreateProperty_AddProperty_Property? MapICreateProperty_AddProperty_Property(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("Property", global::System.StringComparison.Ordinal))
            {
                return _createProperty_AddProperty_Property_PropertyFromPropertyEntityMapper.Map(snapshot.GetEntity<global::PropManagerSite.GraphQL.State.PropertyEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class CreatePropertyResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public CreatePropertyResultInfo(global::PropManagerSite.GraphQL.State.AddPropertyPayloadData addProperty, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            AddProperty = addProperty;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::PropManagerSite.GraphQL.State.AddPropertyPayloadData AddProperty { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new CreatePropertyResultInfo(AddProperty, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class CreateProperty_AddProperty_Property_PropertyFromPropertyEntityMapper : global::StrawberryShake.IEntityMapper<global::PropManagerSite.GraphQL.State.PropertyEntity, CreateProperty_AddProperty_Property_Property>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public CreateProperty_AddProperty_Property_PropertyFromPropertyEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public CreateProperty_AddProperty_Property_Property Map(global::PropManagerSite.GraphQL.State.PropertyEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new CreateProperty_AddProperty_Property_Property(entity.Id);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class EditPropertyResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::PropManagerSite.GraphQL.EditPropertyResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::PropManagerSite.GraphQL.State.PropertyEntity, EditProperty_EditProperty_Property_Property> _editProperty_EditProperty_Property_PropertyFromPropertyEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::PropManagerSite.GraphQL.State.LoanEntity, EditProperty_EditProperty_Property_Loans_Loan> _editProperty_EditProperty_Property_Loans_LoanFromLoanEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::PropManagerSite.GraphQL.State.PropertyEntity, EditProperty_EditProperty_Property_Loans_Property_Property> _editProperty_EditProperty_Property_Loans_Property_PropertyFromPropertyEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::PropManagerSite.GraphQL.State.ExpenseEntity, EditProperty_EditProperty_Property_Expenses_Expense> _editProperty_EditProperty_Property_Expenses_ExpenseFromExpenseEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::PropManagerSite.GraphQL.State.PropertyEntity, EditProperty_EditProperty_Property_Expenses_Property_Property> _editProperty_EditProperty_Property_Expenses_Property_PropertyFromPropertyEntityMapper;
        public EditPropertyResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::PropManagerSite.GraphQL.State.PropertyEntity, EditProperty_EditProperty_Property_Property> editProperty_EditProperty_Property_PropertyFromPropertyEntityMapper, global::StrawberryShake.IEntityMapper<global::PropManagerSite.GraphQL.State.LoanEntity, EditProperty_EditProperty_Property_Loans_Loan> editProperty_EditProperty_Property_Loans_LoanFromLoanEntityMapper, global::StrawberryShake.IEntityMapper<global::PropManagerSite.GraphQL.State.PropertyEntity, EditProperty_EditProperty_Property_Loans_Property_Property> editProperty_EditProperty_Property_Loans_Property_PropertyFromPropertyEntityMapper, global::StrawberryShake.IEntityMapper<global::PropManagerSite.GraphQL.State.ExpenseEntity, EditProperty_EditProperty_Property_Expenses_Expense> editProperty_EditProperty_Property_Expenses_ExpenseFromExpenseEntityMapper, global::StrawberryShake.IEntityMapper<global::PropManagerSite.GraphQL.State.PropertyEntity, EditProperty_EditProperty_Property_Expenses_Property_Property> editProperty_EditProperty_Property_Expenses_Property_PropertyFromPropertyEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _editProperty_EditProperty_Property_PropertyFromPropertyEntityMapper = editProperty_EditProperty_Property_PropertyFromPropertyEntityMapper ?? throw new global::System.ArgumentNullException(nameof(editProperty_EditProperty_Property_PropertyFromPropertyEntityMapper));
            _editProperty_EditProperty_Property_Loans_LoanFromLoanEntityMapper = editProperty_EditProperty_Property_Loans_LoanFromLoanEntityMapper ?? throw new global::System.ArgumentNullException(nameof(editProperty_EditProperty_Property_Loans_LoanFromLoanEntityMapper));
            _editProperty_EditProperty_Property_Loans_Property_PropertyFromPropertyEntityMapper = editProperty_EditProperty_Property_Loans_Property_PropertyFromPropertyEntityMapper ?? throw new global::System.ArgumentNullException(nameof(editProperty_EditProperty_Property_Loans_Property_PropertyFromPropertyEntityMapper));
            _editProperty_EditProperty_Property_Expenses_ExpenseFromExpenseEntityMapper = editProperty_EditProperty_Property_Expenses_ExpenseFromExpenseEntityMapper ?? throw new global::System.ArgumentNullException(nameof(editProperty_EditProperty_Property_Expenses_ExpenseFromExpenseEntityMapper));
            _editProperty_EditProperty_Property_Expenses_Property_PropertyFromPropertyEntityMapper = editProperty_EditProperty_Property_Expenses_Property_PropertyFromPropertyEntityMapper ?? throw new global::System.ArgumentNullException(nameof(editProperty_EditProperty_Property_Expenses_Property_PropertyFromPropertyEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::PropManagerSite.GraphQL.IEditPropertyResult);
        public EditPropertyResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is EditPropertyResultInfo info)
            {
                return new EditPropertyResult(MapNonNullableIEditProperty_EditProperty(info.EditProperty, snapshot));
            }

            throw new global::System.ArgumentException("EditPropertyResultInfo expected.");
        }

        private global::PropManagerSite.GraphQL.IEditProperty_EditProperty MapNonNullableIEditProperty_EditProperty(global::PropManagerSite.GraphQL.State.EditPropertyPayloadData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IEditProperty_EditProperty returnValue = default !;
            if (data.__typename.Equals("EditPropertyPayload", global::System.StringComparison.Ordinal))
            {
                returnValue = new EditProperty_EditProperty_EditPropertyPayload(MapIEditProperty_EditProperty_Property(data.Property, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::PropManagerSite.GraphQL.IEditProperty_EditProperty_Property? MapIEditProperty_EditProperty_Property(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("Property", global::System.StringComparison.Ordinal))
            {
                return _editProperty_EditProperty_Property_PropertyFromPropertyEntityMapper.Map(snapshot.GetEntity<global::PropManagerSite.GraphQL.State.PropertyEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::PropManagerSite.GraphQL.IEditProperty_EditProperty_Property_Loans> MapNonNullableIEditProperty_EditProperty_Property_LoansNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                throw new global::System.ArgumentNullException();
            }

            var loans = new global::System.Collections.Generic.List<global::PropManagerSite.GraphQL.IEditProperty_EditProperty_Property_Loans>();
            foreach (global::StrawberryShake.EntityId child in list)
            {
                loans.Add(MapNonNullableIEditProperty_EditProperty_Property_Loans(child, snapshot));
            }

            return loans;
        }

        private global::PropManagerSite.GraphQL.IEditProperty_EditProperty_Property_Loans MapNonNullableIEditProperty_EditProperty_Property_Loans(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("Loan", global::System.StringComparison.Ordinal))
            {
                return _editProperty_EditProperty_Property_Loans_LoanFromLoanEntityMapper.Map(snapshot.GetEntity<global::PropManagerSite.GraphQL.State.LoanEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::PropManagerSite.GraphQL.IEditProperty_EditProperty_Property_Loans_Property MapNonNullableIEditProperty_EditProperty_Property_Loans_Property(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("Property", global::System.StringComparison.Ordinal))
            {
                return _editProperty_EditProperty_Property_Loans_Property_PropertyFromPropertyEntityMapper.Map(snapshot.GetEntity<global::PropManagerSite.GraphQL.State.PropertyEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::PropManagerSite.GraphQL.IEditProperty_EditProperty_Property_Expenses> MapNonNullableIEditProperty_EditProperty_Property_ExpensesNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                throw new global::System.ArgumentNullException();
            }

            var expenses = new global::System.Collections.Generic.List<global::PropManagerSite.GraphQL.IEditProperty_EditProperty_Property_Expenses>();
            foreach (global::StrawberryShake.EntityId child in list)
            {
                expenses.Add(MapNonNullableIEditProperty_EditProperty_Property_Expenses(child, snapshot));
            }

            return expenses;
        }

        private global::PropManagerSite.GraphQL.IEditProperty_EditProperty_Property_Expenses MapNonNullableIEditProperty_EditProperty_Property_Expenses(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("Expense", global::System.StringComparison.Ordinal))
            {
                return _editProperty_EditProperty_Property_Expenses_ExpenseFromExpenseEntityMapper.Map(snapshot.GetEntity<global::PropManagerSite.GraphQL.State.ExpenseEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::PropManagerSite.GraphQL.IEditProperty_EditProperty_Property_Expenses_Property MapNonNullableIEditProperty_EditProperty_Property_Expenses_Property(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("Property", global::System.StringComparison.Ordinal))
            {
                return _editProperty_EditProperty_Property_Expenses_Property_PropertyFromPropertyEntityMapper.Map(snapshot.GetEntity<global::PropManagerSite.GraphQL.State.PropertyEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class EditPropertyResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public EditPropertyResultInfo(global::PropManagerSite.GraphQL.State.EditPropertyPayloadData editProperty, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            EditProperty = editProperty;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::PropManagerSite.GraphQL.State.EditPropertyPayloadData EditProperty { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new EditPropertyResultInfo(EditProperty, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class EditProperty_EditProperty_Property_PropertyFromPropertyEntityMapper : global::StrawberryShake.IEntityMapper<global::PropManagerSite.GraphQL.State.PropertyEntity, EditProperty_EditProperty_Property_Property>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::PropManagerSite.GraphQL.State.LoanEntity, EditProperty_EditProperty_Property_Loans_Loan> _editProperty_EditProperty_Property_Loans_LoanFromLoanEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::PropManagerSite.GraphQL.State.PropertyEntity, EditProperty_EditProperty_Property_Loans_Property_Property> _editProperty_EditProperty_Property_Loans_Property_PropertyFromPropertyEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::PropManagerSite.GraphQL.State.ExpenseEntity, EditProperty_EditProperty_Property_Expenses_Expense> _editProperty_EditProperty_Property_Expenses_ExpenseFromExpenseEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::PropManagerSite.GraphQL.State.PropertyEntity, EditProperty_EditProperty_Property_Expenses_Property_Property> _editProperty_EditProperty_Property_Expenses_Property_PropertyFromPropertyEntityMapper;
        public EditProperty_EditProperty_Property_PropertyFromPropertyEntityMapper(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::PropManagerSite.GraphQL.State.LoanEntity, EditProperty_EditProperty_Property_Loans_Loan> editProperty_EditProperty_Property_Loans_LoanFromLoanEntityMapper, global::StrawberryShake.IEntityMapper<global::PropManagerSite.GraphQL.State.PropertyEntity, EditProperty_EditProperty_Property_Loans_Property_Property> editProperty_EditProperty_Property_Loans_Property_PropertyFromPropertyEntityMapper, global::StrawberryShake.IEntityMapper<global::PropManagerSite.GraphQL.State.ExpenseEntity, EditProperty_EditProperty_Property_Expenses_Expense> editProperty_EditProperty_Property_Expenses_ExpenseFromExpenseEntityMapper, global::StrawberryShake.IEntityMapper<global::PropManagerSite.GraphQL.State.PropertyEntity, EditProperty_EditProperty_Property_Expenses_Property_Property> editProperty_EditProperty_Property_Expenses_Property_PropertyFromPropertyEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _editProperty_EditProperty_Property_Loans_LoanFromLoanEntityMapper = editProperty_EditProperty_Property_Loans_LoanFromLoanEntityMapper ?? throw new global::System.ArgumentNullException(nameof(editProperty_EditProperty_Property_Loans_LoanFromLoanEntityMapper));
            _editProperty_EditProperty_Property_Loans_Property_PropertyFromPropertyEntityMapper = editProperty_EditProperty_Property_Loans_Property_PropertyFromPropertyEntityMapper ?? throw new global::System.ArgumentNullException(nameof(editProperty_EditProperty_Property_Loans_Property_PropertyFromPropertyEntityMapper));
            _editProperty_EditProperty_Property_Expenses_ExpenseFromExpenseEntityMapper = editProperty_EditProperty_Property_Expenses_ExpenseFromExpenseEntityMapper ?? throw new global::System.ArgumentNullException(nameof(editProperty_EditProperty_Property_Expenses_ExpenseFromExpenseEntityMapper));
            _editProperty_EditProperty_Property_Expenses_Property_PropertyFromPropertyEntityMapper = editProperty_EditProperty_Property_Expenses_Property_PropertyFromPropertyEntityMapper ?? throw new global::System.ArgumentNullException(nameof(editProperty_EditProperty_Property_Expenses_Property_PropertyFromPropertyEntityMapper));
        }

        public EditProperty_EditProperty_Property_Property Map(global::PropManagerSite.GraphQL.State.PropertyEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new EditProperty_EditProperty_Property_Property(entity.Id, entity.Name, entity.PurchasePrice, entity.RegistrationTransferFee, entity.Rooms, entity.Bathrooms, entity.LandSize, entity.Address, entity.PropertyType, entity.StampDuty, entity.Carpark, MapNonNullableIEditProperty_EditProperty_Property_LoansNonNullableArray(entity.Loans, snapshot), MapNonNullableIEditProperty_EditProperty_Property_ExpensesNonNullableArray(entity.Expenses, snapshot));
        }

        private global::System.Collections.Generic.IReadOnlyList<global::PropManagerSite.GraphQL.IEditProperty_EditProperty_Property_Loans> MapNonNullableIEditProperty_EditProperty_Property_LoansNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                throw new global::System.ArgumentNullException();
            }

            var loans = new global::System.Collections.Generic.List<global::PropManagerSite.GraphQL.IEditProperty_EditProperty_Property_Loans>();
            foreach (global::StrawberryShake.EntityId child in list)
            {
                loans.Add(MapNonNullableIEditProperty_EditProperty_Property_Loans(child, snapshot));
            }

            return loans;
        }

        private global::PropManagerSite.GraphQL.IEditProperty_EditProperty_Property_Loans MapNonNullableIEditProperty_EditProperty_Property_Loans(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("Loan", global::System.StringComparison.Ordinal))
            {
                return _editProperty_EditProperty_Property_Loans_LoanFromLoanEntityMapper.Map(snapshot.GetEntity<global::PropManagerSite.GraphQL.State.LoanEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::PropManagerSite.GraphQL.IEditProperty_EditProperty_Property_Loans_Property MapNonNullableIEditProperty_EditProperty_Property_Loans_Property(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("Property", global::System.StringComparison.Ordinal))
            {
                return _editProperty_EditProperty_Property_Loans_Property_PropertyFromPropertyEntityMapper.Map(snapshot.GetEntity<global::PropManagerSite.GraphQL.State.PropertyEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::PropManagerSite.GraphQL.IEditProperty_EditProperty_Property_Expenses> MapNonNullableIEditProperty_EditProperty_Property_ExpensesNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                throw new global::System.ArgumentNullException();
            }

            var expenses = new global::System.Collections.Generic.List<global::PropManagerSite.GraphQL.IEditProperty_EditProperty_Property_Expenses>();
            foreach (global::StrawberryShake.EntityId child in list)
            {
                expenses.Add(MapNonNullableIEditProperty_EditProperty_Property_Expenses(child, snapshot));
            }

            return expenses;
        }

        private global::PropManagerSite.GraphQL.IEditProperty_EditProperty_Property_Expenses MapNonNullableIEditProperty_EditProperty_Property_Expenses(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("Expense", global::System.StringComparison.Ordinal))
            {
                return _editProperty_EditProperty_Property_Expenses_ExpenseFromExpenseEntityMapper.Map(snapshot.GetEntity<global::PropManagerSite.GraphQL.State.ExpenseEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::PropManagerSite.GraphQL.IEditProperty_EditProperty_Property_Expenses_Property MapNonNullableIEditProperty_EditProperty_Property_Expenses_Property(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("Property", global::System.StringComparison.Ordinal))
            {
                return _editProperty_EditProperty_Property_Expenses_Property_PropertyFromPropertyEntityMapper.Map(snapshot.GetEntity<global::PropManagerSite.GraphQL.State.PropertyEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class EditProperty_EditProperty_Property_Loans_LoanFromLoanEntityMapper : global::StrawberryShake.IEntityMapper<global::PropManagerSite.GraphQL.State.LoanEntity, EditProperty_EditProperty_Property_Loans_Loan>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::PropManagerSite.GraphQL.State.PropertyEntity, EditProperty_EditProperty_Property_Loans_Property_Property> _editProperty_EditProperty_Property_Loans_Property_PropertyFromPropertyEntityMapper;
        public EditProperty_EditProperty_Property_Loans_LoanFromLoanEntityMapper(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::PropManagerSite.GraphQL.State.PropertyEntity, EditProperty_EditProperty_Property_Loans_Property_Property> editProperty_EditProperty_Property_Loans_Property_PropertyFromPropertyEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _editProperty_EditProperty_Property_Loans_Property_PropertyFromPropertyEntityMapper = editProperty_EditProperty_Property_Loans_Property_PropertyFromPropertyEntityMapper ?? throw new global::System.ArgumentNullException(nameof(editProperty_EditProperty_Property_Loans_Property_PropertyFromPropertyEntityMapper));
        }

        public EditProperty_EditProperty_Property_Loans_Loan Map(global::PropManagerSite.GraphQL.State.LoanEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new EditProperty_EditProperty_Property_Loans_Loan(entity.Id, entity.LenderName, entity.Amount, entity.Interest, entity.LMI, entity.LoanType, entity.Years, entity.DateOfLoan, MapNonNullableIEditProperty_EditProperty_Property_Loans_Property(entity.Property, snapshot));
        }

        private global::PropManagerSite.GraphQL.IEditProperty_EditProperty_Property_Loans_Property MapNonNullableIEditProperty_EditProperty_Property_Loans_Property(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("Property", global::System.StringComparison.Ordinal))
            {
                return _editProperty_EditProperty_Property_Loans_Property_PropertyFromPropertyEntityMapper.Map(snapshot.GetEntity<global::PropManagerSite.GraphQL.State.PropertyEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class EditProperty_EditProperty_Property_Expenses_ExpenseFromExpenseEntityMapper : global::StrawberryShake.IEntityMapper<global::PropManagerSite.GraphQL.State.ExpenseEntity, EditProperty_EditProperty_Property_Expenses_Expense>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::PropManagerSite.GraphQL.State.PropertyEntity, EditProperty_EditProperty_Property_Expenses_Property_Property> _editProperty_EditProperty_Property_Expenses_Property_PropertyFromPropertyEntityMapper;
        public EditProperty_EditProperty_Property_Expenses_ExpenseFromExpenseEntityMapper(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::PropManagerSite.GraphQL.State.PropertyEntity, EditProperty_EditProperty_Property_Expenses_Property_Property> editProperty_EditProperty_Property_Expenses_Property_PropertyFromPropertyEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _editProperty_EditProperty_Property_Expenses_Property_PropertyFromPropertyEntityMapper = editProperty_EditProperty_Property_Expenses_Property_PropertyFromPropertyEntityMapper ?? throw new global::System.ArgumentNullException(nameof(editProperty_EditProperty_Property_Expenses_Property_PropertyFromPropertyEntityMapper));
        }

        public EditProperty_EditProperty_Property_Expenses_Expense Map(global::PropManagerSite.GraphQL.State.ExpenseEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new EditProperty_EditProperty_Property_Expenses_Expense(entity.Id, entity.Title, entity.Description, entity.Price, entity.TotalDeductable, entity.PropertyId, entity.ExpenseDate, MapNonNullableIEditProperty_EditProperty_Property_Expenses_Property(entity.Property, snapshot), entity.Deleted);
        }

        private global::PropManagerSite.GraphQL.IEditProperty_EditProperty_Property_Expenses_Property MapNonNullableIEditProperty_EditProperty_Property_Expenses_Property(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("Property", global::System.StringComparison.Ordinal))
            {
                return _editProperty_EditProperty_Property_Expenses_Property_PropertyFromPropertyEntityMapper.Map(snapshot.GetEntity<global::PropManagerSite.GraphQL.State.PropertyEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class EditProperty_EditProperty_Property_Loans_Property_PropertyFromPropertyEntityMapper : global::StrawberryShake.IEntityMapper<global::PropManagerSite.GraphQL.State.PropertyEntity, EditProperty_EditProperty_Property_Loans_Property_Property>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public EditProperty_EditProperty_Property_Loans_Property_PropertyFromPropertyEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public EditProperty_EditProperty_Property_Loans_Property_Property Map(global::PropManagerSite.GraphQL.State.PropertyEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new EditProperty_EditProperty_Property_Loans_Property_Property(entity.Id, entity.Name);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class EditProperty_EditProperty_Property_Expenses_Property_PropertyFromPropertyEntityMapper : global::StrawberryShake.IEntityMapper<global::PropManagerSite.GraphQL.State.PropertyEntity, EditProperty_EditProperty_Property_Expenses_Property_Property>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public EditProperty_EditProperty_Property_Expenses_Property_PropertyFromPropertyEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public EditProperty_EditProperty_Property_Expenses_Property_Property Map(global::PropManagerSite.GraphQL.State.PropertyEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new EditProperty_EditProperty_Property_Expenses_Property_Property(entity.Id);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class DeletePropertyResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::PropManagerSite.GraphQL.DeletePropertyResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public DeletePropertyResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::PropManagerSite.GraphQL.IDeletePropertyResult);
        public DeletePropertyResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is DeletePropertyResultInfo info)
            {
                return new DeletePropertyResult(MapNonNullableIDeleteProperty_DeleteProperty(info.DeleteProperty, snapshot));
            }

            throw new global::System.ArgumentException("DeletePropertyResultInfo expected.");
        }

        private global::PropManagerSite.GraphQL.IDeleteProperty_DeleteProperty MapNonNullableIDeleteProperty_DeleteProperty(global::PropManagerSite.GraphQL.State.DeletePropertyPayloadData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IDeleteProperty_DeleteProperty returnValue = default !;
            if (data.__typename.Equals("DeletePropertyPayload", global::System.StringComparison.Ordinal))
            {
                returnValue = new DeleteProperty_DeleteProperty_DeletePropertyPayload(data.Boolean);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class DeletePropertyResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public DeletePropertyResultInfo(global::PropManagerSite.GraphQL.State.DeletePropertyPayloadData deleteProperty, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            DeleteProperty = deleteProperty;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::PropManagerSite.GraphQL.State.DeletePropertyPayloadData DeleteProperty { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new DeletePropertyResultInfo(DeleteProperty, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class GetPropertiesResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::PropManagerSite.GraphQL.GetPropertiesResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::PropManagerSite.GraphQL.State.PropertyEntity, GetProperties_Properties_Property> _getProperties_Properties_PropertyFromPropertyEntityMapper;
        public GetPropertiesResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::PropManagerSite.GraphQL.State.PropertyEntity, GetProperties_Properties_Property> getProperties_Properties_PropertyFromPropertyEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getProperties_Properties_PropertyFromPropertyEntityMapper = getProperties_Properties_PropertyFromPropertyEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getProperties_Properties_PropertyFromPropertyEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::PropManagerSite.GraphQL.IGetPropertiesResult);
        public GetPropertiesResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetPropertiesResultInfo info)
            {
                return new GetPropertiesResult(MapNonNullableIGetProperties_PropertiesNonNullableArray(info.Properties, snapshot));
            }

            throw new global::System.ArgumentException("GetPropertiesResultInfo expected.");
        }

        private global::System.Collections.Generic.IReadOnlyList<global::PropManagerSite.GraphQL.IGetProperties_Properties> MapNonNullableIGetProperties_PropertiesNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                throw new global::System.ArgumentNullException();
            }

            var propertys = new global::System.Collections.Generic.List<global::PropManagerSite.GraphQL.IGetProperties_Properties>();
            foreach (global::StrawberryShake.EntityId child in list)
            {
                propertys.Add(MapNonNullableIGetProperties_Properties(child, snapshot));
            }

            return propertys;
        }

        private global::PropManagerSite.GraphQL.IGetProperties_Properties MapNonNullableIGetProperties_Properties(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("Property", global::System.StringComparison.Ordinal))
            {
                return _getProperties_Properties_PropertyFromPropertyEntityMapper.Map(snapshot.GetEntity<global::PropManagerSite.GraphQL.State.PropertyEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class GetPropertiesResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public GetPropertiesResultInfo(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> properties, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            Properties = properties;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> Properties { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetPropertiesResultInfo(Properties, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class GetProperties_Properties_PropertyFromPropertyEntityMapper : global::StrawberryShake.IEntityMapper<global::PropManagerSite.GraphQL.State.PropertyEntity, GetProperties_Properties_Property>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetProperties_Properties_PropertyFromPropertyEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetProperties_Properties_Property Map(global::PropManagerSite.GraphQL.State.PropertyEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetProperties_Properties_Property(entity.Id, entity.Name, entity.Address, entity.Rooms, entity.Bathrooms, entity.Carpark);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class GetPropertyResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::PropManagerSite.GraphQL.GetPropertyResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::PropManagerSite.GraphQL.State.PropertyEntity, GetProperty_Properties_Property> _getProperty_Properties_PropertyFromPropertyEntityMapper;
        public GetPropertyResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::PropManagerSite.GraphQL.State.PropertyEntity, GetProperty_Properties_Property> getProperty_Properties_PropertyFromPropertyEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getProperty_Properties_PropertyFromPropertyEntityMapper = getProperty_Properties_PropertyFromPropertyEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getProperty_Properties_PropertyFromPropertyEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::PropManagerSite.GraphQL.IGetPropertyResult);
        public GetPropertyResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetPropertyResultInfo info)
            {
                return new GetPropertyResult(MapNonNullableIGetProperty_PropertiesNonNullableArray(info.Properties, snapshot));
            }

            throw new global::System.ArgumentException("GetPropertyResultInfo expected.");
        }

        private global::System.Collections.Generic.IReadOnlyList<global::PropManagerSite.GraphQL.IGetProperty_Properties> MapNonNullableIGetProperty_PropertiesNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                throw new global::System.ArgumentNullException();
            }

            var propertys = new global::System.Collections.Generic.List<global::PropManagerSite.GraphQL.IGetProperty_Properties>();
            foreach (global::StrawberryShake.EntityId child in list)
            {
                propertys.Add(MapNonNullableIGetProperty_Properties(child, snapshot));
            }

            return propertys;
        }

        private global::PropManagerSite.GraphQL.IGetProperty_Properties MapNonNullableIGetProperty_Properties(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("Property", global::System.StringComparison.Ordinal))
            {
                return _getProperty_Properties_PropertyFromPropertyEntityMapper.Map(snapshot.GetEntity<global::PropManagerSite.GraphQL.State.PropertyEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class GetPropertyResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public GetPropertyResultInfo(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> properties, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            Properties = properties;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> Properties { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetPropertyResultInfo(Properties, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class GetProperty_Properties_PropertyFromPropertyEntityMapper : global::StrawberryShake.IEntityMapper<global::PropManagerSite.GraphQL.State.PropertyEntity, GetProperty_Properties_Property>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::PropManagerSite.GraphQL.State.LoanEntity, EditProperty_EditProperty_Property_Loans_Loan> _editProperty_EditProperty_Property_Loans_LoanFromLoanEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::PropManagerSite.GraphQL.State.PropertyEntity, EditProperty_EditProperty_Property_Loans_Property_Property> _editProperty_EditProperty_Property_Loans_Property_PropertyFromPropertyEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::PropManagerSite.GraphQL.State.ExpenseEntity, EditProperty_EditProperty_Property_Expenses_Expense> _editProperty_EditProperty_Property_Expenses_ExpenseFromExpenseEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::PropManagerSite.GraphQL.State.PropertyEntity, EditProperty_EditProperty_Property_Expenses_Property_Property> _editProperty_EditProperty_Property_Expenses_Property_PropertyFromPropertyEntityMapper;
        public GetProperty_Properties_PropertyFromPropertyEntityMapper(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::PropManagerSite.GraphQL.State.LoanEntity, EditProperty_EditProperty_Property_Loans_Loan> editProperty_EditProperty_Property_Loans_LoanFromLoanEntityMapper, global::StrawberryShake.IEntityMapper<global::PropManagerSite.GraphQL.State.PropertyEntity, EditProperty_EditProperty_Property_Loans_Property_Property> editProperty_EditProperty_Property_Loans_Property_PropertyFromPropertyEntityMapper, global::StrawberryShake.IEntityMapper<global::PropManagerSite.GraphQL.State.ExpenseEntity, EditProperty_EditProperty_Property_Expenses_Expense> editProperty_EditProperty_Property_Expenses_ExpenseFromExpenseEntityMapper, global::StrawberryShake.IEntityMapper<global::PropManagerSite.GraphQL.State.PropertyEntity, EditProperty_EditProperty_Property_Expenses_Property_Property> editProperty_EditProperty_Property_Expenses_Property_PropertyFromPropertyEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _editProperty_EditProperty_Property_Loans_LoanFromLoanEntityMapper = editProperty_EditProperty_Property_Loans_LoanFromLoanEntityMapper ?? throw new global::System.ArgumentNullException(nameof(editProperty_EditProperty_Property_Loans_LoanFromLoanEntityMapper));
            _editProperty_EditProperty_Property_Loans_Property_PropertyFromPropertyEntityMapper = editProperty_EditProperty_Property_Loans_Property_PropertyFromPropertyEntityMapper ?? throw new global::System.ArgumentNullException(nameof(editProperty_EditProperty_Property_Loans_Property_PropertyFromPropertyEntityMapper));
            _editProperty_EditProperty_Property_Expenses_ExpenseFromExpenseEntityMapper = editProperty_EditProperty_Property_Expenses_ExpenseFromExpenseEntityMapper ?? throw new global::System.ArgumentNullException(nameof(editProperty_EditProperty_Property_Expenses_ExpenseFromExpenseEntityMapper));
            _editProperty_EditProperty_Property_Expenses_Property_PropertyFromPropertyEntityMapper = editProperty_EditProperty_Property_Expenses_Property_PropertyFromPropertyEntityMapper ?? throw new global::System.ArgumentNullException(nameof(editProperty_EditProperty_Property_Expenses_Property_PropertyFromPropertyEntityMapper));
        }

        public GetProperty_Properties_Property Map(global::PropManagerSite.GraphQL.State.PropertyEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetProperty_Properties_Property(entity.Id, entity.Name, entity.PurchasePrice, entity.RegistrationTransferFee, entity.Rooms, entity.Bathrooms, entity.LandSize, entity.Address, entity.PropertyType, entity.StampDuty, entity.Carpark, MapNonNullableIEditProperty_EditProperty_Property_LoansNonNullableArray(entity.Loans, snapshot), MapNonNullableIEditProperty_EditProperty_Property_ExpensesNonNullableArray(entity.Expenses, snapshot));
        }

        private global::System.Collections.Generic.IReadOnlyList<global::PropManagerSite.GraphQL.IEditProperty_EditProperty_Property_Loans> MapNonNullableIEditProperty_EditProperty_Property_LoansNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                throw new global::System.ArgumentNullException();
            }

            var loans = new global::System.Collections.Generic.List<global::PropManagerSite.GraphQL.IEditProperty_EditProperty_Property_Loans>();
            foreach (global::StrawberryShake.EntityId child in list)
            {
                loans.Add(MapNonNullableIEditProperty_EditProperty_Property_Loans(child, snapshot));
            }

            return loans;
        }

        private global::PropManagerSite.GraphQL.IEditProperty_EditProperty_Property_Loans MapNonNullableIEditProperty_EditProperty_Property_Loans(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("Loan", global::System.StringComparison.Ordinal))
            {
                return _editProperty_EditProperty_Property_Loans_LoanFromLoanEntityMapper.Map(snapshot.GetEntity<global::PropManagerSite.GraphQL.State.LoanEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::PropManagerSite.GraphQL.IEditProperty_EditProperty_Property_Loans_Property MapNonNullableIEditProperty_EditProperty_Property_Loans_Property(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("Property", global::System.StringComparison.Ordinal))
            {
                return _editProperty_EditProperty_Property_Loans_Property_PropertyFromPropertyEntityMapper.Map(snapshot.GetEntity<global::PropManagerSite.GraphQL.State.PropertyEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::PropManagerSite.GraphQL.IEditProperty_EditProperty_Property_Expenses> MapNonNullableIEditProperty_EditProperty_Property_ExpensesNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                throw new global::System.ArgumentNullException();
            }

            var expenses = new global::System.Collections.Generic.List<global::PropManagerSite.GraphQL.IEditProperty_EditProperty_Property_Expenses>();
            foreach (global::StrawberryShake.EntityId child in list)
            {
                expenses.Add(MapNonNullableIEditProperty_EditProperty_Property_Expenses(child, snapshot));
            }

            return expenses;
        }

        private global::PropManagerSite.GraphQL.IEditProperty_EditProperty_Property_Expenses MapNonNullableIEditProperty_EditProperty_Property_Expenses(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("Expense", global::System.StringComparison.Ordinal))
            {
                return _editProperty_EditProperty_Property_Expenses_ExpenseFromExpenseEntityMapper.Map(snapshot.GetEntity<global::PropManagerSite.GraphQL.State.ExpenseEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::PropManagerSite.GraphQL.IEditProperty_EditProperty_Property_Expenses_Property MapNonNullableIEditProperty_EditProperty_Property_Expenses_Property(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("Property", global::System.StringComparison.Ordinal))
            {
                return _editProperty_EditProperty_Property_Expenses_Property_PropertyFromPropertyEntityMapper.Map(snapshot.GetEntity<global::PropManagerSite.GraphQL.State.PropertyEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class GetProperty_Properties_Loans_LoanFromLoanEntityMapper : global::StrawberryShake.IEntityMapper<global::PropManagerSite.GraphQL.State.LoanEntity, GetProperty_Properties_Loans_Loan>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::PropManagerSite.GraphQL.State.PropertyEntity, EditProperty_EditProperty_Property_Loans_Property_Property> _editProperty_EditProperty_Property_Loans_Property_PropertyFromPropertyEntityMapper;
        public GetProperty_Properties_Loans_LoanFromLoanEntityMapper(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::PropManagerSite.GraphQL.State.PropertyEntity, EditProperty_EditProperty_Property_Loans_Property_Property> editProperty_EditProperty_Property_Loans_Property_PropertyFromPropertyEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _editProperty_EditProperty_Property_Loans_Property_PropertyFromPropertyEntityMapper = editProperty_EditProperty_Property_Loans_Property_PropertyFromPropertyEntityMapper ?? throw new global::System.ArgumentNullException(nameof(editProperty_EditProperty_Property_Loans_Property_PropertyFromPropertyEntityMapper));
        }

        public GetProperty_Properties_Loans_Loan Map(global::PropManagerSite.GraphQL.State.LoanEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetProperty_Properties_Loans_Loan(entity.Id, entity.LenderName, entity.Amount, entity.Interest, entity.LMI, entity.LoanType, entity.Years, entity.DateOfLoan, MapNonNullableIEditProperty_EditProperty_Property_Loans_Property(entity.Property, snapshot));
        }

        private global::PropManagerSite.GraphQL.IEditProperty_EditProperty_Property_Loans_Property MapNonNullableIEditProperty_EditProperty_Property_Loans_Property(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("Property", global::System.StringComparison.Ordinal))
            {
                return _editProperty_EditProperty_Property_Loans_Property_PropertyFromPropertyEntityMapper.Map(snapshot.GetEntity<global::PropManagerSite.GraphQL.State.PropertyEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class GetProperty_Properties_Expenses_ExpenseFromExpenseEntityMapper : global::StrawberryShake.IEntityMapper<global::PropManagerSite.GraphQL.State.ExpenseEntity, GetProperty_Properties_Expenses_Expense>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::PropManagerSite.GraphQL.State.PropertyEntity, EditProperty_EditProperty_Property_Expenses_Property_Property> _editProperty_EditProperty_Property_Expenses_Property_PropertyFromPropertyEntityMapper;
        public GetProperty_Properties_Expenses_ExpenseFromExpenseEntityMapper(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::PropManagerSite.GraphQL.State.PropertyEntity, EditProperty_EditProperty_Property_Expenses_Property_Property> editProperty_EditProperty_Property_Expenses_Property_PropertyFromPropertyEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _editProperty_EditProperty_Property_Expenses_Property_PropertyFromPropertyEntityMapper = editProperty_EditProperty_Property_Expenses_Property_PropertyFromPropertyEntityMapper ?? throw new global::System.ArgumentNullException(nameof(editProperty_EditProperty_Property_Expenses_Property_PropertyFromPropertyEntityMapper));
        }

        public GetProperty_Properties_Expenses_Expense Map(global::PropManagerSite.GraphQL.State.ExpenseEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetProperty_Properties_Expenses_Expense(entity.Id, entity.Title, entity.Description, entity.Price, entity.TotalDeductable, entity.PropertyId, entity.ExpenseDate, MapNonNullableIEditProperty_EditProperty_Property_Expenses_Property(entity.Property, snapshot), entity.Deleted);
        }

        private global::PropManagerSite.GraphQL.IEditProperty_EditProperty_Property_Expenses_Property MapNonNullableIEditProperty_EditProperty_Property_Expenses_Property(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("Property", global::System.StringComparison.Ordinal))
            {
                return _editProperty_EditProperty_Property_Expenses_Property_PropertyFromPropertyEntityMapper.Map(snapshot.GetEntity<global::PropManagerSite.GraphQL.State.PropertyEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class GetProperty_Properties_Loans_Property_PropertyFromPropertyEntityMapper : global::StrawberryShake.IEntityMapper<global::PropManagerSite.GraphQL.State.PropertyEntity, GetProperty_Properties_Loans_Property_Property>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetProperty_Properties_Loans_Property_PropertyFromPropertyEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetProperty_Properties_Loans_Property_Property Map(global::PropManagerSite.GraphQL.State.PropertyEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetProperty_Properties_Loans_Property_Property(entity.Id, entity.Name);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class GetProperty_Properties_Expenses_Property_PropertyFromPropertyEntityMapper : global::StrawberryShake.IEntityMapper<global::PropManagerSite.GraphQL.State.PropertyEntity, GetProperty_Properties_Expenses_Property_Property>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetProperty_Properties_Expenses_Property_PropertyFromPropertyEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetProperty_Properties_Expenses_Property_Property Map(global::PropManagerSite.GraphQL.State.PropertyEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetProperty_Properties_Expenses_Property_Property(entity.Id);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class GetLoanResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::PropManagerSite.GraphQL.GetLoanResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::PropManagerSite.GraphQL.State.LoanEntity, GetLoan_Loans_Loan> _getLoan_Loans_LoanFromLoanEntityMapper;
        public GetLoanResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::PropManagerSite.GraphQL.State.LoanEntity, GetLoan_Loans_Loan> getLoan_Loans_LoanFromLoanEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getLoan_Loans_LoanFromLoanEntityMapper = getLoan_Loans_LoanFromLoanEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getLoan_Loans_LoanFromLoanEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::PropManagerSite.GraphQL.IGetLoanResult);
        public GetLoanResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetLoanResultInfo info)
            {
                return new GetLoanResult(MapNonNullableIGetLoan_LoansNonNullableArray(info.Loans, snapshot));
            }

            throw new global::System.ArgumentException("GetLoanResultInfo expected.");
        }

        private global::System.Collections.Generic.IReadOnlyList<global::PropManagerSite.GraphQL.IGetLoan_Loans> MapNonNullableIGetLoan_LoansNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                throw new global::System.ArgumentNullException();
            }

            var loans = new global::System.Collections.Generic.List<global::PropManagerSite.GraphQL.IGetLoan_Loans>();
            foreach (global::StrawberryShake.EntityId child in list)
            {
                loans.Add(MapNonNullableIGetLoan_Loans(child, snapshot));
            }

            return loans;
        }

        private global::PropManagerSite.GraphQL.IGetLoan_Loans MapNonNullableIGetLoan_Loans(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("Loan", global::System.StringComparison.Ordinal))
            {
                return _getLoan_Loans_LoanFromLoanEntityMapper.Map(snapshot.GetEntity<global::PropManagerSite.GraphQL.State.LoanEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class GetLoanResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public GetLoanResultInfo(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> loans, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            Loans = loans;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> Loans { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetLoanResultInfo(Loans, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class GetLoan_Loans_LoanFromLoanEntityMapper : global::StrawberryShake.IEntityMapper<global::PropManagerSite.GraphQL.State.LoanEntity, GetLoan_Loans_Loan>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::PropManagerSite.GraphQL.State.PropertyEntity, EditProperty_EditProperty_Property_Loans_Property_Property> _editProperty_EditProperty_Property_Loans_Property_PropertyFromPropertyEntityMapper;
        public GetLoan_Loans_LoanFromLoanEntityMapper(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::PropManagerSite.GraphQL.State.PropertyEntity, EditProperty_EditProperty_Property_Loans_Property_Property> editProperty_EditProperty_Property_Loans_Property_PropertyFromPropertyEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _editProperty_EditProperty_Property_Loans_Property_PropertyFromPropertyEntityMapper = editProperty_EditProperty_Property_Loans_Property_PropertyFromPropertyEntityMapper ?? throw new global::System.ArgumentNullException(nameof(editProperty_EditProperty_Property_Loans_Property_PropertyFromPropertyEntityMapper));
        }

        public GetLoan_Loans_Loan Map(global::PropManagerSite.GraphQL.State.LoanEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetLoan_Loans_Loan(entity.Id, entity.LenderName, entity.Amount, entity.Interest, entity.LMI, entity.LoanType, entity.Years, entity.DateOfLoan, MapNonNullableIEditProperty_EditProperty_Property_Loans_Property(entity.Property, snapshot));
        }

        private global::PropManagerSite.GraphQL.IEditProperty_EditProperty_Property_Loans_Property MapNonNullableIEditProperty_EditProperty_Property_Loans_Property(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("Property", global::System.StringComparison.Ordinal))
            {
                return _editProperty_EditProperty_Property_Loans_Property_PropertyFromPropertyEntityMapper.Map(snapshot.GetEntity<global::PropManagerSite.GraphQL.State.PropertyEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class GetLoan_Loans_Property_PropertyFromPropertyEntityMapper : global::StrawberryShake.IEntityMapper<global::PropManagerSite.GraphQL.State.PropertyEntity, GetLoan_Loans_Property_Property>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetLoan_Loans_Property_PropertyFromPropertyEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetLoan_Loans_Property_Property Map(global::PropManagerSite.GraphQL.State.PropertyEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetLoan_Loans_Property_Property(entity.Id, entity.Name);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class GetExpenseResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::PropManagerSite.GraphQL.GetExpenseResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::PropManagerSite.GraphQL.State.ExpenseEntity, GetExpense_Expenses_Expense> _getExpense_Expenses_ExpenseFromExpenseEntityMapper;
        public GetExpenseResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::PropManagerSite.GraphQL.State.ExpenseEntity, GetExpense_Expenses_Expense> getExpense_Expenses_ExpenseFromExpenseEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getExpense_Expenses_ExpenseFromExpenseEntityMapper = getExpense_Expenses_ExpenseFromExpenseEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getExpense_Expenses_ExpenseFromExpenseEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::PropManagerSite.GraphQL.IGetExpenseResult);
        public GetExpenseResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetExpenseResultInfo info)
            {
                return new GetExpenseResult(MapNonNullableIGetExpense_ExpensesNonNullableArray(info.Expenses, snapshot));
            }

            throw new global::System.ArgumentException("GetExpenseResultInfo expected.");
        }

        private global::System.Collections.Generic.IReadOnlyList<global::PropManagerSite.GraphQL.IGetExpense_Expenses> MapNonNullableIGetExpense_ExpensesNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                throw new global::System.ArgumentNullException();
            }

            var expenses = new global::System.Collections.Generic.List<global::PropManagerSite.GraphQL.IGetExpense_Expenses>();
            foreach (global::StrawberryShake.EntityId child in list)
            {
                expenses.Add(MapNonNullableIGetExpense_Expenses(child, snapshot));
            }

            return expenses;
        }

        private global::PropManagerSite.GraphQL.IGetExpense_Expenses MapNonNullableIGetExpense_Expenses(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("Expense", global::System.StringComparison.Ordinal))
            {
                return _getExpense_Expenses_ExpenseFromExpenseEntityMapper.Map(snapshot.GetEntity<global::PropManagerSite.GraphQL.State.ExpenseEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class GetExpenseResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public GetExpenseResultInfo(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> expenses, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            Expenses = expenses;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> Expenses { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetExpenseResultInfo(Expenses, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class GetExpense_Expenses_ExpenseFromExpenseEntityMapper : global::StrawberryShake.IEntityMapper<global::PropManagerSite.GraphQL.State.ExpenseEntity, GetExpense_Expenses_Expense>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::PropManagerSite.GraphQL.State.PropertyEntity, EditProperty_EditProperty_Property_Expenses_Property_Property> _editProperty_EditProperty_Property_Expenses_Property_PropertyFromPropertyEntityMapper;
        public GetExpense_Expenses_ExpenseFromExpenseEntityMapper(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::PropManagerSite.GraphQL.State.PropertyEntity, EditProperty_EditProperty_Property_Expenses_Property_Property> editProperty_EditProperty_Property_Expenses_Property_PropertyFromPropertyEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _editProperty_EditProperty_Property_Expenses_Property_PropertyFromPropertyEntityMapper = editProperty_EditProperty_Property_Expenses_Property_PropertyFromPropertyEntityMapper ?? throw new global::System.ArgumentNullException(nameof(editProperty_EditProperty_Property_Expenses_Property_PropertyFromPropertyEntityMapper));
        }

        public GetExpense_Expenses_Expense Map(global::PropManagerSite.GraphQL.State.ExpenseEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetExpense_Expenses_Expense(entity.Id, entity.Title, entity.Description, entity.Price, entity.TotalDeductable, entity.PropertyId, entity.ExpenseDate, MapNonNullableIEditProperty_EditProperty_Property_Expenses_Property(entity.Property, snapshot), entity.Deleted);
        }

        private global::PropManagerSite.GraphQL.IEditProperty_EditProperty_Property_Expenses_Property MapNonNullableIEditProperty_EditProperty_Property_Expenses_Property(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("Property", global::System.StringComparison.Ordinal))
            {
                return _editProperty_EditProperty_Property_Expenses_Property_PropertyFromPropertyEntityMapper.Map(snapshot.GetEntity<global::PropManagerSite.GraphQL.State.PropertyEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class GetExpense_Expenses_Property_PropertyFromPropertyEntityMapper : global::StrawberryShake.IEntityMapper<global::PropManagerSite.GraphQL.State.PropertyEntity, GetExpense_Expenses_Property_Property>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetExpense_Expenses_Property_PropertyFromPropertyEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetExpense_Expenses_Property_Property Map(global::PropManagerSite.GraphQL.State.PropertyEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetExpense_Expenses_Property_Property(entity.Id);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    internal interface IEditExpenseInputInfo
    {
        global::System.Boolean IsTitleSet { get; }

        global::System.Boolean IsDescriptionSet { get; }

        global::System.Boolean IsPriceSet { get; }

        global::System.Boolean IsTotalDeductableSet { get; }

        global::System.Boolean IsIdSet { get; }

        global::System.Boolean IsExpenseDateSet { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    internal interface IAddExpenseInputInfo
    {
        global::System.Boolean IsTitleSet { get; }

        global::System.Boolean IsDescriptionSet { get; }

        global::System.Boolean IsPriceSet { get; }

        global::System.Boolean IsTotalDeductableSet { get; }

        global::System.Boolean IsPropertyIdSet { get; }

        global::System.Boolean IsExpenseDateSet { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    internal interface IDeleteExpenseInputInfo
    {
        global::System.Boolean IsIdSet { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    internal interface IAddLoanInputInfo
    {
        global::System.Boolean IsLenderNameSet { get; }

        global::System.Boolean IsAmountSet { get; }

        global::System.Boolean IsInterestSet { get; }

        global::System.Boolean IsLoanTypeSet { get; }

        global::System.Boolean IsLMISet { get; }

        global::System.Boolean IsYearsSet { get; }

        global::System.Boolean IsDateOfLoanSet { get; }

        global::System.Boolean IsPropertyIdSet { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    internal interface IEditLoanInputInfo
    {
        global::System.Boolean IsIdSet { get; }

        global::System.Boolean IsLenderNameSet { get; }

        global::System.Boolean IsAmountSet { get; }

        global::System.Boolean IsInterestSet { get; }

        global::System.Boolean IsLoanTypeSet { get; }

        global::System.Boolean IsLMISet { get; }

        global::System.Boolean IsYearsSet { get; }

        global::System.Boolean IsDateOfLoanSet { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    internal interface IDeleteLoanInputInfo
    {
        global::System.Boolean IsIdSet { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    internal interface IAddPropertyInputInfo
    {
        global::System.Boolean IsAddressSet { get; }

        global::System.Boolean IsNameSet { get; }

        global::System.Boolean IsStampDutySet { get; }

        global::System.Boolean IsPurchasePriceSet { get; }

        global::System.Boolean IsRegistrationTransferFeeSet { get; }

        global::System.Boolean IsRoomsSet { get; }

        global::System.Boolean IsBathroomsSet { get; }

        global::System.Boolean IsCarparkSet { get; }

        global::System.Boolean IsLandSizeSet { get; }

        global::System.Boolean IsPropertyTypeSet { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    internal interface IEditPropertyInputInfo
    {
        global::System.Boolean IsIdSet { get; }

        global::System.Boolean IsAddressSet { get; }

        global::System.Boolean IsNameSet { get; }

        global::System.Boolean IsStampDutySet { get; }

        global::System.Boolean IsPurchasePriceSet { get; }

        global::System.Boolean IsRegistrationTransferFeeSet { get; }

        global::System.Boolean IsRoomsSet { get; }

        global::System.Boolean IsBathroomsSet { get; }

        global::System.Boolean IsCarparkSet { get; }

        global::System.Boolean IsLandSizeSet { get; }

        global::System.Boolean IsPropertyTypeSet { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    internal interface IDeletePropertyInputInfo
    {
        global::System.Boolean IsIdSet { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class EditExpenseBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::PropManagerSite.GraphQL.IEditExpenseResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::PropManagerSite.GraphQL.IEditExpenseResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Decimal, global::System.Decimal> _decimalParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.Guid> _uUIDParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.DateTimeOffset> _dateTimeParser;
        public EditExpenseBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::PropManagerSite.GraphQL.IEditExpenseResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _decimalParser = serializerResolver.GetLeafValueParser<global::System.Decimal, global::System.Decimal>("Decimal") ?? throw new global::System.ArgumentException("No serializer for type `Decimal` found.");
            _uUIDParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.Guid>("UUID") ?? throw new global::System.ArgumentException("No serializer for type `UUID` found.");
            _dateTimeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.DateTimeOffset>("DateTime") ?? throw new global::System.ArgumentException("No serializer for type `DateTime` found.");
        }

        public global::StrawberryShake.IOperationResult<IEditExpenseResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IEditExpenseResult Result, EditExpenseResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<IEditExpenseResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IEditExpenseResult, EditExpenseResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::PropManagerSite.GraphQL.State.EditExpensePayloadData editExpenseId = default !;
            _entityStore.Update(session =>
            {
                editExpenseId = DeserializeNonNullableIEditExpense_EditExpense(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "editExpense"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new EditExpenseResultInfo(editExpenseId, entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::PropManagerSite.GraphQL.State.EditExpensePayloadData DeserializeNonNullableIEditExpense_EditExpense(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("EditExpensePayload", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::PropManagerSite.GraphQL.State.EditExpensePayloadData(typename, expense: UpdateIEditExpense_EditExpense_ExpenseEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "expense"), entityIds));
            }

            throw new global::System.NotSupportedException();
        }

        private global::StrawberryShake.EntityId? UpdateIEditExpense_EditExpense_ExpenseEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Expense", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::PropManagerSite.GraphQL.State.ExpenseEntity? entity))
                {
                    session.SetEntity(entityId, new global::PropManagerSite.GraphQL.State.ExpenseEntity(DeserializeNonNullableGuid(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), entity.Title, entity.Description, entity.Price, entity.TotalDeductable, entity.PropertyId, entity.ExpenseDate, entity.Property, entity.Deleted));
                }
                else
                {
                    session.SetEntity(entityId, new global::PropManagerSite.GraphQL.State.ExpenseEntity(DeserializeNonNullableGuid(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), default !, default !, default !, default !, default !, default !, default !, default !));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Guid DeserializeNonNullableGuid(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _uUIDParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class AddExpenseBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::PropManagerSite.GraphQL.IAddExpenseResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::PropManagerSite.GraphQL.IAddExpenseResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Decimal, global::System.Decimal> _decimalParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.Guid> _uUIDParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.DateTimeOffset> _dateTimeParser;
        public AddExpenseBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::PropManagerSite.GraphQL.IAddExpenseResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _decimalParser = serializerResolver.GetLeafValueParser<global::System.Decimal, global::System.Decimal>("Decimal") ?? throw new global::System.ArgumentException("No serializer for type `Decimal` found.");
            _uUIDParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.Guid>("UUID") ?? throw new global::System.ArgumentException("No serializer for type `UUID` found.");
            _dateTimeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.DateTimeOffset>("DateTime") ?? throw new global::System.ArgumentException("No serializer for type `DateTime` found.");
        }

        public global::StrawberryShake.IOperationResult<IAddExpenseResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IAddExpenseResult Result, AddExpenseResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<IAddExpenseResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IAddExpenseResult, AddExpenseResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::PropManagerSite.GraphQL.State.AddExpensePayloadData addExpenseId = default !;
            _entityStore.Update(session =>
            {
                addExpenseId = DeserializeNonNullableIAddExpense_AddExpense(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "addExpense"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new AddExpenseResultInfo(addExpenseId, entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::PropManagerSite.GraphQL.State.AddExpensePayloadData DeserializeNonNullableIAddExpense_AddExpense(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("AddExpensePayload", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::PropManagerSite.GraphQL.State.AddExpensePayloadData(typename, expense: UpdateIAddExpense_AddExpense_ExpenseEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "expense"), entityIds));
            }

            throw new global::System.NotSupportedException();
        }

        private global::StrawberryShake.EntityId? UpdateIAddExpense_AddExpense_ExpenseEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Expense", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::PropManagerSite.GraphQL.State.ExpenseEntity? entity))
                {
                    session.SetEntity(entityId, new global::PropManagerSite.GraphQL.State.ExpenseEntity(DeserializeNonNullableGuid(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), entity.Title, entity.Description, entity.Price, entity.TotalDeductable, entity.PropertyId, entity.ExpenseDate, entity.Property, entity.Deleted));
                }
                else
                {
                    session.SetEntity(entityId, new global::PropManagerSite.GraphQL.State.ExpenseEntity(DeserializeNonNullableGuid(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), default !, default !, default !, default !, default !, default !, default !, default !));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Guid DeserializeNonNullableGuid(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _uUIDParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class DeleteExpenseBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::PropManagerSite.GraphQL.IDeleteExpenseResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::PropManagerSite.GraphQL.IDeleteExpenseResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.Guid> _uUIDParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Boolean, global::System.Boolean> _booleanParser;
        public DeleteExpenseBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::PropManagerSite.GraphQL.IDeleteExpenseResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _uUIDParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.Guid>("UUID") ?? throw new global::System.ArgumentException("No serializer for type `UUID` found.");
            _booleanParser = serializerResolver.GetLeafValueParser<global::System.Boolean, global::System.Boolean>("Boolean") ?? throw new global::System.ArgumentException("No serializer for type `Boolean` found.");
        }

        public global::StrawberryShake.IOperationResult<IDeleteExpenseResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IDeleteExpenseResult Result, DeleteExpenseResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<IDeleteExpenseResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IDeleteExpenseResult, DeleteExpenseResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new DeleteExpenseResultInfo(DeserializeNonNullableIDeleteExpense_DeleteExpense(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "deleteExpense")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::PropManagerSite.GraphQL.State.DeleteExpensePayloadData DeserializeNonNullableIDeleteExpense_DeleteExpense(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("DeleteExpensePayload", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::PropManagerSite.GraphQL.State.DeleteExpensePayloadData(typename, boolean: DeserializeBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "boolean")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Boolean? DeserializeBoolean(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _booleanParser.Parse(obj.Value.GetBoolean()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class AddLoanBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::PropManagerSite.GraphQL.IAddLoanResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::PropManagerSite.GraphQL.IAddLoanResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::PropManagerSite.GraphQL.LoanTypes> _loanTypesParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Decimal, global::System.Decimal> _decimalParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.DateTimeOffset> _dateTimeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.Guid> _uUIDParser;
        public AddLoanBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::PropManagerSite.GraphQL.IAddLoanResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _loanTypesParser = serializerResolver.GetLeafValueParser<global::System.String, global::PropManagerSite.GraphQL.LoanTypes>("LoanTypes") ?? throw new global::System.ArgumentException("No serializer for type `LoanTypes` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _decimalParser = serializerResolver.GetLeafValueParser<global::System.Decimal, global::System.Decimal>("Decimal") ?? throw new global::System.ArgumentException("No serializer for type `Decimal` found.");
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _dateTimeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.DateTimeOffset>("DateTime") ?? throw new global::System.ArgumentException("No serializer for type `DateTime` found.");
            _uUIDParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.Guid>("UUID") ?? throw new global::System.ArgumentException("No serializer for type `UUID` found.");
        }

        public global::StrawberryShake.IOperationResult<IAddLoanResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IAddLoanResult Result, AddLoanResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<IAddLoanResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IAddLoanResult, AddLoanResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::PropManagerSite.GraphQL.State.AddLoanPayloadData addLoanId = default !;
            _entityStore.Update(session =>
            {
                addLoanId = DeserializeNonNullableIAddLoan_AddLoan(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "addLoan"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new AddLoanResultInfo(addLoanId, entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::PropManagerSite.GraphQL.State.AddLoanPayloadData DeserializeNonNullableIAddLoan_AddLoan(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("AddLoanPayload", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::PropManagerSite.GraphQL.State.AddLoanPayloadData(typename, loan: UpdateIAddLoan_AddLoan_LoanEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "loan"), entityIds));
            }

            throw new global::System.NotSupportedException();
        }

        private global::StrawberryShake.EntityId? UpdateIAddLoan_AddLoan_LoanEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Loan", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::PropManagerSite.GraphQL.State.LoanEntity? entity))
                {
                    session.SetEntity(entityId, new global::PropManagerSite.GraphQL.State.LoanEntity(DeserializeNonNullableGuid(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), entity.LenderName, entity.Amount, entity.Interest, entity.LMI, entity.LoanType, entity.Years, entity.DateOfLoan, entity.Property));
                }
                else
                {
                    session.SetEntity(entityId, new global::PropManagerSite.GraphQL.State.LoanEntity(DeserializeNonNullableGuid(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), default !, default !, default !, default !, default !, default !, default !, default !));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Guid DeserializeNonNullableGuid(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _uUIDParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class EddLoanBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::PropManagerSite.GraphQL.IEddLoanResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::PropManagerSite.GraphQL.IEddLoanResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::PropManagerSite.GraphQL.LoanTypes> _loanTypesParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.Guid> _uUIDParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Decimal, global::System.Decimal> _decimalParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.DateTimeOffset> _dateTimeParser;
        public EddLoanBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::PropManagerSite.GraphQL.IEddLoanResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _loanTypesParser = serializerResolver.GetLeafValueParser<global::System.String, global::PropManagerSite.GraphQL.LoanTypes>("LoanTypes") ?? throw new global::System.ArgumentException("No serializer for type `LoanTypes` found.");
            _uUIDParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.Guid>("UUID") ?? throw new global::System.ArgumentException("No serializer for type `UUID` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _decimalParser = serializerResolver.GetLeafValueParser<global::System.Decimal, global::System.Decimal>("Decimal") ?? throw new global::System.ArgumentException("No serializer for type `Decimal` found.");
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _dateTimeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.DateTimeOffset>("DateTime") ?? throw new global::System.ArgumentException("No serializer for type `DateTime` found.");
        }

        public global::StrawberryShake.IOperationResult<IEddLoanResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IEddLoanResult Result, EddLoanResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<IEddLoanResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IEddLoanResult, EddLoanResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::PropManagerSite.GraphQL.State.EditLoanPayloadData editLoanId = default !;
            _entityStore.Update(session =>
            {
                editLoanId = DeserializeNonNullableIEddLoan_EditLoan(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "editLoan"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new EddLoanResultInfo(editLoanId, entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::PropManagerSite.GraphQL.State.EditLoanPayloadData DeserializeNonNullableIEddLoan_EditLoan(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("EditLoanPayload", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::PropManagerSite.GraphQL.State.EditLoanPayloadData(typename, loan: UpdateIEddLoan_EditLoan_LoanEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "loan"), entityIds));
            }

            throw new global::System.NotSupportedException();
        }

        private global::StrawberryShake.EntityId? UpdateIEddLoan_EditLoan_LoanEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Loan", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::PropManagerSite.GraphQL.State.LoanEntity? entity))
                {
                    session.SetEntity(entityId, new global::PropManagerSite.GraphQL.State.LoanEntity(DeserializeNonNullableGuid(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), entity.LenderName, entity.Amount, entity.Interest, entity.LMI, entity.LoanType, entity.Years, entity.DateOfLoan, entity.Property));
                }
                else
                {
                    session.SetEntity(entityId, new global::PropManagerSite.GraphQL.State.LoanEntity(DeserializeNonNullableGuid(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), default !, default !, default !, default !, default !, default !, default !, default !));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Guid DeserializeNonNullableGuid(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _uUIDParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class DeleteLoanBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::PropManagerSite.GraphQL.IDeleteLoanResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::PropManagerSite.GraphQL.IDeleteLoanResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.Guid> _uUIDParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Boolean, global::System.Boolean> _booleanParser;
        public DeleteLoanBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::PropManagerSite.GraphQL.IDeleteLoanResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _uUIDParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.Guid>("UUID") ?? throw new global::System.ArgumentException("No serializer for type `UUID` found.");
            _booleanParser = serializerResolver.GetLeafValueParser<global::System.Boolean, global::System.Boolean>("Boolean") ?? throw new global::System.ArgumentException("No serializer for type `Boolean` found.");
        }

        public global::StrawberryShake.IOperationResult<IDeleteLoanResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IDeleteLoanResult Result, DeleteLoanResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<IDeleteLoanResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IDeleteLoanResult, DeleteLoanResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new DeleteLoanResultInfo(DeserializeNonNullableIDeleteLoan_DeleteLoan(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "deleteLoan")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::PropManagerSite.GraphQL.State.DeleteLoanPayloadData DeserializeNonNullableIDeleteLoan_DeleteLoan(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("DeleteLoanPayload", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::PropManagerSite.GraphQL.State.DeleteLoanPayloadData(typename, boolean: DeserializeBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "boolean")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Boolean? DeserializeBoolean(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _booleanParser.Parse(obj.Value.GetBoolean()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class CreatePropertyBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::PropManagerSite.GraphQL.ICreatePropertyResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::PropManagerSite.GraphQL.ICreatePropertyResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::PropManagerSite.GraphQL.PropertyTypes> _propertyTypesParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Decimal, global::System.Decimal> _decimalParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.Guid> _uUIDParser;
        public CreatePropertyBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::PropManagerSite.GraphQL.ICreatePropertyResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _propertyTypesParser = serializerResolver.GetLeafValueParser<global::System.String, global::PropManagerSite.GraphQL.PropertyTypes>("PropertyTypes") ?? throw new global::System.ArgumentException("No serializer for type `PropertyTypes` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _decimalParser = serializerResolver.GetLeafValueParser<global::System.Decimal, global::System.Decimal>("Decimal") ?? throw new global::System.ArgumentException("No serializer for type `Decimal` found.");
            _uUIDParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.Guid>("UUID") ?? throw new global::System.ArgumentException("No serializer for type `UUID` found.");
        }

        public global::StrawberryShake.IOperationResult<ICreatePropertyResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (ICreatePropertyResult Result, CreatePropertyResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<ICreatePropertyResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (ICreatePropertyResult, CreatePropertyResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::PropManagerSite.GraphQL.State.AddPropertyPayloadData addPropertyId = default !;
            _entityStore.Update(session =>
            {
                addPropertyId = DeserializeNonNullableICreateProperty_AddProperty(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "addProperty"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new CreatePropertyResultInfo(addPropertyId, entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::PropManagerSite.GraphQL.State.AddPropertyPayloadData DeserializeNonNullableICreateProperty_AddProperty(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("AddPropertyPayload", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::PropManagerSite.GraphQL.State.AddPropertyPayloadData(typename, property: UpdateICreateProperty_AddProperty_PropertyEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "property"), entityIds));
            }

            throw new global::System.NotSupportedException();
        }

        private global::StrawberryShake.EntityId? UpdateICreateProperty_AddProperty_PropertyEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Property", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::PropManagerSite.GraphQL.State.PropertyEntity? entity))
                {
                    session.SetEntity(entityId, new global::PropManagerSite.GraphQL.State.PropertyEntity(DeserializeNonNullableGuid(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), entity.Name, entity.PurchasePrice, entity.RegistrationTransferFee, entity.Rooms, entity.Bathrooms, entity.LandSize, entity.Address, entity.PropertyType, entity.StampDuty, entity.Carpark, entity.Loans, entity.Expenses));
                }
                else
                {
                    session.SetEntity(entityId, new global::PropManagerSite.GraphQL.State.PropertyEntity(DeserializeNonNullableGuid(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), default !, default !, default !, default !, default !, default !, default !, default !, default !, default !, default !, default !));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Guid DeserializeNonNullableGuid(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _uUIDParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class EditPropertyBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::PropManagerSite.GraphQL.IEditPropertyResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::PropManagerSite.GraphQL.IEditPropertyResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::PropManagerSite.GraphQL.PropertyTypes> _propertyTypesParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::PropManagerSite.GraphQL.LoanTypes> _loanTypesParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.Guid> _uUIDParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Decimal, global::System.Decimal> _decimalParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.DateTimeOffset> _dateTimeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Boolean, global::System.Boolean> _booleanParser;
        public EditPropertyBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::PropManagerSite.GraphQL.IEditPropertyResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _propertyTypesParser = serializerResolver.GetLeafValueParser<global::System.String, global::PropManagerSite.GraphQL.PropertyTypes>("PropertyTypes") ?? throw new global::System.ArgumentException("No serializer for type `PropertyTypes` found.");
            _loanTypesParser = serializerResolver.GetLeafValueParser<global::System.String, global::PropManagerSite.GraphQL.LoanTypes>("LoanTypes") ?? throw new global::System.ArgumentException("No serializer for type `LoanTypes` found.");
            _uUIDParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.Guid>("UUID") ?? throw new global::System.ArgumentException("No serializer for type `UUID` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _decimalParser = serializerResolver.GetLeafValueParser<global::System.Decimal, global::System.Decimal>("Decimal") ?? throw new global::System.ArgumentException("No serializer for type `Decimal` found.");
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _dateTimeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.DateTimeOffset>("DateTime") ?? throw new global::System.ArgumentException("No serializer for type `DateTime` found.");
            _booleanParser = serializerResolver.GetLeafValueParser<global::System.Boolean, global::System.Boolean>("Boolean") ?? throw new global::System.ArgumentException("No serializer for type `Boolean` found.");
        }

        public global::StrawberryShake.IOperationResult<IEditPropertyResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IEditPropertyResult Result, EditPropertyResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<IEditPropertyResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IEditPropertyResult, EditPropertyResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::PropManagerSite.GraphQL.State.EditPropertyPayloadData editPropertyId = default !;
            _entityStore.Update(session =>
            {
                editPropertyId = DeserializeNonNullableIEditProperty_EditProperty(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "editProperty"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new EditPropertyResultInfo(editPropertyId, entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::PropManagerSite.GraphQL.State.EditPropertyPayloadData DeserializeNonNullableIEditProperty_EditProperty(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("EditPropertyPayload", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::PropManagerSite.GraphQL.State.EditPropertyPayloadData(typename, property: UpdateIEditProperty_EditProperty_PropertyEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "property"), entityIds));
            }

            throw new global::System.NotSupportedException();
        }

        private global::StrawberryShake.EntityId? UpdateIEditProperty_EditProperty_PropertyEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Property", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::PropManagerSite.GraphQL.State.PropertyEntity? entity))
                {
                    session.SetEntity(entityId, new global::PropManagerSite.GraphQL.State.PropertyEntity(DeserializeNonNullableGuid(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), DeserializeDecimal(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "purchasePrice")), DeserializeDecimal(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "registrationTransferFee")), DeserializeDecimal(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "rooms")), DeserializeDecimal(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "bathrooms")), DeserializeDecimal(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "landSize")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "address")), DeserializeNonNullablePropertyTypes(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "propertyType")), DeserializeDecimal(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "stampDuty")), DeserializeDecimal(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "carpark")), UpdateNonNullableIEditProperty_EditProperty_Property_LoansEntityNonNullableArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "loans"), entityIds), UpdateNonNullableIEditProperty_EditProperty_Property_ExpensesEntityNonNullableArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "expenses"), entityIds)));
                }
                else
                {
                    session.SetEntity(entityId, new global::PropManagerSite.GraphQL.State.PropertyEntity(DeserializeNonNullableGuid(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), DeserializeDecimal(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "purchasePrice")), DeserializeDecimal(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "registrationTransferFee")), DeserializeDecimal(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "rooms")), DeserializeDecimal(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "bathrooms")), DeserializeDecimal(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "landSize")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "address")), DeserializeNonNullablePropertyTypes(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "propertyType")), DeserializeDecimal(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "stampDuty")), DeserializeDecimal(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "carpark")), UpdateNonNullableIEditProperty_EditProperty_Property_LoansEntityNonNullableArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "loans"), entityIds), UpdateNonNullableIEditProperty_EditProperty_Property_ExpensesEntityNonNullableArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "expenses"), entityIds)));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Guid DeserializeNonNullableGuid(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _uUIDParser.Parse(obj.Value.GetString()!);
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Decimal? DeserializeDecimal(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _decimalParser.Parse(obj.Value.GetDecimal()!);
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::PropManagerSite.GraphQL.PropertyTypes DeserializeNonNullablePropertyTypes(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _propertyTypesParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> UpdateNonNullableIEditProperty_EditProperty_Property_LoansEntityNonNullableArray(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var loans = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                loans.Add(UpdateNonNullableIEditProperty_EditProperty_Property_LoansEntity(session, child, entityIds));
            }

            return loans;
        }

        private global::StrawberryShake.EntityId UpdateNonNullableIEditProperty_EditProperty_Property_LoansEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Loan", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::PropManagerSite.GraphQL.State.LoanEntity? entity))
                {
                    session.SetEntity(entityId, new global::PropManagerSite.GraphQL.State.LoanEntity(DeserializeNonNullableGuid(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "lenderName")), DeserializeDecimal(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "amount")), DeserializeDecimal(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "interest")), DeserializeDecimal(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "lMI")), DeserializeNonNullableLoanTypes(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "loanType")), DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "years")), DeserializeDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "dateOfLoan")), UpdateNonNullableIEditProperty_EditProperty_Property_Loans_PropertyEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "property"), entityIds)));
                }
                else
                {
                    session.SetEntity(entityId, new global::PropManagerSite.GraphQL.State.LoanEntity(DeserializeNonNullableGuid(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "lenderName")), DeserializeDecimal(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "amount")), DeserializeDecimal(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "interest")), DeserializeDecimal(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "lMI")), DeserializeNonNullableLoanTypes(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "loanType")), DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "years")), DeserializeDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "dateOfLoan")), UpdateNonNullableIEditProperty_EditProperty_Property_Loans_PropertyEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "property"), entityIds)));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::PropManagerSite.GraphQL.LoanTypes DeserializeNonNullableLoanTypes(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _loanTypesParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Int32? DeserializeInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::System.DateTimeOffset? DeserializeDateTimeOffset(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _dateTimeParser.Parse(obj.Value.GetString()!);
        }

        private global::StrawberryShake.EntityId UpdateNonNullableIEditProperty_EditProperty_Property_Loans_PropertyEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Property", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::PropManagerSite.GraphQL.State.PropertyEntity? entity))
                {
                    session.SetEntity(entityId, new global::PropManagerSite.GraphQL.State.PropertyEntity(DeserializeNonNullableGuid(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), entity.PurchasePrice, entity.RegistrationTransferFee, entity.Rooms, entity.Bathrooms, entity.LandSize, entity.Address, entity.PropertyType, entity.StampDuty, entity.Carpark, entity.Loans, entity.Expenses));
                }
                else
                {
                    session.SetEntity(entityId, new global::PropManagerSite.GraphQL.State.PropertyEntity(DeserializeNonNullableGuid(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), default !, default !, default !, default !, default !, default !, default !, default !, default !, default !, default !));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> UpdateNonNullableIEditProperty_EditProperty_Property_ExpensesEntityNonNullableArray(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var expenses = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                expenses.Add(UpdateNonNullableIEditProperty_EditProperty_Property_ExpensesEntity(session, child, entityIds));
            }

            return expenses;
        }

        private global::StrawberryShake.EntityId UpdateNonNullableIEditProperty_EditProperty_Property_ExpensesEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Expense", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::PropManagerSite.GraphQL.State.ExpenseEntity? entity))
                {
                    session.SetEntity(entityId, new global::PropManagerSite.GraphQL.State.ExpenseEntity(DeserializeNonNullableGuid(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "title")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "description")), DeserializeDecimal(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "price")), DeserializeNonNullableDecimal(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "totalDeductable")), DeserializeNonNullableGuid(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "propertyId")), DeserializeNonNullableDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "expenseDate")), UpdateNonNullableIEditProperty_EditProperty_Property_Expenses_PropertyEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "property"), entityIds), DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "deleted"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::PropManagerSite.GraphQL.State.ExpenseEntity(DeserializeNonNullableGuid(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "title")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "description")), DeserializeDecimal(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "price")), DeserializeNonNullableDecimal(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "totalDeductable")), DeserializeNonNullableGuid(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "propertyId")), DeserializeNonNullableDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "expenseDate")), UpdateNonNullableIEditProperty_EditProperty_Property_Expenses_PropertyEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "property"), entityIds), DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "deleted"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Decimal DeserializeNonNullableDecimal(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _decimalParser.Parse(obj.Value.GetDecimal()!);
        }

        private global::System.DateTimeOffset DeserializeNonNullableDateTimeOffset(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _dateTimeParser.Parse(obj.Value.GetString()!);
        }

        private global::StrawberryShake.EntityId UpdateNonNullableIEditProperty_EditProperty_Property_Expenses_PropertyEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Property", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::PropManagerSite.GraphQL.State.PropertyEntity? entity))
                {
                    session.SetEntity(entityId, new global::PropManagerSite.GraphQL.State.PropertyEntity(DeserializeNonNullableGuid(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), entity.Name, entity.PurchasePrice, entity.RegistrationTransferFee, entity.Rooms, entity.Bathrooms, entity.LandSize, entity.Address, entity.PropertyType, entity.StampDuty, entity.Carpark, entity.Loans, entity.Expenses));
                }
                else
                {
                    session.SetEntity(entityId, new global::PropManagerSite.GraphQL.State.PropertyEntity(DeserializeNonNullableGuid(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), default !, default !, default !, default !, default !, default !, default !, default !, default !, default !, default !, default !));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Boolean DeserializeNonNullableBoolean(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _booleanParser.Parse(obj.Value.GetBoolean()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class DeletePropertyBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::PropManagerSite.GraphQL.IDeletePropertyResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::PropManagerSite.GraphQL.IDeletePropertyResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.Guid> _uUIDParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Boolean, global::System.Boolean> _booleanParser;
        public DeletePropertyBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::PropManagerSite.GraphQL.IDeletePropertyResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _uUIDParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.Guid>("UUID") ?? throw new global::System.ArgumentException("No serializer for type `UUID` found.");
            _booleanParser = serializerResolver.GetLeafValueParser<global::System.Boolean, global::System.Boolean>("Boolean") ?? throw new global::System.ArgumentException("No serializer for type `Boolean` found.");
        }

        public global::StrawberryShake.IOperationResult<IDeletePropertyResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IDeletePropertyResult Result, DeletePropertyResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<IDeletePropertyResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IDeletePropertyResult, DeletePropertyResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new DeletePropertyResultInfo(DeserializeNonNullableIDeleteProperty_DeleteProperty(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "deleteProperty")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::PropManagerSite.GraphQL.State.DeletePropertyPayloadData DeserializeNonNullableIDeleteProperty_DeleteProperty(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("DeletePropertyPayload", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::PropManagerSite.GraphQL.State.DeletePropertyPayloadData(typename, boolean: DeserializeBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "boolean")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Boolean? DeserializeBoolean(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _booleanParser.Parse(obj.Value.GetBoolean()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class GetPropertiesBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::PropManagerSite.GraphQL.IGetPropertiesResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::PropManagerSite.GraphQL.IGetPropertiesResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.Guid> _uUIDParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Decimal, global::System.Decimal> _decimalParser;
        public GetPropertiesBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::PropManagerSite.GraphQL.IGetPropertiesResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _uUIDParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.Guid>("UUID") ?? throw new global::System.ArgumentException("No serializer for type `UUID` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _decimalParser = serializerResolver.GetLeafValueParser<global::System.Decimal, global::System.Decimal>("Decimal") ?? throw new global::System.ArgumentException("No serializer for type `Decimal` found.");
        }

        public global::StrawberryShake.IOperationResult<IGetPropertiesResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IGetPropertiesResult Result, GetPropertiesResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<IGetPropertiesResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IGetPropertiesResult, GetPropertiesResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> propertiesId = default !;
            _entityStore.Update(session =>
            {
                propertiesId = UpdateNonNullableIGetProperties_PropertiesEntityNonNullableArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "properties"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new GetPropertiesResultInfo(propertiesId, entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> UpdateNonNullableIGetProperties_PropertiesEntityNonNullableArray(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var propertys = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                propertys.Add(UpdateNonNullableIGetProperties_PropertiesEntity(session, child, entityIds));
            }

            return propertys;
        }

        private global::StrawberryShake.EntityId UpdateNonNullableIGetProperties_PropertiesEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Property", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::PropManagerSite.GraphQL.State.PropertyEntity? entity))
                {
                    session.SetEntity(entityId, new global::PropManagerSite.GraphQL.State.PropertyEntity(DeserializeNonNullableGuid(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), entity.PurchasePrice, entity.RegistrationTransferFee, DeserializeDecimal(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "rooms")), DeserializeDecimal(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "bathrooms")), entity.LandSize, DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "address")), entity.PropertyType, entity.StampDuty, DeserializeDecimal(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "carpark")), entity.Loans, entity.Expenses));
                }
                else
                {
                    session.SetEntity(entityId, new global::PropManagerSite.GraphQL.State.PropertyEntity(DeserializeNonNullableGuid(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), default !, default !, DeserializeDecimal(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "rooms")), DeserializeDecimal(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "bathrooms")), default !, DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "address")), default !, default !, DeserializeDecimal(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "carpark")), default !, default !));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Guid DeserializeNonNullableGuid(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _uUIDParser.Parse(obj.Value.GetString()!);
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Decimal? DeserializeDecimal(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _decimalParser.Parse(obj.Value.GetDecimal()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class GetPropertyBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::PropManagerSite.GraphQL.IGetPropertyResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::PropManagerSite.GraphQL.IGetPropertyResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::PropManagerSite.GraphQL.PropertyTypes> _propertyTypesParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::PropManagerSite.GraphQL.LoanTypes> _loanTypesParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.Guid> _uUIDParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Decimal, global::System.Decimal> _decimalParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.DateTimeOffset> _dateTimeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Boolean, global::System.Boolean> _booleanParser;
        public GetPropertyBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::PropManagerSite.GraphQL.IGetPropertyResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _propertyTypesParser = serializerResolver.GetLeafValueParser<global::System.String, global::PropManagerSite.GraphQL.PropertyTypes>("PropertyTypes") ?? throw new global::System.ArgumentException("No serializer for type `PropertyTypes` found.");
            _loanTypesParser = serializerResolver.GetLeafValueParser<global::System.String, global::PropManagerSite.GraphQL.LoanTypes>("LoanTypes") ?? throw new global::System.ArgumentException("No serializer for type `LoanTypes` found.");
            _uUIDParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.Guid>("UUID") ?? throw new global::System.ArgumentException("No serializer for type `UUID` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _decimalParser = serializerResolver.GetLeafValueParser<global::System.Decimal, global::System.Decimal>("Decimal") ?? throw new global::System.ArgumentException("No serializer for type `Decimal` found.");
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _dateTimeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.DateTimeOffset>("DateTime") ?? throw new global::System.ArgumentException("No serializer for type `DateTime` found.");
            _booleanParser = serializerResolver.GetLeafValueParser<global::System.Boolean, global::System.Boolean>("Boolean") ?? throw new global::System.ArgumentException("No serializer for type `Boolean` found.");
        }

        public global::StrawberryShake.IOperationResult<IGetPropertyResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IGetPropertyResult Result, GetPropertyResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<IGetPropertyResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IGetPropertyResult, GetPropertyResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> propertiesId = default !;
            _entityStore.Update(session =>
            {
                propertiesId = UpdateNonNullableIGetProperty_PropertiesEntityNonNullableArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "properties"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new GetPropertyResultInfo(propertiesId, entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> UpdateNonNullableIGetProperty_PropertiesEntityNonNullableArray(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var propertys = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                propertys.Add(UpdateNonNullableIGetProperty_PropertiesEntity(session, child, entityIds));
            }

            return propertys;
        }

        private global::StrawberryShake.EntityId UpdateNonNullableIGetProperty_PropertiesEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Property", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::PropManagerSite.GraphQL.State.PropertyEntity? entity))
                {
                    session.SetEntity(entityId, new global::PropManagerSite.GraphQL.State.PropertyEntity(DeserializeNonNullableGuid(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), DeserializeDecimal(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "purchasePrice")), DeserializeDecimal(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "registrationTransferFee")), DeserializeDecimal(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "rooms")), DeserializeDecimal(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "bathrooms")), DeserializeDecimal(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "landSize")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "address")), DeserializeNonNullablePropertyTypes(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "propertyType")), DeserializeDecimal(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "stampDuty")), DeserializeDecimal(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "carpark")), UpdateNonNullableIEditProperty_EditProperty_Property_LoansEntityNonNullableArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "loans"), entityIds), UpdateNonNullableIEditProperty_EditProperty_Property_ExpensesEntityNonNullableArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "expenses"), entityIds)));
                }
                else
                {
                    session.SetEntity(entityId, new global::PropManagerSite.GraphQL.State.PropertyEntity(DeserializeNonNullableGuid(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), DeserializeDecimal(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "purchasePrice")), DeserializeDecimal(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "registrationTransferFee")), DeserializeDecimal(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "rooms")), DeserializeDecimal(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "bathrooms")), DeserializeDecimal(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "landSize")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "address")), DeserializeNonNullablePropertyTypes(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "propertyType")), DeserializeDecimal(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "stampDuty")), DeserializeDecimal(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "carpark")), UpdateNonNullableIEditProperty_EditProperty_Property_LoansEntityNonNullableArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "loans"), entityIds), UpdateNonNullableIEditProperty_EditProperty_Property_ExpensesEntityNonNullableArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "expenses"), entityIds)));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Guid DeserializeNonNullableGuid(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _uUIDParser.Parse(obj.Value.GetString()!);
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Decimal? DeserializeDecimal(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _decimalParser.Parse(obj.Value.GetDecimal()!);
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::PropManagerSite.GraphQL.PropertyTypes DeserializeNonNullablePropertyTypes(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _propertyTypesParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> UpdateNonNullableIEditProperty_EditProperty_Property_LoansEntityNonNullableArray(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var loans = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                loans.Add(UpdateNonNullableIEditProperty_EditProperty_Property_LoansEntity(session, child, entityIds));
            }

            return loans;
        }

        private global::StrawberryShake.EntityId UpdateNonNullableIEditProperty_EditProperty_Property_LoansEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Loan", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::PropManagerSite.GraphQL.State.LoanEntity? entity))
                {
                    session.SetEntity(entityId, new global::PropManagerSite.GraphQL.State.LoanEntity(DeserializeNonNullableGuid(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "lenderName")), DeserializeDecimal(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "amount")), DeserializeDecimal(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "interest")), DeserializeDecimal(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "lMI")), DeserializeNonNullableLoanTypes(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "loanType")), DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "years")), DeserializeDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "dateOfLoan")), UpdateNonNullableIEditProperty_EditProperty_Property_Loans_PropertyEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "property"), entityIds)));
                }
                else
                {
                    session.SetEntity(entityId, new global::PropManagerSite.GraphQL.State.LoanEntity(DeserializeNonNullableGuid(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "lenderName")), DeserializeDecimal(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "amount")), DeserializeDecimal(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "interest")), DeserializeDecimal(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "lMI")), DeserializeNonNullableLoanTypes(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "loanType")), DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "years")), DeserializeDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "dateOfLoan")), UpdateNonNullableIEditProperty_EditProperty_Property_Loans_PropertyEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "property"), entityIds)));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::PropManagerSite.GraphQL.LoanTypes DeserializeNonNullableLoanTypes(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _loanTypesParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Int32? DeserializeInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::System.DateTimeOffset? DeserializeDateTimeOffset(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _dateTimeParser.Parse(obj.Value.GetString()!);
        }

        private global::StrawberryShake.EntityId UpdateNonNullableIEditProperty_EditProperty_Property_Loans_PropertyEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Property", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::PropManagerSite.GraphQL.State.PropertyEntity? entity))
                {
                    session.SetEntity(entityId, new global::PropManagerSite.GraphQL.State.PropertyEntity(DeserializeNonNullableGuid(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), entity.PurchasePrice, entity.RegistrationTransferFee, entity.Rooms, entity.Bathrooms, entity.LandSize, entity.Address, entity.PropertyType, entity.StampDuty, entity.Carpark, entity.Loans, entity.Expenses));
                }
                else
                {
                    session.SetEntity(entityId, new global::PropManagerSite.GraphQL.State.PropertyEntity(DeserializeNonNullableGuid(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), default !, default !, default !, default !, default !, default !, default !, default !, default !, default !, default !));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> UpdateNonNullableIEditProperty_EditProperty_Property_ExpensesEntityNonNullableArray(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var expenses = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                expenses.Add(UpdateNonNullableIEditProperty_EditProperty_Property_ExpensesEntity(session, child, entityIds));
            }

            return expenses;
        }

        private global::StrawberryShake.EntityId UpdateNonNullableIEditProperty_EditProperty_Property_ExpensesEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Expense", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::PropManagerSite.GraphQL.State.ExpenseEntity? entity))
                {
                    session.SetEntity(entityId, new global::PropManagerSite.GraphQL.State.ExpenseEntity(DeserializeNonNullableGuid(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "title")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "description")), DeserializeDecimal(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "price")), DeserializeNonNullableDecimal(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "totalDeductable")), DeserializeNonNullableGuid(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "propertyId")), DeserializeNonNullableDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "expenseDate")), UpdateNonNullableIEditProperty_EditProperty_Property_Expenses_PropertyEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "property"), entityIds), DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "deleted"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::PropManagerSite.GraphQL.State.ExpenseEntity(DeserializeNonNullableGuid(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "title")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "description")), DeserializeDecimal(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "price")), DeserializeNonNullableDecimal(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "totalDeductable")), DeserializeNonNullableGuid(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "propertyId")), DeserializeNonNullableDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "expenseDate")), UpdateNonNullableIEditProperty_EditProperty_Property_Expenses_PropertyEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "property"), entityIds), DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "deleted"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Decimal DeserializeNonNullableDecimal(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _decimalParser.Parse(obj.Value.GetDecimal()!);
        }

        private global::System.DateTimeOffset DeserializeNonNullableDateTimeOffset(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _dateTimeParser.Parse(obj.Value.GetString()!);
        }

        private global::StrawberryShake.EntityId UpdateNonNullableIEditProperty_EditProperty_Property_Expenses_PropertyEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Property", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::PropManagerSite.GraphQL.State.PropertyEntity? entity))
                {
                    session.SetEntity(entityId, new global::PropManagerSite.GraphQL.State.PropertyEntity(DeserializeNonNullableGuid(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), entity.Name, entity.PurchasePrice, entity.RegistrationTransferFee, entity.Rooms, entity.Bathrooms, entity.LandSize, entity.Address, entity.PropertyType, entity.StampDuty, entity.Carpark, entity.Loans, entity.Expenses));
                }
                else
                {
                    session.SetEntity(entityId, new global::PropManagerSite.GraphQL.State.PropertyEntity(DeserializeNonNullableGuid(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), default !, default !, default !, default !, default !, default !, default !, default !, default !, default !, default !, default !));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Boolean DeserializeNonNullableBoolean(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _booleanParser.Parse(obj.Value.GetBoolean()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class GetLoanBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::PropManagerSite.GraphQL.IGetLoanResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::PropManagerSite.GraphQL.IGetLoanResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::PropManagerSite.GraphQL.LoanTypes> _loanTypesParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.Guid> _uUIDParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Decimal, global::System.Decimal> _decimalParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.DateTimeOffset> _dateTimeParser;
        public GetLoanBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::PropManagerSite.GraphQL.IGetLoanResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _loanTypesParser = serializerResolver.GetLeafValueParser<global::System.String, global::PropManagerSite.GraphQL.LoanTypes>("LoanTypes") ?? throw new global::System.ArgumentException("No serializer for type `LoanTypes` found.");
            _uUIDParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.Guid>("UUID") ?? throw new global::System.ArgumentException("No serializer for type `UUID` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _decimalParser = serializerResolver.GetLeafValueParser<global::System.Decimal, global::System.Decimal>("Decimal") ?? throw new global::System.ArgumentException("No serializer for type `Decimal` found.");
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _dateTimeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.DateTimeOffset>("DateTime") ?? throw new global::System.ArgumentException("No serializer for type `DateTime` found.");
        }

        public global::StrawberryShake.IOperationResult<IGetLoanResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IGetLoanResult Result, GetLoanResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<IGetLoanResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IGetLoanResult, GetLoanResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> loansId = default !;
            _entityStore.Update(session =>
            {
                loansId = UpdateNonNullableIGetLoan_LoansEntityNonNullableArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "loans"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new GetLoanResultInfo(loansId, entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> UpdateNonNullableIGetLoan_LoansEntityNonNullableArray(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var loans = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                loans.Add(UpdateNonNullableIGetLoan_LoansEntity(session, child, entityIds));
            }

            return loans;
        }

        private global::StrawberryShake.EntityId UpdateNonNullableIGetLoan_LoansEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Loan", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::PropManagerSite.GraphQL.State.LoanEntity? entity))
                {
                    session.SetEntity(entityId, new global::PropManagerSite.GraphQL.State.LoanEntity(DeserializeNonNullableGuid(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "lenderName")), DeserializeDecimal(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "amount")), DeserializeDecimal(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "interest")), DeserializeDecimal(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "lMI")), DeserializeNonNullableLoanTypes(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "loanType")), DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "years")), DeserializeDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "dateOfLoan")), UpdateNonNullableIEditProperty_EditProperty_Property_Loans_PropertyEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "property"), entityIds)));
                }
                else
                {
                    session.SetEntity(entityId, new global::PropManagerSite.GraphQL.State.LoanEntity(DeserializeNonNullableGuid(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "lenderName")), DeserializeDecimal(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "amount")), DeserializeDecimal(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "interest")), DeserializeDecimal(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "lMI")), DeserializeNonNullableLoanTypes(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "loanType")), DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "years")), DeserializeDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "dateOfLoan")), UpdateNonNullableIEditProperty_EditProperty_Property_Loans_PropertyEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "property"), entityIds)));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Guid DeserializeNonNullableGuid(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _uUIDParser.Parse(obj.Value.GetString()!);
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Decimal? DeserializeDecimal(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _decimalParser.Parse(obj.Value.GetDecimal()!);
        }

        private global::PropManagerSite.GraphQL.LoanTypes DeserializeNonNullableLoanTypes(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _loanTypesParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Int32? DeserializeInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::System.DateTimeOffset? DeserializeDateTimeOffset(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _dateTimeParser.Parse(obj.Value.GetString()!);
        }

        private global::StrawberryShake.EntityId UpdateNonNullableIEditProperty_EditProperty_Property_Loans_PropertyEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Property", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::PropManagerSite.GraphQL.State.PropertyEntity? entity))
                {
                    session.SetEntity(entityId, new global::PropManagerSite.GraphQL.State.PropertyEntity(DeserializeNonNullableGuid(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), entity.PurchasePrice, entity.RegistrationTransferFee, entity.Rooms, entity.Bathrooms, entity.LandSize, entity.Address, entity.PropertyType, entity.StampDuty, entity.Carpark, entity.Loans, entity.Expenses));
                }
                else
                {
                    session.SetEntity(entityId, new global::PropManagerSite.GraphQL.State.PropertyEntity(DeserializeNonNullableGuid(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), default !, default !, default !, default !, default !, default !, default !, default !, default !, default !, default !));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class GetExpenseBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::PropManagerSite.GraphQL.IGetExpenseResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::PropManagerSite.GraphQL.IGetExpenseResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.Guid> _uUIDParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Decimal, global::System.Decimal> _decimalParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.DateTimeOffset> _dateTimeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Boolean, global::System.Boolean> _booleanParser;
        public GetExpenseBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::PropManagerSite.GraphQL.IGetExpenseResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _uUIDParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.Guid>("UUID") ?? throw new global::System.ArgumentException("No serializer for type `UUID` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _decimalParser = serializerResolver.GetLeafValueParser<global::System.Decimal, global::System.Decimal>("Decimal") ?? throw new global::System.ArgumentException("No serializer for type `Decimal` found.");
            _dateTimeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.DateTimeOffset>("DateTime") ?? throw new global::System.ArgumentException("No serializer for type `DateTime` found.");
            _booleanParser = serializerResolver.GetLeafValueParser<global::System.Boolean, global::System.Boolean>("Boolean") ?? throw new global::System.ArgumentException("No serializer for type `Boolean` found.");
        }

        public global::StrawberryShake.IOperationResult<IGetExpenseResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IGetExpenseResult Result, GetExpenseResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<IGetExpenseResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IGetExpenseResult, GetExpenseResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> expensesId = default !;
            _entityStore.Update(session =>
            {
                expensesId = UpdateNonNullableIGetExpense_ExpensesEntityNonNullableArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "expenses"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new GetExpenseResultInfo(expensesId, entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> UpdateNonNullableIGetExpense_ExpensesEntityNonNullableArray(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var expenses = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                expenses.Add(UpdateNonNullableIGetExpense_ExpensesEntity(session, child, entityIds));
            }

            return expenses;
        }

        private global::StrawberryShake.EntityId UpdateNonNullableIGetExpense_ExpensesEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Expense", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::PropManagerSite.GraphQL.State.ExpenseEntity? entity))
                {
                    session.SetEntity(entityId, new global::PropManagerSite.GraphQL.State.ExpenseEntity(DeserializeNonNullableGuid(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "title")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "description")), DeserializeDecimal(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "price")), DeserializeNonNullableDecimal(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "totalDeductable")), DeserializeNonNullableGuid(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "propertyId")), DeserializeNonNullableDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "expenseDate")), UpdateNonNullableIEditProperty_EditProperty_Property_Expenses_PropertyEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "property"), entityIds), DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "deleted"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::PropManagerSite.GraphQL.State.ExpenseEntity(DeserializeNonNullableGuid(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "title")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "description")), DeserializeDecimal(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "price")), DeserializeNonNullableDecimal(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "totalDeductable")), DeserializeNonNullableGuid(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "propertyId")), DeserializeNonNullableDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "expenseDate")), UpdateNonNullableIEditProperty_EditProperty_Property_Expenses_PropertyEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "property"), entityIds), DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "deleted"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Guid DeserializeNonNullableGuid(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _uUIDParser.Parse(obj.Value.GetString()!);
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Decimal? DeserializeDecimal(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _decimalParser.Parse(obj.Value.GetDecimal()!);
        }

        private global::System.Decimal DeserializeNonNullableDecimal(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _decimalParser.Parse(obj.Value.GetDecimal()!);
        }

        private global::System.DateTimeOffset DeserializeNonNullableDateTimeOffset(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _dateTimeParser.Parse(obj.Value.GetString()!);
        }

        private global::StrawberryShake.EntityId UpdateNonNullableIEditProperty_EditProperty_Property_Expenses_PropertyEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Property", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::PropManagerSite.GraphQL.State.PropertyEntity? entity))
                {
                    session.SetEntity(entityId, new global::PropManagerSite.GraphQL.State.PropertyEntity(DeserializeNonNullableGuid(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), entity.Name, entity.PurchasePrice, entity.RegistrationTransferFee, entity.Rooms, entity.Bathrooms, entity.LandSize, entity.Address, entity.PropertyType, entity.StampDuty, entity.Carpark, entity.Loans, entity.Expenses));
                }
                else
                {
                    session.SetEntity(entityId, new global::PropManagerSite.GraphQL.State.PropertyEntity(DeserializeNonNullableGuid(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), default !, default !, default !, default !, default !, default !, default !, default !, default !, default !, default !, default !));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Boolean DeserializeNonNullableBoolean(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _booleanParser.Parse(obj.Value.GetBoolean()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class EditExpensePayloadData
    {
        public EditExpensePayloadData(global::System.String __typename, global::StrawberryShake.EntityId? expense = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Expense = expense;
        }

        public global::System.String __typename { get; }

        public global::StrawberryShake.EntityId? Expense { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class AddExpensePayloadData
    {
        public AddExpensePayloadData(global::System.String __typename, global::StrawberryShake.EntityId? expense = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Expense = expense;
        }

        public global::System.String __typename { get; }

        public global::StrawberryShake.EntityId? Expense { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class DeleteExpensePayloadData
    {
        public DeleteExpensePayloadData(global::System.String __typename, global::System.Boolean? boolean = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Boolean = boolean;
        }

        public global::System.String __typename { get; }

        public global::System.Boolean? Boolean { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class AddLoanPayloadData
    {
        public AddLoanPayloadData(global::System.String __typename, global::StrawberryShake.EntityId? loan = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Loan = loan;
        }

        public global::System.String __typename { get; }

        public global::StrawberryShake.EntityId? Loan { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class EditLoanPayloadData
    {
        public EditLoanPayloadData(global::System.String __typename, global::StrawberryShake.EntityId? loan = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Loan = loan;
        }

        public global::System.String __typename { get; }

        public global::StrawberryShake.EntityId? Loan { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class DeleteLoanPayloadData
    {
        public DeleteLoanPayloadData(global::System.String __typename, global::System.Boolean? boolean = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Boolean = boolean;
        }

        public global::System.String __typename { get; }

        public global::System.Boolean? Boolean { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class AddPropertyPayloadData
    {
        public AddPropertyPayloadData(global::System.String __typename, global::StrawberryShake.EntityId? property = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Property = property;
        }

        public global::System.String __typename { get; }

        public global::StrawberryShake.EntityId? Property { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class EditPropertyPayloadData
    {
        public EditPropertyPayloadData(global::System.String __typename, global::StrawberryShake.EntityId? property = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Property = property;
        }

        public global::System.String __typename { get; }

        public global::StrawberryShake.EntityId? Property { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class DeletePropertyPayloadData
    {
        public DeletePropertyPayloadData(global::System.String __typename, global::System.Boolean? boolean = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Boolean = boolean;
        }

        public global::System.String __typename { get; }

        public global::System.Boolean? Boolean { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class PropManagerSiteQLEntityIdFactory : global::StrawberryShake.IEntityIdSerializer
    {
        private static readonly global::System.Text.Json.JsonWriterOptions _options = new global::System.Text.Json.JsonWriterOptions()
        {Indented = false};
        public global::StrawberryShake.EntityId Parse(global::System.Text.Json.JsonElement obj)
        {
            global::System.String __typename = obj.GetProperty("__typename").GetString()!;
            return __typename switch
            {
                "Expense" => ParseExpenseEntityId(obj, __typename),
                "Loan" => ParseLoanEntityId(obj, __typename),
                "Property" => ParsePropertyEntityId(obj, __typename),
                _ => throw new global::System.NotSupportedException()};
        }

        public global::System.String Format(global::StrawberryShake.EntityId entityId)
        {
            return entityId.Name switch
            {
                "Expense" => FormatExpenseEntityId(entityId),
                "Loan" => FormatLoanEntityId(entityId),
                "Property" => FormatPropertyEntityId(entityId),
                _ => throw new global::System.NotSupportedException()};
        }

        private global::StrawberryShake.EntityId ParseExpenseEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatExpenseEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseLoanEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatLoanEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParsePropertyEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatPropertyEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class PropManagerSiteQLStoreAccessor : global::StrawberryShake.StoreAccessor
    {
        public PropManagerSiteQLStoreAccessor(global::StrawberryShake.IOperationStore operationStore, global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer entityIdSerializer, global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory> requestFactories, global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory> resultDataFactories) : base(operationStore, entityStore, entityIdSerializer, requestFactories, resultDataFactories)
        {
        }
    }
}
