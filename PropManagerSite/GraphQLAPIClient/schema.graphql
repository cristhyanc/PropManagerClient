schema {
  query: Query
  mutation: Mutation
}

type Query {
  properties(where: PropertyFilterInput): [Property!]!
  loans(where: LoanFilterInput): [Loan!]!
  expenses(where: ExpenseFilterInput): [Expense!]!
}

type Mutation {
  addProperty(input: AddPropertyInput!): AddPropertyPayload!
  editProperty(input: EditPropertyInput!): EditPropertyPayload!
  deleteProperty(input: DeletePropertyInput!): DeletePropertyPayload!
  addLoan(input: AddLoanInput!): AddLoanPayload!
  editLoan(input: EditLoanInput!): EditLoanPayload!
  deleteLoan(input: DeleteLoanInput!): DeleteLoanPayload!
  addExpense(input: AddExpenseInput!): AddExpensePayload!
  editExpense(input: EditExpenseInput!): EditExpensePayload!
  deleteExpense(input: DeleteExpenseInput!): DeleteExpensePayload!
}

input PropertyFilterInput {
  and: [PropertyFilterInput!]
  or: [PropertyFilterInput!]
  id: ComparableGuidOperationFilterInput
  address: StringOperationFilterInput
  propertyType: PropertyTypesOperationFilterInput
  name: StringOperationFilterInput
  stampDuty: ComparableNullableOfDecimalOperationFilterInput
  purchasePrice: ComparableNullableOfDecimalOperationFilterInput
  registrationTransferFee: ComparableNullableOfDecimalOperationFilterInput
  rooms: ComparableNullableOfDecimalOperationFilterInput
  bathrooms: ComparableNullableOfDecimalOperationFilterInput
  carpark: ComparableNullableOfDecimalOperationFilterInput
  landSize: ComparableNullableOfDecimalOperationFilterInput
  loans: ListFilterInputTypeOfLoanFilterInput
  expenses: ListFilterInputTypeOfExpenseFilterInput
  deleted: BooleanOperationFilterInput
}

input LoanFilterInput {
  and: [LoanFilterInput!]
  or: [LoanFilterInput!]
  id: ComparableGuidOperationFilterInput
  lenderName: StringOperationFilterInput
  amount: ComparableNullableOfDecimalOperationFilterInput
  interest: ComparableNullableOfDecimalOperationFilterInput
  loanType: LoanTypesOperationFilterInput
  lMI: ComparableNullableOfDecimalOperationFilterInput
  property: PropertyFilterInput
  propertyId: ComparableGuidOperationFilterInput
  years: ComparableNullableOfInt32OperationFilterInput
  deleted: BooleanOperationFilterInput
  dateOfLoan: ComparableNullableOfDateTimeOffsetOperationFilterInput
}

input ExpenseFilterInput {
  and: [ExpenseFilterInput!]
  or: [ExpenseFilterInput!]
  id: ComparableGuidOperationFilterInput
  title: StringOperationFilterInput
  description: StringOperationFilterInput
  price: ComparableNullableOfDecimalOperationFilterInput
  totalDeductable: ComparableDecimalOperationFilterInput
  property: PropertyFilterInput
  propertyId: ComparableGuidOperationFilterInput
  deleted: BooleanOperationFilterInput
  expenseDate: ComparableDateTimeOffsetOperationFilterInput
  expenseRecurrence: ListFilterInputTypeOfExpenseRecurrenceFilterInput
  startDate: ComparableDateTimeOffsetOperationFilterInput
  endDate: ComparableDateTimeOffsetOperationFilterInput
  frequency: ComparableInt32OperationFilterInput
  reference: StringOperationFilterInput
  companyName: StringOperationFilterInput
  dueDate: ComparableNullableOfDateTimeOffsetOperationFilterInput
  paid: BooleanOperationFilterInput
}

input ComparableGuidOperationFilterInput {
  eq: UUID
  neq: UUID
  in: [UUID!]
  nin: [UUID!]
  gt: UUID
  ngt: UUID
  gte: UUID
  ngte: UUID
  lt: UUID
  nlt: UUID
  lte: UUID
  nlte: UUID
}

input StringOperationFilterInput {
  and: [StringOperationFilterInput!]
  or: [StringOperationFilterInput!]
  eq: String
  neq: String
  contains: String
  ncontains: String
  in: [String]
  nin: [String]
  startsWith: String
  nstartsWith: String
  endsWith: String
  nendsWith: String
}

input PropertyTypesOperationFilterInput {
  eq: PropertyTypes
  neq: PropertyTypes
  in: [PropertyTypes!]
  nin: [PropertyTypes!]
}

input ComparableNullableOfDecimalOperationFilterInput {
  eq: Decimal
  neq: Decimal
  in: [Decimal]
  nin: [Decimal]
  gt: Decimal
  ngt: Decimal
  gte: Decimal
  ngte: Decimal
  lt: Decimal
  nlt: Decimal
  lte: Decimal
  nlte: Decimal
}

input ListFilterInputTypeOfLoanFilterInput {
  all: LoanFilterInput
  none: LoanFilterInput
  some: LoanFilterInput
  any: Boolean
}

input ListFilterInputTypeOfExpenseFilterInput {
  all: ExpenseFilterInput
  none: ExpenseFilterInput
  some: ExpenseFilterInput
  any: Boolean
}

input BooleanOperationFilterInput {
  eq: Boolean
  neq: Boolean
}

input LoanTypesOperationFilterInput {
  eq: LoanTypes
  neq: LoanTypes
  in: [LoanTypes!]
  nin: [LoanTypes!]
}

input ComparableNullableOfInt32OperationFilterInput {
  eq: Int
  neq: Int
  in: [Int]
  nin: [Int]
  gt: Int
  ngt: Int
  gte: Int
  ngte: Int
  lt: Int
  nlt: Int
  lte: Int
  nlte: Int
}

input ComparableNullableOfDateTimeOffsetOperationFilterInput {
  eq: DateTime
  neq: DateTime
  in: [DateTime]
  nin: [DateTime]
  gt: DateTime
  ngt: DateTime
  gte: DateTime
  ngte: DateTime
  lt: DateTime
  nlt: DateTime
  lte: DateTime
  nlte: DateTime
}

input ComparableDecimalOperationFilterInput {
  eq: Decimal
  neq: Decimal
  in: [Decimal!]
  nin: [Decimal!]
  gt: Decimal
  ngt: Decimal
  gte: Decimal
  ngte: Decimal
  lt: Decimal
  nlt: Decimal
  lte: Decimal
  nlte: Decimal
}

input ComparableDateTimeOffsetOperationFilterInput {
  eq: DateTime
  neq: DateTime
  in: [DateTime!]
  nin: [DateTime!]
  gt: DateTime
  ngt: DateTime
  gte: DateTime
  ngte: DateTime
  lt: DateTime
  nlt: DateTime
  lte: DateTime
  nlte: DateTime
}

input ListFilterInputTypeOfExpenseRecurrenceFilterInput {
  all: ExpenseRecurrenceFilterInput
  none: ExpenseRecurrenceFilterInput
  some: ExpenseRecurrenceFilterInput
  any: Boolean
}

input ComparableInt32OperationFilterInput {
  eq: Int
  neq: Int
  in: [Int!]
  nin: [Int!]
  gt: Int
  ngt: Int
  gte: Int
  ngte: Int
  lt: Int
  nlt: Int
  lte: Int
  nlte: Int
}

input ExpenseRecurrenceFilterInput {
  and: [ExpenseRecurrenceFilterInput!]
  or: [ExpenseRecurrenceFilterInput!]
  id: ComparableGuidOperationFilterInput
  expense: ExpenseFilterInput
  expenseId: ComparableGuidOperationFilterInput
  recurrenceDate: ComparableDateTimeOffsetOperationFilterInput
  deleted: BooleanOperationFilterInput
  completed: BooleanOperationFilterInput
}

input DeleteExpenseInput {
  id: UUID!
}

input EditExpenseInput {
  title: String!
  description: String
  price: Decimal
  reference: String
  companyName: String
  totalDeductable: Decimal!
  dueDate: DateTime
  paid: Boolean!
  id: UUID!
  expenseDate: DateTime!
}

input AddExpenseInput {
  title: String!
  description: String
  price: Decimal
  reference: String
  companyName: String
  totalDeductable: Decimal!
  dueDate: DateTime
  paid: Boolean!
  propertyId: UUID!
  expenseDate: DateTime!
}

type Expense {
  id: UUID!
  title: String!
  description: String
  price: Decimal
  totalDeductable: Decimal!
  property: Property!
  propertyId: UUID!
  deleted: Boolean!
  expenseDate: DateTime!
  expenseRecurrence: [ExpenseRecurrence!]!
  startDate: DateTime!
  endDate: DateTime!
  frequency: Int!
  reference: String
  companyName: String
  dueDate: DateTime
  paid: Boolean!
}

input DeleteLoanInput {
  id: UUID!
}

input EditLoanInput {
  id: UUID!
  lenderName: String!
  amount: Decimal!
  interest: Decimal
  loanType: LoanTypes!
  lMI: Decimal
  years: Int
  dateOfLoan: DateTime
}

input AddLoanInput {
  lenderName: String!
  amount: Decimal!
  interest: Decimal
  loanType: LoanTypes!
  lMI: Decimal
  years: Int
  dateOfLoan: DateTime
  propertyId: UUID!
}

input DeletePropertyInput {
  id: UUID!
}

input EditPropertyInput {
  id: UUID!
  address: String!
  name: String!
  stampDuty: Decimal
  purchasePrice: Decimal
  registrationTransferFee: Decimal
  rooms: Decimal
  bathrooms: Decimal
  carpark: Decimal
  landSize: Decimal
  propertyType: PropertyTypes
}

input AddPropertyInput {
  address: String!
  name: String!
  stampDuty: Decimal
  purchasePrice: Decimal
  registrationTransferFee: Decimal
  rooms: Decimal
  bathrooms: Decimal
  carpark: Decimal
  landSize: Decimal
  propertyType: PropertyTypes
}

type Loan {
  id: UUID!
  lenderName: String!
  amount: Decimal
  interest: Decimal
  loanType: LoanTypes!
  lMI: Decimal
  property: Property!
  propertyId: UUID!
  years: Int
  deleted: Boolean!
  dateOfLoan: DateTime
}

type Property {
  id: UUID!
  address: String!
  propertyType: PropertyTypes!
  name: String
  stampDuty: Decimal
  purchasePrice: Decimal
  registrationTransferFee: Decimal
  rooms: Decimal
  bathrooms: Decimal
  carpark: Decimal
  landSize: Decimal
  loans: [Loan!]!
  expenses: [Expense!]!
  deleted: Boolean!
}

scalar UUID

enum PropertyTypes {
  UNIT
  HOUSE
  TOWN_HOUSE
}

"The built-in `Decimal` scalar type."
scalar Decimal

enum LoanTypes {
  INTEREST_ONLY
  PRINCIPAL_AND_INTEREST
}

"The `DateTime` scalar represents an ISO-8601 compliant date time type."
scalar DateTime

type ExpenseRecurrence {
  id: UUID!
  expense: Expense!
  expenseId: UUID!
  recurrenceDate: DateTime!
  deleted: Boolean!
  completed: Boolean!
}

type AddPropertyPayload {
  property: Property
}

type EditPropertyPayload {
  property: Property
}

type DeletePropertyPayload {
  boolean: Boolean
}

type AddLoanPayload {
  loan: Loan
}

type EditLoanPayload {
  loan: Loan
}

type DeleteLoanPayload {
  boolean: Boolean
}

type AddExpensePayload {
  expense: Expense
}

type EditExpensePayload {
  expense: Expense
}

type DeleteExpensePayload {
  boolean: Boolean
}